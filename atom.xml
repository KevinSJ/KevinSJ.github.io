<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin Jiang&#39;s Technical Blog</title>
  
  
  <link href="https://jiangsc.me/atom.xml" rel="self"/>
  
  <link href="https://jiangsc.me/"/>
  <updated>2025-03-13T04:44:41.765Z</updated>
  <id>https://jiangsc.me/</id>
  
  <author>
    <name>Kevin Jiang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Week of 2025-03-09</title>
    <link href="https://jiangsc.me/2025/03/09/notes-2025-03-09/"/>
    <id>https://jiangsc.me/2025/03/09/notes-2025-03-09/</id>
    <published>2025-03-09T05:34:11.000Z</published>
    <updated>2025-03-13T04:44:41.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Interesting-Videos-Watched"><a href="#Interesting-Videos-Watched" class="headerlink" title="Interesting Videos Watched"></a>Interesting Videos Watched</h2><p>This week, I watched a couple of interesting videos on CCC (Chaos Computing Club). They are mostly about Kubernetes and Ops side of things, and I found them to be quite interesting and highly recommend watching them if you are interested in the topic or just want to learn something new.</p><h3 id="Embracing-Karpenter-to-scale-optimize-upgrade-Kubernetes"><a href="#Embracing-Karpenter-to-scale-optimize-upgrade-Kubernetes" class="headerlink" title="Embracing Karpenter to scale, optimize &amp; upgrade Kubernetes"></a><span class="exturl" data-url="aHR0cHM6Ly9tZWRpYS5jY2MuZGUvdi9naGVudDIwMjUtNjE0LWVtYnJhY2luZy1rYXJwZW50ZXItdG8tc2NhbGUtb3B0aW1pemUtdXBncmFkZS1rdWJlcm5ldGVz">Embracing Karpenter to scale, optimize &amp; upgrade Kubernetes<i class="fa fa-external-link-alt"></i></span></h3><p><strong>Recommendation</strong>: ⭐⭐⭐⭐⭐</p><p><strong>Takeaways</strong>: While I&#39;m still not a big fan of Kubernetes. This video is interesting cause it is about a tool that solves an interesting problem in Kubernetes space: scaling. The author first present some basic definition for Kubernetes and also mentioned the current de-facto solution for scaling in k8s is cluster auto scaler. The issue with cluster auto scaler is that it is not able to scale based on the compute needs (i.e. it is only able to launch a given type of predefined resources), and it is not able to consolidate under utilized resources.<br>He then present a software called <span class="exturl" data-url="aHR0cHM6Ly9rYXJwZW50ZXIuc2gv">Karpenter<i class="fa fa-external-link-alt"></i></span> which looks quite promising -- it can scale different type of instances to handle current resource needs, it can also consolidate pods onto different and underutilized cluster.</p><h3 id="Running-Kubernetes-on-small-scale-lessons-learned-on-operating-small-scale-clusters"><a href="#Running-Kubernetes-on-small-scale-lessons-learned-on-operating-small-scale-clusters" class="headerlink" title="Running Kubernetes on small scale - lessons learned on operating &quot;small scale&quot; clusters"></a><span class="exturl" data-url="aHR0cHM6Ly9tZWRpYS5jY2MuZGUvdi9naGVudDIwMjUtNjc5LXJ1bm5pbmcta3ViZXJuZXRlcy1vbi1zbWFsbC1zY2FsZS1sZXNzb25zLWxlYXJuZWQtb24tb3BlcmF0aW5nLXNtYWxsLXNjYWxlLWNsdXN0ZXJz">Running Kubernetes on small scale - lessons learned on operating &quot;small scale&quot; clusters<i class="fa fa-external-link-alt"></i></span></h3><p><strong>Recommendation</strong>: ⭐⭐⭐⭐⭐</p><p><strong>Takeaways</strong>: In this talk, the author shared some of the things he learnt from working with Kubernetes. This also includes some of the best practices I think is very important for developer to learn. I highly recommend watching this.</p><h2 id="Articles-Read"><a href="#Articles-Read" class="headerlink" title="Articles Read"></a>Articles Read</h2><h3 id="The-Balatro-Timeline-—-LocalThunk"><a href="#The-Balatro-Timeline-—-LocalThunk" class="headerlink" title="The Balatro Timeline — LocalThunk"></a><span class="exturl" data-url="aHR0cHM6Ly9sb2NhbHRodW5rLmNvbS9ibG9nL2JhbGF0cm8tdGltZWxpbmUtM2Fhcmg=">The Balatro Timeline — LocalThunk<i class="fa fa-external-link-alt"></i></span></h3><p><strong>Takeaways</strong>: This article is written by the author of Balatro, one of the best games in recent days. The article details how he got the idea of Balatro and how he brought the game to life.</p><h3 id="Great-software-design-looks-underwhelming"><a href="#Great-software-design-looks-underwhelming" class="headerlink" title="Great software design looks underwhelming"></a><span class="exturl" data-url="aHR0cHM6Ly93d3cuc2VhbmdvZWRlY2tlLmNvbS9ncmVhdC1zb2Z0d2FyZS1kZXNpZ24v">Great software design looks underwhelming<i class="fa fa-external-link-alt"></i></span></h3><p><strong>Takeaways</strong>: Software shouldn&#39;t be intentionally complex. I definitely agree with this idea.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Interesting-Videos-Watched&quot;&gt;&lt;a href=&quot;#Interesting-Videos-Watched&quot; class=&quot;headerlink&quot; title=&quot;Interesting Videos Watched&quot;&gt;&lt;/a&gt;Interest</summary>
      
    
    
    
    
    <category term="Notes" scheme="https://jiangsc.me/tags/Notes/"/>
    
    <category term="Learnings" scheme="https://jiangsc.me/tags/Learnings/"/>
    
    <category term="DevOps" scheme="https://jiangsc.me/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>Building and Deploying Apps From CLI</title>
    <link href="https://jiangsc.me/2025/02/08/mobile-dev-cli-tips-2/"/>
    <id>https://jiangsc.me/2025/02/08/mobile-dev-cli-tips-2/</id>
    <published>2025-02-08T04:33:58.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>In the context of this article, both Android and iOS project means native iOS and Android project, written in Swift or Kotlin. It may work with Flutter or similar technology with some tuning, but the author had no working experience no technology working with those technology at the time of writing.</p></div><p>Quite often in my daily work, I need to run both the iOS simulator and Android emulator at the same time. This would normally mean I would have to have both XCode and Android Studio open and running. Though I&#39;m on a MacBook Pro with M1 Pro chip, the fact I need to open <strong>two very heavy IDEs</strong> at the same time plus two simulators is something I would rather not do. What&#39;s worse, I need to interact with both IDE to rebuild and redeploy the application to the simulator every time I switch the branch. Eventually, I decided to spend time and investigate how to automate this process.</p><span id="more"></span><h3 id="What"><a href="#What" class="headerlink" title="What?"></a>What?</h3><p>Before we go into the investigation, it is important to define the goal first. The goal here, is <strong>automate the process of building iOS&#x2F;Android app from source using command line and deploy the application to the iOS&#x2F;Android simulator separately</strong>.</p><p>To break it down to smaller steps, the automation we want to create, should</p><ol><li>Detect the project type based on certain criteria;</li><li>Build the project from source;</li><li>Turn on a Simulator&#x2F;Emulator;</li><li>Deploy the project to the running Simulator&#x2F;Emulator;</li><li>Launch the running program;</li></ol><p>This looks like an ambitious project, but it is achievable. However, I have to admit I spent quite a lot of time optimizing and rewriting what I created in order to achieve what I outlined above.</p><h3 id="How"><a href="#How" class="headerlink" title="How?"></a>How?</h3><p>For clarity, in this section, I would go through each of the smaller steps I outlined, and how I achieved them.</p><h4 id="Detect-the-project-type-based-on-certain-criteria"><a href="#Detect-the-project-type-based-on-certain-criteria" class="headerlink" title="Detect the project type based on certain criteria"></a>Detect the project type based on certain criteria</h4><p>Assuming one have no prior knowledge of Android or iOS development, they could still tell the two projects apart easily -- they can simply determine the projects based on files that exists in the project. Here are a few ways I could think about:</p><ul><li>iOS project almost always uses Swift or Objective C, this means, there must be files in the projects that use <code>.swift</code> as extension; Android project almost always uses Kotlin or Java, so <code>.kt</code> or <code>.java</code> would be the file extension to determine the project as Android.</li><li>iOS project usually uses CocoaPod to manage its dependencies -- you would almost always see a Podfile for an iOS project; Android projects would always have some kind of gradle file.</li></ul><p>There are countless other ways, I opt to use gradle file and Podfile to determine the project type.</p><p>So the script would begin with a function to determine the project type, I named this <code>run_mobile_platform</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">run_mobile_platform</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ -f <span class="string">&quot;Podfile&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Detected iOS project (Podfile found).&quot;</span></span><br><span class="line">    build_and_run_ios</span><br><span class="line">  <span class="keyword">elif</span> [ -f <span class="string">&quot;build.gradle&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Detected Android project (build.gradle found).&quot;</span></span><br><span class="line">    build_and_run_android</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error: Unable to detect project platform. Make sure either Podfile or build.gradle exists.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Build-the-project-from-source"><a href="#Build-the-project-from-source" class="headerlink" title="Build the project from source"></a>Build the project from source</h4><p>As you can see from the previous step, I have given away what we need to do next. We would need to complete <code>build_and_run_ios</code> and <code>build_and_run_android</code>.<br>The first step would be build, this would be assemble the app to binary format from source.</p><div class="tabs" id="build-from-source"><ul class="nav-tabs"><li class="tab active"><a href="#build-from-source-1">Build iOS app from source</a></li><li class="tab"><a href="#build-from-source-2">Build Android app from source</a></li></ul><div class="tab-content"><div class="tab-pane active" id="build-from-source-1"><p>To build iOS source code from command line, you need to use xcodebuild. To read more about xcodebuild, you can refer to this <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS90ZWNobm90ZXMvdG4yMzM5L19pbmRleC5odG1s">link from Apple<i class="fa fa-external-link-alt"></i></span>, or <span class="exturl" data-url="aHR0cHM6Ly9rZWl0aC5naXRodWIuaW8veGNvZGUtbWFuLXBhZ2VzL3hjb2RlYnVpbGQuMS5odG1s">this online man page<i class="fa fa-external-link-alt"></i></span>. In short, this tool is Apple&#39;s proprietary tool to build, run tests, etc. from the command line. It&#39;s meant to be used for CI&#x2F;CD, or even automated testing. In this case, we are utilizing it to get gather information on a project as well as building it.</p><p>To run xcodebuild and build the project, you would at least need to provide</p><ul><li><code>configuration</code> which can only be either <code>Debug</code> or <code>Release</code>.</li><li><code>workspace</code> which is the xcode workspace file.</li><li><code>scheme</code> which is <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGNvZGUvY3VzdG9taXppbmctdGhlLWJ1aWxkLXNjaGVtZXMtZm9yLWEtcHJvamVjdCM6fjp0ZXh0PUElMjBidWlsZCUyMHNjaGVtZSUyMGNvbnRhaW5zJTIwYSUyMGxpc3QlMjBvZiUyMHRhcmdldHMlMjB0byUyMGJ1aWxkJTJDJTIwYW5kJTIwYW55JTIwY29uZmlndXJhdGlvbiUyMGFuZCUyMGVudmlyb25tZW50JTIwZGV0YWlscyUyMHRoYXQlMjBhZmZlY3QlMjB0aGUlMjBzZWxlY3RlZCUyMGFjdGlvbi4=">defined by Apple<i class="fa fa-external-link-alt"></i></span> as<blockquote><p>... a list of targets to build, and any configuration and environment details that affect the selected action ...</p></blockquote></li><li><code>target</code> which is <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24veGNvZGUvY29uZmlndXJpbmctYS1uZXctdGFyZ2V0LWluLXlvdXItcHJvamVjdCM6fjp0ZXh0PUElMjB0YXJnZXQlMjBzcGVjaWZpZXMlMjBhJTIwcHJvZHVjdCUyMHRvJTIwYnVpbGQlMkMlMjBzdWNoJTIwYXMlMjBhbiUyMGFwcCUyQyUyMGZyYW1ld29yayUyQyUyMGFwcCUyMGV4dGVuc2lvbiUyQyUyMG9yJTIwdW5pdCUyMHRlc3QuJTIwQSUyMHByb2plY3QlMjBjYW4lMjBjb250YWluJTIwbXVsdGlwbGUlMjB0YXJnZXRzJTJDJTIwdXN1YWxseSUyMHJlcHJlc2VudGluZyUyMHJlbGF0ZWQlMjBwYXJ0cyUyMG9mJTIwYSUyMHNpbmdsZSUyMHByb2R1Y3Q=">defined by Apple<i class="fa fa-external-link-alt"></i></span> as<blockquote><p>... specifies a product to build, such as an app, framework, app extension, or unit test. A project can contain multiple targets, usually representing related parts of a single product ...</p></blockquote></li></ul><p>I&#39;m by no means an iOS developer, so I wouldn&#39;t go in-depth on any of these things. All you need to know is you can build an iOS project from command line with something like the following</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xcodebuild -quiet -configuration Debug -scheme SCHEME_NAME \</span><br><span class="line">   -workspace WORK_SPACE_NAME \</span><br><span class="line">   -sdk <span class="string">&quot;iphonesimulator&quot;</span></span><br></pre></td></tr></table></figure><p>To do this without hard coding, you can extract things from build settings using <code>xcodebuild -showBuildSettings</code>. As an example:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">build_ios_app</span></span>()&#123;</span><br><span class="line">  build_settings=$(xcodebuild -showBuildSettings -quiet -json)</span><br><span class="line"></span><br><span class="line">  PRODUCT_BUNDLE_IDENTIFIER=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$build_settings</span>&quot;</span>|jq -r <span class="string">&quot;.[]|.buildSettings|.PRODUCT_BUNDLE_IDENTIFIER&quot;</span>)</span><br><span class="line">  BUNDLE_IDENTIFIER=<span class="variable">$PRODUCT_BUNDLE_IDENTIFIER</span><span class="string">&quot;.Debug&quot;</span></span><br><span class="line">  BUILD_DIR=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$build_settings</span>&quot;</span>|jq -r <span class="string">&quot;.[]|.buildSettings|.BUILD_DIR&quot;</span>)</span><br><span class="line">  TARGET=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$build_settings</span>&quot;</span>|jq -r <span class="string">&quot;.[]|.target&quot;</span>)</span><br><span class="line">  APP_PATH=<span class="string">&quot;<span class="variable">$BUILD_DIR</span>&quot;</span>/Debug-iphonesimulator/<span class="string">&quot;<span class="variable">$TARGET</span>&quot;</span>.app</span><br><span class="line"></span><br><span class="line">  <span class="comment"># COMPILER_INDEX_STORE_ENABLE=NO is added to disable indexing which is only useful for XCode</span></span><br><span class="line">  COMPILER_INDEX_STORE_ENABLE=NO xcodebuild -quiet -configuration Debug -scheme <span class="string">&quot;<span class="variable">$TARGET</span>&quot;</span><span class="string">&#x27; (Dev)&#x27;</span> \</span><br><span class="line">  -workspace <span class="string">&quot;<span class="variable">$TARGET</span>&quot;</span>.xcworkspace \</span><br><span class="line">  -sdk <span class="string">&quot;iphonesimulator&quot;</span> build | <span class="built_in">tee</span> xcodebuild.log &gt; /dev/null 2&gt;&amp;1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>As you can see, the function intentionally avoided hard coding things, and attempt to extract most things from <code>xcodebuild -showBuildSettings</code></p></div><div class="tab-pane" id="build-from-source-2"><p>Building Android from source is a different story, I haven&#39;t found a good way to achieve what I wanted without any hard coding yet.</p></div></div></div><h4 id="Run-a-Simulator-Emulator"><a href="#Run-a-Simulator-Emulator" class="headerlink" title="Run a Simulator&#x2F;Emulator"></a>Run a Simulator&#x2F;Emulator</h4><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1">Run iOS simulator</a></li><li class="tab"><a href="#-2">Run android emulator</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IOS_SIM_UDID=$(xcrun simctl list -je|jq -r <span class="string">&quot;.devices|to_entries[0]|.value[]|.name+\&quot;,\&quot;+.udid&quot;</span>|fzf --prompt <span class="string">&quot;Choose a simulator from the list: &quot;</span>|awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><p>The command above will use <code>simctl</code> program to list and <code>fzf</code> to prompt for a simulator to choose from, the UDID of the iOS simulator will be assigned to IOS_SIM_UDID</p></div><div class="tab-pane" id="-2"><p>Similar tricks can be applied for running Android emulator, we would use <code>emulator</code> program which sits under the Android SDK directory. You would first need to make sure you have it in your $PATH variable, so do something like <code>export PATH=YOUR_ANDROID_SDK_ROUTE:$PATH</code> <em>BEFORE</em> you run the command below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ANDROID_AVD=$(emulator -list-avds | fzf --prompt <span class="string">&quot;Choose an Android Emulator: &quot;</span>)</span><br><span class="line"></span><br><span class="line">emulator -avd <span class="string">&quot;<span class="variable">$ANDROID_AVD</span>&quot;</span> \</span><br><span class="line">    -logcat <span class="string">&#x27;*:silent&#x27;</span> \</span><br><span class="line">    -partition-size 4096 \</span><br><span class="line">    -writable-system \</span><br><span class="line">    -no-boot-anim &gt; /dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></div></div></div><h4 id="Deploy-and-launch-the-app-to-the-running-Simulator-Emulator"><a href="#Deploy-and-launch-the-app-to-the-running-Simulator-Emulator" class="headerlink" title="Deploy and launch the app to the running Simulator&#x2F;Emulator"></a>Deploy and launch the app to the running Simulator&#x2F;Emulator</h4><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1">Deploy to iOS simulator</a></li><li class="tab"><a href="#-2">Deploy to Android emulator</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Installing app at path <span class="variable">$APP_PATH</span>&quot;</span></span><br><span class="line">xcrun simctl install booted <span class="variable">$APP_PATH</span></span><br></pre></td></tr></table></figure><p>The command above will use <code>simctl</code> program to install the app at <code>$APP_PATH</code></p></div><div class="tab-pane" id="-2"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GRADLE_BUILD_OUTPUT=<span class="string">&quot;&quot;</span></span><br><span class="line">regex=<span class="string">&quot;BUILD SUCCESSFUL&quot;</span></span><br><span class="line"><span class="keyword">until</span> [[ <span class="string">&quot;<span class="variable">$&#123;GRADLE_BUILD_OUTPUT&#125;</span>&quot;</span> =~ <span class="variable">$regex</span> ]]; <span class="keyword">do</span></span><br><span class="line">  GRADLE_BUILD_OUTPUT=$(./gradlew installDevelopment 2&gt;&amp;1 &amp;)</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\nWaiting for gradle build to succeed..&quot;</span></span><br><span class="line">  <span class="built_in">sleep</span> 2</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Launching app...&quot;</span></span><br><span class="line">adb shell monkey -p <span class="variable">$PACKAGE_NAME</span> 1</span><br></pre></td></tr></table></figure><p>The command above will build and launch the app on the android emulator.</p></div></div></div><h3 id="Put-it-all-together"><a href="#Put-it-all-together" class="headerlink" title="Put it all together"></a>Put it all together</h3><p>Putting all the steps together, I created the following script, feel free to tailor to your need.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">run_mobile_platform</span></span>() &#123;</span><br><span class="line">  <span class="keyword">if</span> [ -f <span class="string">&quot;Podfile&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Detected iOS project (Podfile found).&quot;</span></span><br><span class="line">    build_and_run_ios</span><br><span class="line">  <span class="keyword">elif</span> [ -f <span class="string">&quot;build.gradle&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Detected Android project (build.gradle found).&quot;</span></span><br><span class="line">    build_and_run_android</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Error: Unable to detect project platform. Make sure either Podfile or build.gradle exists.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> 1</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Android-specific functions</span></span><br><span class="line"><span class="function"><span class="title">build_and_run_android</span></span>() &#123;</span><br><span class="line">  <span class="comment">#ANDROID_APP=&quot;app/build/outputs/apk/development/app-development.apk&quot;</span></span><br><span class="line">  PACKAGE_NAME=<span class="string">&quot;PKG_NAME&quot;</span></span><br><span class="line">  BOOT_ANIMATION=<span class="string">&quot;&quot;</span></span><br><span class="line">  FAIL_COUNTER=0</span><br><span class="line">  SECONDS_UNTIL_TIMEOUT=60</span><br><span class="line">  LINE=<span class="string">&quot;<span class="subst">$(printf %<span class="string">&quot;<span class="subst">$(tput cols)</span>&quot;</span>s | tr <span class="string">&quot; &quot;</span> <span class="string">&quot;-&quot;</span>)</span>&quot;</span></span><br><span class="line">  <span class="comment">#AVD_ARGS=&quot; -wipe-data -no-snapshot&quot;</span></span><br><span class="line"></span><br><span class="line">  select_and_launch_emulator</span><br><span class="line">  wait_for_emulator_to_start</span><br><span class="line">  wait_for_build_and_install</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">select_and_launch_emulator</span></span>() &#123;</span><br><span class="line">  emulator -avd <span class="string">&quot;<span class="subst">$(emulator -list-avds | head -1)</span>&quot;</span> \</span><br><span class="line">    -logcat <span class="string">&#x27;*:silent&#x27;</span> \</span><br><span class="line">    -partition-size 4096 \</span><br><span class="line">    -change-country nz \</span><br><span class="line">    -writable-system \</span><br><span class="line">    -icc-profile iccprofile_for_sim0.xml \</span><br><span class="line">    -no-boot-anim &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">wait_for_emulator_to_start</span></span>() &#123;</span><br><span class="line">  <span class="keyword">until</span> [[ <span class="string">&quot;<span class="variable">$BOOT_ANIMATION</span>&quot;</span> =~ <span class="string">&quot;stopped&quot;</span> ]]; <span class="keyword">do</span></span><br><span class="line">    BOOT_ANIMATION=$(adb -e shell getprop init.svc.bootanim 2&gt;&amp;1 &amp;)</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$BOOT_ANIMATION</span>&quot;</span> =~ <span class="string">&quot;device not found&quot;</span> || <span class="string">&quot;<span class="variable">$BOOT_ANIMATION</span>&quot;</span> =~ <span class="string">&quot;device offline&quot;</span> || <span class="string">&quot;<span class="variable">$BOOT_ANIMATION</span>&quot;</span> =~ <span class="string">&quot;running&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">      ((FAIL_COUNTER += <span class="number">1</span>))</span><br><span class="line">      <span class="built_in">echo</span> -e <span class="string">&quot;\nWaiting for emulator to start.. <span class="variable">$FAIL_COUNTER</span>&quot;</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Boot Animation State: <span class="variable">$BOOT_ANIMATION</span>&quot;</span></span><br><span class="line">      <span class="keyword">if</span> [[ <span class="variable">$&#123;FAIL_COUNTER&#125;</span> -gt <span class="variable">$&#123;SECONDS_UNTIL_TIMEOUT&#125;</span> ]]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> -e <span class="string">&quot;\nTimeout of <span class="variable">$SECONDS_UNTIL_TIMEOUT</span> seconds reached; failed to start emulator&quot;</span></span><br><span class="line">        <span class="built_in">exit</span> 1</span><br><span class="line">      <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">sleep</span> 1</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\n<span class="variable">$&#123;LINE&#125;</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;\nEmulator is ready!&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">wait_for_build_and_install</span></span>() &#123;</span><br><span class="line">  GRADLE_BUILD_OUTPUT=<span class="string">&quot;&quot;</span></span><br><span class="line">  regex=<span class="string">&quot;BUILD SUCCESSFUL&quot;</span></span><br><span class="line">  <span class="keyword">until</span> [[ <span class="string">&quot;<span class="variable">$&#123;GRADLE_BUILD_OUTPUT&#125;</span>&quot;</span> =~ <span class="variable">$regex</span> ]]; <span class="keyword">do</span></span><br><span class="line">    GRADLE_BUILD_OUTPUT=$(./gradlew installDevelopment 2&gt;&amp;1 &amp;)</span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;\nWaiting for gradle build to succeed..&quot;</span></span><br><span class="line">    <span class="built_in">sleep</span> 2</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Launching app...&quot;</span></span><br><span class="line">  adb shell monkey -p <span class="variable">$PACKAGE_NAME</span> 1</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># iOS-specific functions</span></span><br><span class="line"><span class="function"><span class="title">build_and_run_ios</span></span>() &#123;</span><br><span class="line">  build_settings=$(xcodebuild -showBuildSettings -quiet -json)</span><br><span class="line">  <span class="comment">#PRODUCT_BUNDLE_IDENTIFIER=$(xcodebuild -showBuildSettings -quiet | grep PRODUCT_BUNDLE_IDENTIFIER | awk -F &#x27; = &#x27; &#x27;&#123;print $2&#125;&#x27;)</span></span><br><span class="line">  PRODUCT_BUNDLE_IDENTIFIER=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$build_settings</span>&quot;</span>|jq -r <span class="string">&quot;.[]|.buildSettings|.PRODUCT_BUNDLE_IDENTIFIER&quot;</span>)</span><br><span class="line">  BUNDLE_IDENTIFIER=<span class="variable">$PRODUCT_BUNDLE_IDENTIFIER</span><span class="string">&quot;.Debug&quot;</span></span><br><span class="line">  BUILD_DIR=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$build_settings</span>&quot;</span>|jq -r <span class="string">&quot;.[]|.buildSettings|.BUILD_DIR&quot;</span>)</span><br><span class="line">  TARGET=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$build_settings</span>&quot;</span>|jq -r <span class="string">&quot;.[]|.target&quot;</span>)</span><br><span class="line">  APP_PATH=<span class="string">&quot;<span class="variable">$BUILD_DIR</span>&quot;</span>/Debug-iphonesimulator/<span class="string">&quot;<span class="variable">$TARGET</span>&quot;</span>.app</span><br><span class="line">  BUILD_SUCCEED=<span class="string">&#x27;** BUILD SUCCEEDED **&#x27;</span></span><br><span class="line">  APP_NAME=$(<span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;APP_PATH##*/&#125;</span>&quot;</span> | <span class="built_in">cut</span> -d<span class="string">&#x27;.&#x27;</span> -f1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$CLEAN_BUILD</span>&quot;</span> == <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    CLEAN_BUILD_FLAG=clean</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    CLEAN_BUILD_FLAG=<span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"> COMPILER_INDEX_STORE_ENABLE=NO xcodebuild -quiet -configuration Debug -scheme <span class="string">&quot;<span class="variable">$TARGET</span>&quot;</span><span class="string">&#x27; (Dev)&#x27;</span> \</span><br><span class="line">    -workspace <span class="string">&quot;<span class="variable">$TARGET</span>&quot;</span>.xcworkspace \</span><br><span class="line">    -sdk <span class="string">&quot;iphonesimulator&quot;</span> <span class="variable">$CLEAN_BUILD_FLAG</span> build | <span class="built_in">tee</span> xcodebuild.log &gt; /dev/null 2&gt;&amp;1</span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$BUILD_SUCCEED</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Running sim for <span class="variable">$APP_NAME</span> - <span class="variable">$BUNDLE_IDENTIFIER</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  IOS_SIM_UDID=$(xcrun simctl list -je|jq -r <span class="string">&quot;.devices|to_entries[0]|.value[]|.name+\&quot;,\&quot;+.udid&quot;</span>|fzf --prompt <span class="string">&quot;Choose a simulator from the list&quot;</span>|awk -F <span class="string">&#x27;,&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  BOOTED_UDID=$(xcrun simctl list | grep Booted | perl -pe <span class="string">&#x27;s/.*\((.*)\).*\(.*/\1/&#x27;</span> | sed -n 1p)</span><br><span class="line">  <span class="keyword">if</span> [[ -n <span class="variable">$BOOTED_UDID</span> &amp;&amp; <span class="string">&quot;<span class="variable">$BOOTED_UDID</span>&quot;</span> != <span class="string">&quot;<span class="variable">$IOS_SIM_UDID</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">    <span class="comment">#echo &quot;Detected a running simulator that&#x27;s different from selected, kill it? (Y/N): &quot;</span></span><br><span class="line">    <span class="built_in">read</span> -rp <span class="string">&quot;Detected a running simulator that&#x27;s different from selected, kill it? (Y/N): &quot;</span> kill_sim</span><br><span class="line">    <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$kill_sim</span>&quot;</span> =~ ^[Yy]$ ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">&quot;Killing current running simulator&quot;</span></span><br><span class="line">      killall <span class="string">&#x27;Simulator&#x27;</span></span><br><span class="line">      <span class="built_in">sleep</span> 1</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      IOS_SIM_UDID=<span class="variable">$BOOTED_UDID</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  open -a <span class="string">&#x27;Simulator&#x27;</span> --args -CurrentDeviceUDID <span class="string">&quot;<span class="variable">$IOS_SIM_UDID</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> [ <span class="string">&quot;<span class="subst">$(booted_sim_ct)</span>&quot;</span> -lt 1 ]; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sleep</span> 1</span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Installing app at path <span class="variable">$APP_PATH</span>&quot;</span></span><br><span class="line">  xcrun simctl install booted <span class="variable">$APP_PATH</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$DEBUGGER_ENABLED</span>&quot;</span> == <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    LAUNCH_DEBUGGER_ENABLED_FLAG=--wait-for-debugger</span><br><span class="line">    USE_CONSOLE_FLAG=<span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    USE_CONSOLE_FLAG=--console</span><br><span class="line">    LAUNCH_DEBUGGER_ENABLED_FLAG=<span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  LOG_FILE=/tmp/run_ios_sim.log</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Starting Sim for <span class="variable">$APP_PATH</span>&quot;</span> &gt; <span class="variable">$LOG_FILE</span></span><br><span class="line"></span><br><span class="line">  xcrun simctl launch <span class="variable">$LAUNCH_DEBUGGER_ENABLED_FLAG</span> <span class="variable">$USE_CONSOLE_FLAG</span> booted <span class="string">&quot;<span class="variable">$BUNDLE_IDENTIFIER</span>&quot;</span> &gt;&gt; <span class="string">&quot;<span class="variable">$LOG_FILE</span>&quot;</span> 2&gt;&amp;1 &amp;</span><br><span class="line"></span><br><span class="line">  LAUNCH_SHELL_PID=$!</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="function"><span class="title">newest_related_process</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> $(ps aux | grep <span class="string">&quot;<span class="variable">$APP_NAME</span>&quot;</span>.app/<span class="string">&quot;<span class="variable">$APP_NAME</span>&quot;</span> | grep -v -e <span class="string">&quot;*.grep&quot;</span> | <span class="built_in">sort</span> -k 4nr,4  | awk <span class="string">&#x27;&#123; print ( $2 &gt; &#x27;</span><span class="variable">$LAUNCH_SHELL_PID</span><span class="string">&#x27; ) ? $2 : &quot;&quot; &#125;&#x27;</span> | grep -v -e <span class="string">&#x27;^$&#x27;</span> | <span class="built_in">head</span> -1)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _Z=$(newest_related_process)</span><br><span class="line">  _X=0</span><br><span class="line">  <span class="keyword">while</span> [[ <span class="string">&quot;<span class="variable">$_Z</span>&quot;</span> != <span class="string">&quot;<span class="variable">$_X</span>&quot;</span> ]]</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">sleep</span> 1</span><br><span class="line">    _Z=<span class="variable">$_X</span></span><br><span class="line">    _X=$(newest_related_process)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;waiting for process..&quot;</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">  APP_PID=<span class="variable">$_X</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$DEBUGGER_ENABLED</span>&quot;</span> == <span class="string">&quot;1&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$APP_NAME</span> running at pid <span class="variable">$APP_PID</span>, waiting for lldb..&quot;</span></span><br><span class="line">    lldb -p <span class="string">&quot;<span class="variable">$APP_PID</span>&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$APP_NAME</span> running at pid <span class="variable">$APP_PID</span>&quot;</span></span><br><span class="line">    (<span class="built_in">tail</span> -f <span class="variable">$LOG_FILE</span>)</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">booted_sim_ct</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="subst">$(xcrun simctl list | grep Booted -c | sed -e &#x27;s/ //g&#x27;)</span>&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">run_mobile_platform <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;In the context of this article, both Android and iOS project means native iOS and Android project, written in Swift or Kotlin. It may work with Flutter or similar technology with some tuning, but the author had no working experience no technology working with those technology at the time of writing.&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;Quite often in my daily work, I need to run both the iOS simulator and Android emulator at the same time. This would normally mean I would have to have both XCode and Android Studio open and running. Though I&amp;#39;m on a MacBook Pro with M1 Pro chip, the fact I need to open &lt;strong&gt;two very heavy IDEs&lt;/strong&gt; at the same time plus two simulators is something I would rather not do. What&amp;#39;s worse, I need to interact with both IDE to rebuild and redeploy the application to the simulator every time I switch the branch. Eventually, I decided to spend time and investigate how to automate this process.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://jiangsc.me/tags/Android/"/>
    
    <category term="CLI" scheme="https://jiangsc.me/tags/CLI/"/>
    
    <category term="tips" scheme="https://jiangsc.me/tags/tips/"/>
    
    <category term="iOS" scheme="https://jiangsc.me/tags/iOS/"/>
    
    <category term="Command line" scheme="https://jiangsc.me/tags/Command-line/"/>
    
    <category term="Moible App Development" scheme="https://jiangsc.me/tags/Moible-App-Development/"/>
    
  </entry>
  
  <entry>
    <title>DNS for self hosted apps in homelab</title>
    <link href="https://jiangsc.me/2025/02/08/dns-for-selfhosted-homelab/"/>
    <id>https://jiangsc.me/2025/02/08/dns-for-selfhosted-homelab/</id>
    <published>2025-02-08T00:34:14.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I&#39;ve done something with the DNS setup in my local networking. I learnt quite a lot along the way and have decided to write it down for my reference, and for other people who might find this useful.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>I have a quite simple home network setup. My main router is a Linksys WRT1200AC which is running OpenWrt 24.10 branch. I have installed Adblock, Unbound, Stubby, and many other software on this router and even after 10 years, it is still performing well.</p><p>My main homelab server is a Raspberry Pi 5 (8 GB) which I bought recently to replace my Rapsberry Pi 3. As I have mentioned in my previous articles <a href="/2023/07/14/Easy-Self-Hosting-with-Traefik-Proxy">on self hosting</a> and <a href="/2023/12/08/self-hosting-nebula-traefik/">nebula</a>, this Raspberry Pi has been running quite a lot of containers along with the Traefik proxy for quite a while now.</p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>I often need to setup private domains within my homelab, mainly to experiment with new software. What I want to achieve is within my local LAN network, every device can resolve these private domains and whenever a new private domain is added, it will take effect automatically without my manual intervention.</p><p>For example, in my local network, <code>wallabag.raspberrypi.lan</code> would take me to the wallabag container and <code>static.raspberry.lan</code> would take me to the Nginx container, they are both running on my Raspberry Pi. And <code>lab.raspberrypi.lan</code> would also resolve to the IP of my Raspberry Pi without any intervention.</p><p>The rest of this article will focus on how I achieved the solution that solved both of this problem.</p><span id="more"></span><p>(Note: you might need to flush your DNS cache with <code>sudo systemd-resolve --flush-caches</code>)</p><h2 id="Naive-Solution-Modify-hosts-file-on-one-device"><a href="#Naive-Solution-Modify-hosts-file-on-one-device" class="headerlink" title="Naive Solution: Modify hosts file on one device"></a>Naive Solution: Modify hosts file on one device</h2><p>While this may not be what the readers are expecting, it is a solution most people would attempt first. Hosts files are mappings between the host name and IP addresses <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSG9zdHNfKGZpbGUp">^1<i class="fa fa-external-link-alt"></i></span>. To access <code>wallabag.raspberrypi.lan</code> from a particular device, you can simply add the domain and IP to the hosts file of that device.</p><p>As an example, on Linux, if you add <code>wallabag.raspberrypi.lan 192.168.1.134</code> to a device&#39;s hosts file (located at <code>/etc/hosts</code>), the domain <code>wallabag.raspberrypi.lan</code> will resolve to <code>192.168.1.134</code> <strong>on this device</strong>.</p><p>Obviously, this is not a great solution -- it doesn&#39;t achieve what I want. You won&#39;t be able to modify the hosts file on your mobile device running iOS or Android easily. And each time you want to experiment with a new domain, you will have to manually add them to your hosts file which will be less than ideal.</p><h2 id="Improved-Solution-Modify-Local-DNS"><a href="#Improved-Solution-Modify-Local-DNS" class="headerlink" title="Improved Solution: Modify Local DNS"></a>Improved Solution: Modify Local DNS</h2><p>This second solution is quite similar to the previous one, but it will work for all the devices in the same network once setup properly.</p><p>The idea for this solution is to modify the local DNS server so it knows how to resolve those private domains.</p><p>For example, if your homelab DNS is using Unbound, you could add the following as part of your Unbound config:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local-data: &quot;static.raspberrypi.lan. 3600 IN A 192.168.1.134&quot;</span><br><span class="line">local-data: &quot;wallabag.raspberrypi.lan. 3600 IN A 192.168.1.134&quot;</span><br></pre></td></tr></table></figure><p>This solution works for every device in the LAN, however, you would still need to keep manually adding all the domains, which is something I would like to avoid.</p><h2 id="Final-solution-Unbound-with-Knot"><a href="#Final-solution-Unbound-with-Knot" class="headerlink" title="Final solution: Unbound with Knot"></a>Final solution: Unbound with Knot</h2><p>This final solution is a bit more complicated, but I think it is worth the time I spent on getting to it.</p><p>Before we get to the details of the solution, we need to understand the concept of DNS zone and authoritative server in DNS. According to Akamai <span class="exturl" data-url="aHR0cHM6Ly93d3cuYWthbWFpLmNvbS9nbG9zc2FyeS93aGF0LWlzLWF1dGhvcml0YXRpdmUtZG5z">^2<i class="fa fa-external-link-alt"></i></span>:</p><blockquote><p>Authoritative DNS is the system that keeps official records corresponding to domain names such as IP addresses.</p></blockquote><p>For DNS Zone, Cloudflare had a great explanation <span class="exturl" data-url="aHR0cHM6Ly93d3cuY2xvdWRmbGFyZS5jb20vbGVhcm5pbmcvZG5zL2dsb3NzYXJ5L2Rucy16b25lLw==">^3<i class="fa fa-external-link-alt"></i></span>:</p><blockquote><p>A DNS zone is a portion of the DNS namespace that is managed by a specific organization or administrator. A DNS zone is an administrative space which allows for more granular control of DNS components, such as authoritative nameservers.</p></blockquote><p>The authoritative DNS for a DNS zone is also part of its DNS SOA record, so you can find the authoritative DNS server for <code>google.com</code> easily by issuing the following command:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dig</span> google.<span class="keyword">com</span> SOA</span><br></pre></td></tr></table></figure><p>And you will get the following response back:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">dig</span> <span class="string">google.com</span> <span class="string">SOA</span></span><br><span class="line"></span><br><span class="line"><span class="string">;</span> <span class="string">&lt;&lt;&gt;&gt;</span> <span class="string">DiG</span> <span class="number">9.20</span><span class="number">.5</span> <span class="string">&lt;&lt;&gt;&gt;</span> <span class="string">google.com</span> <span class="string">SOA</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">global options:</span> <span class="string">+cmd</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">Got answer:</span></span><br><span class="line"><span class="string">;;</span> <span class="string">-&gt;&gt;HEADER&lt;&lt;-</span> <span class="attr">opcode:</span> <span class="string">QUERY,</span> <span class="attr">status:</span> <span class="string">NOERROR,</span> <span class="attr">id:</span> <span class="number">6457</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">flags:</span> <span class="string">qr</span> <span class="string">rd</span> <span class="string">ra;</span> <span class="attr">QUERY:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">ANSWER:</span> <span class="number">1</span><span class="string">,</span> <span class="attr">AUTHORITY:</span> <span class="number">0</span><span class="string">,</span> <span class="attr">ADDITIONAL:</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="string">;;</span> <span class="attr">OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">;</span> <span class="attr">EDNS: version:</span> <span class="number">0</span><span class="string">,</span> <span class="string">flags:;</span> <span class="attr">udp:</span> <span class="number">4095</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">QUESTION SECTION:</span></span><br><span class="line"><span class="string">;google.com.</span><span class="string">IN</span><span class="string">SOA</span></span><br><span class="line"></span><br><span class="line"><span class="string">;;</span> <span class="attr">ANSWER SECTION:</span></span><br><span class="line"><span class="string">google.com.</span><span class="number">3596</span><span class="string">IN</span><span class="string">SOA</span><span class="string">ns1.google.com.</span> <span class="string">dns-admin.google.com.</span> <span class="number">724327803</span> <span class="number">900</span> <span class="number">900</span> <span class="number">1800 </span><span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="string">;;</span> <span class="attr">Query time:</span> <span class="number">2</span> <span class="string">msec</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">SERVER:</span> <span class="number">100.100</span><span class="number">.100</span><span class="number">.100</span><span class="comment">#53(100.100.100.100) (UDP)</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">WHEN:</span> <span class="string">Sat</span> <span class="string">Feb</span> <span class="number">08</span> <span class="number">16</span><span class="string">:01:42</span> <span class="string">NZDT</span> <span class="number">2025</span></span><br><span class="line"><span class="string">;;</span> <span class="attr">MSG SIZE  rcvd:</span> <span class="number">89</span></span><br></pre></td></tr></table></figure><p>We can see the authoritative DNS server for <code>google.com</code> zone is <code>ns1.google.com</code></p><p>In the case of resolving <code>.lan</code> zone, the authoritative server is the router or the LAN DNS server itself. This can be verified through the following command:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">kdig lan SOA</span><br><span class="line">;; -&gt;&gt;<span class="selector-tag">HEADER</span>&lt;&lt;- opcode: QUERY; status: NOERROR; id: <span class="number">17390</span></span><br><span class="line">;; Flags: qr aa rd ra; QUERY: <span class="number">1</span>; ANSWER: <span class="number">1</span>; AUTHORITY: <span class="number">0</span>; ADDITIONAL: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">;; EDNS PSEUDOSECTION:</span><br><span class="line">;; Version: <span class="number">0</span>; flags: ; UDP size: <span class="number">4096</span> B; ext-rcode: NOERROR</span><br><span class="line"></span><br><span class="line">;; QUESTION <span class="selector-tag">SECTION</span>:</span><br><span class="line">;; lan.                INSOA</span><br><span class="line"></span><br><span class="line">;; ANSWER <span class="selector-tag">SECTION</span>:</span><br><span class="line">lan.                <span class="number">7200</span>INSOAlocalhost. nobody.invalid. <span class="number">28982999</span> <span class="number">3600</span> <span class="number">1200</span> <span class="number">9600</span> <span class="number">300</span></span><br><span class="line"></span><br><span class="line">;; Received <span class="number">91</span> <span class="selector-tag">B</span></span><br><span class="line">;; <span class="selector-tag">Time</span> <span class="number">2025</span>-<span class="number">02</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">10</span>:<span class="number">07</span> NZDT</span><br><span class="line">;; <span class="selector-tag">From</span> <span class="number">127.0</span>.<span class="number">0.1</span><span class="keyword">@53</span>(UDP) in <span class="number">0.5</span> ms</span><br></pre></td></tr></table></figure><p>Similarly, you will find the current authoritative server for <code>raspberrypi.lan</code> zone is also the router itself, because <code>raspberrypi.lan</code> currently belongs to the <code>lan</code> zone.</p><p>The solution I am going to present involves creating a zone file for <code>raspberrypi.lan</code> zone and have a DNS server act as authoritative server for that specific zone, and finally change my local Unbound instance so it knows to query for that server for the <code>raspberrypi.lan</code> zone.</p><h3 id="Setting-up-the-zone-file-and-Knot-as-authoritative-server"><a href="#Setting-up-the-zone-file-and-Knot-as-authoritative-server" class="headerlink" title="Setting up the zone file and Knot as authoritative server"></a>Setting up the zone file and Knot as authoritative server</h3><h4 id="Raspberry-Pi-setup-Knot-with-DNS-Zone"><a href="#Raspberry-Pi-setup-Knot-with-DNS-Zone" class="headerlink" title="Raspberry Pi setup (Knot with DNS Zone)"></a>Raspberry Pi setup (Knot with DNS Zone)</h4><p>Before we create the zone file, we need to install the Knot DNS server first. I have chosen to install this on the Raspberry Pi. Once the Knot server is installed successfully, you will need to disable the systemd-resolved and enable the Knot service:<br><code>systemctl disable systemd-resolvd.service &amp;&amp; systemctl enable --now knot</code><br>You will next need to create a <code>resolve.conf</code> file with the following content:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nameserver</span> <span class="number">192.168.1.1</span></span><br><span class="line"><span class="attribute">nameserver</span> fdd0:<span class="number">7</span>ed0:<span class="number">428</span>e::<span class="number">1</span></span><br><span class="line"><span class="attribute">search</span> .</span><br></pre></td></tr></table></figure><p>And link this file to <code>/etc/resolv.conf</code></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -sf <span class="constructor">$(<span class="params">realpath</span> <span class="params">resolv</span>.<span class="params">conf</span>)</span> /etc/resolv.conf</span><br></pre></td></tr></table></figure><p>This makes sure the Pi can have proper DNS setup after reboot.<br>The zone file for the <code>raspberrypi.lan</code> zone will look like this:</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$ORIGIN</span> raspberrypi.lan.</span><br><span class="line"><span class="meta">$TTL</span> <span class="number">86400</span></span><br><span class="line">raspberrypi.lan. <span class="number">7200</span> <span class="keyword">IN</span> <span class="keyword">SOA</span> ns.raspberrypi.lan. admin.raspberrypi.lan. <span class="number">2025011001</span> <span class="number">3600 1200</span> <span class="number">9600 300</span></span><br><span class="line"></span><br><span class="line">raspberrypi.lan. <span class="number">7200</span> <span class="keyword">IN</span> <span class="keyword">NS</span> ns.raspberrypi.lan.</span><br><span class="line"><span class="comment">; A Records</span></span><br><span class="line">@   <span class="number">600</span>  <span class="keyword">IN</span>     <span class="keyword">A</span>   <span class="number">192.168.1.101</span></span><br><span class="line">ns <span class="number">10800</span> <span class="keyword">IN</span> <span class="keyword">A</span> <span class="number">192.168.1.101</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; Optional Wildcard</span></span><br><span class="line">*.raspberrypi.lan. <span class="number">1800</span> <span class="keyword">IN</span> <span class="keyword">A</span> <span class="number">192.168.1.101</span></span><br></pre></td></tr></table></figure><p>You will need to put this file at <code>/var/lib/knot/raspberrypi.lan.zone</code>.</p><h4 id="Unbound-setup"><a href="#Unbound-setup" class="headerlink" title="Unbound setup"></a>Unbound setup</h4><p>For the Unbound server, we will need to make use of stub-zone and local-zone. According to Unbound <span class="exturl" data-url="aHR0cHM6Ly9ubG5ldGxhYnMubmwvZG9jdW1lbnRhdGlvbi91bmJvdW5kL3VuYm91bmQuY29uZi8=">^4<i class="fa fa-external-link-alt"></i></span>:</p><blockquote><p>The stub zone can be used to configure authoritative data to be used by the resolver that cannot be accessed using the public internet servers. This is useful for company-local data or private zones. Setup an authoritative server on a different host (or different port). Enter a config entry for Unbound with stub-addr: &lt;ip address of host[@port]&gt;. The Unbound resolver can then access the data, without referring to the public internet for it.</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stub-zone:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">raspberrypi.lan.</span></span><br><span class="line">  <span class="attr">stub-addr:</span> <span class="number">192.168</span><span class="number">.1</span><span class="number">.101</span></span><br><span class="line">  <span class="attr">stub-first:</span> <span class="literal">no</span></span><br></pre></td></tr></table></figure><p>And also add the following local-zone and local-data:</p><figure class="highlight wasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span>-zone: <span class="string">&quot;raspberrypi.lan.&quot;</span> transparent</span><br><span class="line"><span class="keyword">local</span>-<span class="keyword">data</span>: <span class="string">&quot;raspberrypi.lan. 7200 IN SOA ns.raspberrypi.lan. admin.raspberrypi.lan. 2025011001 3600 1200 9600 300&quot;</span></span><br><span class="line"><span class="keyword">local</span>-<span class="keyword">data</span>: <span class="string">&quot;raspberrypi.lan. 7200 IN NS ns.raspberrypi.lan.&quot;</span></span><br></pre></td></tr></table></figure><p>The above will be needed to allow override the <code>lan.</code> zone that was setup in OpenWrt, it may not be needed if you use Unbound server as standalone.</p><p>You can find more about the unbound config <span class="exturl" data-url="aHR0cHM6Ly9ubG5ldGxhYnMubmwvZG9jdW1lbnRhdGlvbi91bmJvdW5kL3VuYm91bmQuY29uZi8=">here<i class="fa fa-external-link-alt"></i></span></p><h2 id="Conclusion-and-Learnings"><a href="#Conclusion-and-Learnings" class="headerlink" title="Conclusion and Learnings"></a>Conclusion and Learnings</h2><p>Private zones are essential for homelab, by using Unbound and Knot along with the appropriate zone file, you will be able to get the private domains up and running in you LAN easily.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I&amp;#39;ve done something with the DNS setup in my local networking. I learnt quite a lot along the way and have decided to write it down for my reference, and for other people who might find this useful.&lt;/p&gt;
&lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;I have a quite simple home network setup. My main router is a Linksys WRT1200AC which is running OpenWrt 24.10 branch. I have installed Adblock, Unbound, Stubby, and many other software on this router and even after 10 years, it is still performing well.&lt;/p&gt;
&lt;p&gt;My main homelab server is a Raspberry Pi 5 (8 GB) which I bought recently to replace my Rapsberry Pi 3. As I have mentioned in my previous articles &lt;a href=&quot;/2023/07/14/Easy-Self-Hosting-with-Traefik-Proxy&quot;&gt;on self hosting&lt;/a&gt; and &lt;a href=&quot;/2023/12/08/self-hosting-nebula-traefik/&quot;&gt;nebula&lt;/a&gt;, this Raspberry Pi has been running quite a lot of containers along with the Traefik proxy for quite a while now.&lt;/p&gt;
&lt;h2 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;&lt;p&gt;I often need to setup private domains within my homelab, mainly to experiment with new software. What I want to achieve is within my local LAN network, every device can resolve these private domains and whenever a new private domain is added, it will take effect automatically without my manual intervention.&lt;/p&gt;
&lt;p&gt;For example, in my local network, &lt;code&gt;wallabag.raspberrypi.lan&lt;/code&gt; would take me to the wallabag container and &lt;code&gt;static.raspberry.lan&lt;/code&gt; would take me to the Nginx container, they are both running on my Raspberry Pi. And &lt;code&gt;lab.raspberrypi.lan&lt;/code&gt; would also resolve to the IP of my Raspberry Pi without any intervention.&lt;/p&gt;
&lt;p&gt;The rest of this article will focus on how I achieved the solution that solved both of this problem.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Traefik" scheme="https://jiangsc.me/tags/Traefik/"/>
    
    <category term="Self-hosting" scheme="https://jiangsc.me/tags/Self-hosting/"/>
    
    <category term="DNS" scheme="https://jiangsc.me/tags/DNS/"/>
    
    <category term="Unbound" scheme="https://jiangsc.me/tags/Unbound/"/>
    
    <category term="Knot" scheme="https://jiangsc.me/tags/Knot/"/>
    
  </entry>
  
  <entry>
    <title>2024 Year in Review</title>
    <link href="https://jiangsc.me/2024/12/18/2024-year-review/"/>
    <id>https://jiangsc.me/2024/12/18/2024-year-review/</id>
    <published>2024-12-18T07:51:07.000Z</published>
    <updated>2025-03-13T04:44:41.761Z</updated>
    
    <content type="html"><![CDATA[<p>This is my first attempt in writing a review for the year. By writing this, I can hopefully provide myself with a clearer picture on what I had learnt in the past year and what I should be prepared for in the coming new year.</p><h3 id="This-blog"><a href="#This-blog" class="headerlink" title="This blog"></a>This blog</h3><p>I haven&#39;t written as many posts as last year, though I still finished six posts in total. These articles are mostly about the issues I or someone within my team solved during our day-to-day work.</p><h3 id="Meet-ups"><a href="#Meet-ups" class="headerlink" title="Meet ups"></a>Meet ups</h3><p>I started to attend meet ups regularly starting July 2024. I found it to be an excellent way to connect with the tech community and learn new stuff. Here are a list of highlights from each of the events I attended and things I learnt from it:</p><ul><li>In July, I attended the GitHub NZ meetup. I learnt about Self-Hosted Action Runners, the speaker mentioned Azure container apps can be used as scalable self-hosted action runners. This is extremely useful for businesses with budget constraint. The talk was recorded and can be found <span class="exturl" data-url="aHR0cHM6Ly9zb2xpZGVvZ2xvcmlhLnRlY2gvZ2l0aHViL3NlbGYtaG9zdGVkLWdpdGh1Yi1ydW5uZXJzLWZvci1mcmVlLw==">here<i class="fa fa-external-link-alt"></i></span>. Personally, I&#39;m not a fan of Azure or anything Microsoft, so when I was at the talk, I immediately thought of doing something similar to thing on GCP with Google App Engine or on AWS using AWS Fargate. To me they are very similar to the Azure Container Apps in that they can scale up and down based on the load.</li><li>In August, I attended an AWS meetup, where the speaker talked about Pulumi and how to use it to reverse engineer an existing infrastructure to Pulumi code. While I&#39;m not really a infrastructure guy, it&#39;s always interesting to learn something new. I do still prefer to use Terraform if I were to start a new project. I&#39;m well aware learning Terraform language is not really as straightforward, it is still the de factor tool&#x2F;language for IaC (infrastructure as code).</li><li>In September, I attended several meet ups. My personal favorite was the Golang meetup. The speakers talked about the newly added Go 1.23 iterators, <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhaWxzYXBwL3dhaWxz">Wails<i class="fa fa-external-link-alt"></i></span>. I haven&#39;t really done any Golang professionally, however, I did several projects using Golang in my spare time, and I&#39;m really amazed by how easy it is to use Go. Regarding the iterators, the speaker had a demo repo <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3kxaGFvL2l0">here<i class="fa fa-external-link-alt"></i></span>. The runner up for my personal favorite was the Java meetup, the speaker talked about the virtual threads in Java and how it differed from other languages. Personally, I haven&#39;t touched Java for a while, and learning about the new Java language feature is always a good thing.</li><li>In October, I also attended several meet ups. I personally really liked the talk given by one of the Google Developer Expert in Web Technologies. The talk focused on the <span class="exturl" data-url="aHR0cHM6Ly93ZWIuZGV2L2V4cGxvcmUvbGVhcm4tY29yZS13ZWItdml0YWxz">core web vitals<i class="fa fa-external-link-alt"></i></span> and how to optimize them. As a backend dev, it is always good to learn something new about the frontend. The speaker had put the repo <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RwaXJvcy9nZGctd2VicGVyZg==">here<i class="fa fa-external-link-alt"></i></span></li><li>In November, I attended the Hack the Box Meetup in Auckland. This is the first ever hack the box event I attended, and I found it really interesting. Hack the Box as a platform is really useful for people to learn about hacking and pen test.</li><li>In December, I attended the <span class="exturl" data-url="aHR0cHM6Ly9nZGcuY29tbXVuaXR5LmRldi9ldmVudHMvZGV0YWlscy9nb29nbGUtZ2RnLW5hbm5pbmctcHJlc2VudHMtZ29vZ2xlLWRldmZlc3QtbmFubmluZy0yMDI0Lw==">Devfest in Nanning<i class="fa fa-external-link-alt"></i></span>, China. This is the first tech event I attended in China. The topics are mostly about AI. Some interesting talks include using LLM for data analytics, and building Multidimensional Intangible Cultural Heritage Experience Platform with BERT and TensorFlow.</li></ul><p>From next year, I will start to write weekly or monthly recap blog to summarize what I learnt from the each of the meetups or events I attended.</p><h3 id="Tooling-I-Open-Source"><a href="#Tooling-I-Open-Source" class="headerlink" title="Tooling (I  Open Source)"></a>Tooling (I <i class="fa fa-heart"></i> Open Source)</h3><p><strong>Full disclosure:</strong> I&#39;m not affiliated with any of the projects mentioned here.</p><p>This year marks the marks the third year I worked in the current company. It is also the forth year that I use NeoVim as a development tool. In addition to NeoVim, I found a lot of useful tools this year for my terminal centric workflow. I might write some blog post about them next year, but as a preview, here&#39;s the list of tools I discovered and continued to use in my day-to-day workflow:</p><ul><li><strong><span class="exturl" data-url="aHR0cHM6Ly9odXJsLmRldi8=">Hurl<i class="fa fa-external-link-alt"></i></span></strong>: Hurl is a wrapper around the og curl. It is much much easier to use than curl. For example, you can create a Hurl file (in plain text), and use it as an alternative to curl. You can also use it as a sanity or smoke testing tool. Being plain text means you can commit it a git repository and keep track of things easily.</li><li><strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NjYWxhci9zY2FsYXI=">Scalar<i class="fa fa-external-link-alt"></i></span></strong>: This could be a good open source alternative to Postman.</li><li><strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JlZG9jbHkvcmVkb2NseS1jbGk=">Redocly<i class="fa fa-external-link-alt"></i></span></strong>: Redocly is a open source tool focus around OpenAPI and swagger docs. I had used it in our project at work to combine multiple swagger docs into one big giant combined one.</li><li><strong><span class="exturl" data-url="aHR0cHM6Ly9kdWNrZGIub3JnLw==">DuckDB<i class="fa fa-external-link-alt"></i></span></strong>: To me personally, DuckDB is like SQLite but much much more powerful than that. I had used it to query JSON and CSV files directly without converting them to anything SQL. You basically get the best of both SQL and NoSQL when you integrate DuckDB.</li><li><strong><span class="exturl" data-url="aHR0cHM6Ly93d3cudmlzaWRhdGEub3JnLw==">Visidata<i class="fa fa-external-link-alt"></i></span></strong>: A tool to explore data. Well, it&#39;s probably similar but different from DuckDB, you can use it to explore data in <span class="exturl" data-url="aHR0cHM6Ly93d3cudmlzaWRhdGEub3JnL2RvY3MvZm9ybWF0cy8=">various format<i class="fa fa-external-link-alt"></i></span>. It&#39;s super useful if you have a terminal centric workflow like me.</li><li><strong><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01laXR1YW4tRGlhbnBpbmcvbHlyZWJpcmQ=">Lyrebird<i class="fa fa-external-link-alt"></i></span></strong>: This one may be hard to sale because they do not have English documentation. However, it is a really powerful tool to capture and mock HTTP requests. It is meant to be used as a platform for automation testing, but it is much useful than that. I will create a dedicated post about this next year.</li></ul><h3 id="Readings"><a href="#Readings" class="headerlink" title="Readings"></a>Readings</h3><p>This year I consumed quite a lot of articles, my main source of technical articles comes from Hacker News and Lobster. I also have a list of RSS feeds I subscribe to. Whenever I found a good article, I usually bookmark them through my self-hosted <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3dhbGxhYmFnL3dhbGxhYmFn">Wallabag<i class="fa fa-external-link-alt"></i></span> instance running on the free Google Cloud VPS, most of these articles will eventually become individual episodes in a podcast I can listen and consume on the go. Some of my favorite articles this year are:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly9qdm5zLmNhL2Jsb2cvMjAyNC8wOS8yNy9zb21lLWdvLXdlYi1kZXYtbm90ZXMv">Some Go web dev notes<i class="fa fa-external-link-alt"></i></span> -- this article had inspired me to rewrite the SQL part of my personal project written in Go.</li><li><span class="exturl" data-url="aHR0cHM6Ly9iZWxsbWFyLm1lZGl1bS5jb20vdGhyZWUtY3JpdGljYWwtcXVlc3Rpb25zLXRvLXR1cm4tdGhlLXRhYmxlLWR1cmluZy10ZWNobmljYWwtaW50ZXJ2aWV3cy1kZDE1OTRjMjc4Yjg=">Three Critical Questions to Turn the Tables During Technical Interviews<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly93d3cubm9pZGVhLmRvZy9nbHVl">Being Glue<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly95b3NlZmsuY29tL2Jsb2cvbWFuYWdlcnMtaGF2ZS1uby1odW1hbi1yaWdodHMuaHRtbA==">Managers have no human rights<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9uZXdzbGV0dGVyLndlc2thby5jb20vcC9ob3ctdG8tZ2l2ZS1hLXNlbmlvci1sZWFkZXItZmVlZGJhY2std2l0aG91dC1nZXR0aW5nLWZpcmVk">How to give a senior leader feedback (without getting fired)<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmF2YXMuc3BhY2UvdGVjaC11dG9waWEtZmFudGFzeS8=">the tech utopia fantasy is over<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly96YWtpcnVsbGluLm1kL2NvZ25pdGl2ZQ==">Cognitive load is what matters<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly95b3JpYy5naXRodWIuaW8vcG9zdC9jb2RpbmctZm9yLWEtZmluaXRlLXdvcmxkLw==">Coding for a Finite World<i class="fa fa-external-link-alt"></i></span></li><li><span class="exturl" data-url="aHR0cHM6Ly9uaXNodGFoaXIuY29tL3doYXQtaXMtYS1zdGFmZi1lbmdpbmVlci8=">What is a Staff Engineer?<i class="fa fa-external-link-alt"></i></span></li></ul><p>In the new year, I plan to summarize articles I have read once a month as well, just so I have a way to reflect on what I read in the past month.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is my first attempt in writing a review for the year. By writing this, I can hopefully provide myself with a clearer picture on what</summary>
      
    
    
    
    
    <category term="Review" scheme="https://jiangsc.me/tags/Review/"/>
    
    <category term="Yearly" scheme="https://jiangsc.me/tags/Yearly/"/>
    
  </entry>
  
  <entry>
    <title>Notes on iOS Date Formatter: Issues and Fixes</title>
    <link href="https://jiangsc.me/2024/07/20/iOS-date-formatter-and-locale/"/>
    <id>https://jiangsc.me/2024/07/20/iOS-date-formatter-and-locale/</id>
    <published>2024-07-20T00:58:50.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<details class="note primary"><summary><p>TL;DR</p></summary><p><strong>As a general rule (and as <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9xYS9xYTE0ODAvX2luZGV4Lmh0bWw=">documented by Apple<i class="fa fa-external-link-alt"></i></span>), developers should avoid setting a fixed date format, if the date is user-visible. When working with fixed format date, developer should be setting the locale and timezone to avoid any potential issues that might be caused by using client side locale or timezone.</strong></p></details><p>Nowadays, it&#39;s quite common for an iOS or Android app to include a webview, and at the company I worked in, we have a similar setup -- the app would hand over to a webview and the user would continue their journey in the web. Recently, an incident related to this particular functionality was reported to us.</p><h2 id="What-happened"><a href="#What-happened" class="headerlink" title="What happened"></a>What happened</h2><p>To explain things better, I&#39;ve created this sequence diagram below that represents a working scenario:</p><pre><code class="mermaid">sequenceDiagramAPP-&gt;&gt;webview: set a token as cookie in the webview.destroy APPwebview-&gt;&gt;APP: cookie is set.webview-&gt;&gt;Web App: Attempted to redirect to xxxx using the cookie.Web App-&gt;&gt;Web App: Grab the token from cookie.Web App-&gt;&gt;Backend: Check if this token is valid.Backend-&gt;&gt;Web App: This is a valid token, authentication successful.Web App-&gt;&gt;webview: Go to xxxx.</code></pre><span id="more"></span><p>In the incident, however, the user is unable to proceed to xxxx, because the web app was sending an empty token to the Backend, causing the Backend to reject it.</p><h2 id="Investigation-and-Root-Cause-Analysis"><a href="#Investigation-and-Root-Cause-Analysis" class="headerlink" title="Investigation and Root Cause Analysis"></a>Investigation and Root Cause Analysis</h2><p>We need to be able to reproduce the issue first before we can further our investigation into this. However, this turned out to be a tricky one as none of the devs were able to reproduce the issue on their device or simulator.</p><p>The iOS devs tend to think this is related to the web app or the Backend itself, or a rare bug in iOS webview. With the help from a web developer, we added a log so we can see how often this issue happens in production.</p><p>A week after that, we realized the issue is not just impacting 2 or 3 users but a lot more. So we decided to have another look at the App source code.</p><p>Here&#39;s the relevant part of the code:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">dateFormatter.dateFormat <span class="operator">=</span> <span class="string">&quot;E, dd MMM yyyy HH:mm:ss Z&quot;</span></span><br><span class="line"><span class="keyword">let</span> cookieExpireDate <span class="operator">=</span> dateFormatter.date(from: setup.cookieExpires) <span class="operator">??</span> <span class="type">Date</span>(timeIntervalSinceNow: <span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> httpCookieProperties: [<span class="type">HTTPCookiePropertyKey</span> : <span class="keyword">Any</span>] <span class="operator">=</span> [</span><br><span class="line">    .domain: urlComponents.host <span class="operator">??</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">    .path: urlComponents.path,</span><br><span class="line">    .name: setup.cookieName,</span><br><span class="line">    .value: accessToken,</span><br><span class="line">    .secure: urlComponents.scheme <span class="operator">??</span> <span class="string">&quot;&quot;</span>,</span><br><span class="line">    .expires: cookieExpireDate</span><br><span class="line">]</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">let</span> cookie <span class="operator">=</span> <span class="type">HTTPCookie</span>(properties: httpCookieProperties) &#123;</span><br><span class="line">    webView.configuration.websiteDataStore.httpCookieStore.setCookie(cookie) &#123;</span><br></pre></td></tr></table></figure><p>To people who are not familiar with Swift, this may not mean anything. However, it&#39;s not difficult to guess what this part of the code is doing. It first setup a formatter, and then use that formatter to create an expiry date (from the date it gets from the Backend) as the cookie. And then the cookie was given to the webview to set to the cookieStore.</p><p>What could go wrong here? My first instinct is where the cookieExpireDate is set. The fallback is set to 1 second, that is definitely too short, but that may not be the issue.</p><p>I subsequently looked up the dateFormatter online, among the documentation provide by Apple[^1], there&#39;s a link to a technical FAQ[^2]. This was the key to finding the root cause. I will quote part of the FAQ document here:</p><blockquote><p>[...]<br>Q:  I&#39;m using NSDateFormatter to parse an Internet-style date, but this fails for some users in some regions. I&#39;ve set a specific date format string; shouldn&#39;t that force NSDateFormatter to work independently of the user&#39;s region settings?<br>A: No. While setting a date format string will appear to work for most users, it&#39;s not the right solution to this problem. There are many places where format strings behave in unexpected ways. For example:<br>A user can change their calendar (using System Preferences &gt; Language &amp; Region &gt; Calendar on OS X, or Settings &gt; General &gt; International &gt; Calendar on iOS). In that case NSDateFormatter will treat the numbers in the string you parse as if they were in the user&#39;s chosen calendar. For example, if the user selects the Buddhist calendar, parsing the year &quot;2010&quot; will yield an NSDate in 1467, because the year 2010 on the Buddhist calendar was the year 1467 on the (Gregorian) calendar that we use day-to-day.<br>[...]<br>On the other hand, if you&#39;re working with fixed-format dates, you should first set the locale of the date formatter to something appropriate for your fixed format. In most cases the best locale to choose is &quot;en_US_POSIX&quot;, a locale that&#39;s specifically designed to yield US English results regardless of both user and system preferences. &quot;en_US_POSIX&quot; is also invariant in time (if the US, at some point in the future, changes the way it formats dates, &quot;en_US&quot; will change to reflect the new behaviour, but &quot;en_US_POSIX&quot; will not), and between machines (&quot;en_US_POSIX&quot; works the same on iOS as it does on OS X, and as it it does on other platforms).</p></blockquote><p>Upon reading this, I immediately set my simulator to use Buddhist calendar, and<br>not surprisingly, I was able to reproduce the issue. Setting a breakpoint in<br>the code, I saw the cookieExpireDate had a year 1481 in it. This caused the<br>webview to ignore this cookie, and led to all the subsequent issues.</p><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>There are several ways of fixing this issue, however, I do want to note first, Apple <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vZm91bmRhdGlvbi9kYXRlZm9ybWF0dGVyIzI1MjgyNjE=">no longer recommends using DateFormatter in Swift<i class="fa fa-external-link-alt"></i></span>. With this in mind, the solutions can be one of the following:</p><h3 id="Completely-remove-the-need-to-format-the-date-in-APP"><a href="#Completely-remove-the-need-to-format-the-date-in-APP" class="headerlink" title="Completely remove the need to format the date in APP"></a>Completely remove the need to format the date in APP</h3><p>To me, this is the optimal solution, the app should not handle the formatting of the date -- it should take whatever it got from the App Backend (assuming App Backend is sending the correct format).</p><h3 id="Refactor-to-use-the-Date-style"><a href="#Refactor-to-use-the-Date-style" class="headerlink" title="Refactor to use the Date.style"></a>Refactor to use the Date.style</h3><p>I will skip this part as I&#39;m not proficient enough in Swift to give the correct code.</p><h3 id="Fix-the-existing-code-by-adding-a-fix-locale-and-timezone"><a href="#Fix-the-existing-code-by-adding-a-fix-locale-and-timezone" class="headerlink" title="Fix the existing code by adding a fix locale (and timezone)"></a>Fix the existing code by adding a fix locale (and timezone)</h3><p>The updated code would be</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dateFormatter <span class="operator">=</span> <span class="type">DateFormatter</span>()</span><br><span class="line">dateFormatter.locale <span class="operator">=</span> <span class="type">Locale</span>(identifier: <span class="string">&quot;en_US_POSIX&quot;</span>)</span><br><span class="line">dateFormatter.timezone <span class="operator">=</span> <span class="type">Timezone</span>(identifier: <span class="string">&quot;UTC&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> cookieExpireDate <span class="operator">=</span> dateFormatter.date(from: setup.cookieExpires) <span class="operator">??</span> <span class="type">Date</span>(timeIntervalSinceNow: <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>Unfortunately fixing only this part does not mean we are done. To be on the safe side of things, we had to search through our codebase and see whether we are using similar patterns to set the format elsewhere.</p><h2 id="Lessons-Learnt"><a href="#Lessons-Learnt" class="headerlink" title="Lessons Learnt"></a>Lessons Learnt</h2><p>This is the first incident related to Date in my career. As a developer, whenever we are doing anything related to date or timezone, we need to be extra careful, this is especially true for the frontend.</p><ul><li><p>Frontend (web, mobile, etc.) clients could be using different locale and timezone.<strong>As a general rule (and as <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9xYS9xYTE0ODAvX2luZGV4Lmh0bWw=">documented by Apple<i class="fa fa-external-link-alt"></i></span>), developers should avoid setting a fixed date format, if the date is user-visible. When working with fixed format date, developer should be setting the locale and timezone to avoid any potential issues that might be caused by using client side locale or timezone.</strong></p></li><li><p>Checking the documentation of the API will always provide some good leads for debugging.</p></li></ul><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vZm91bmRhdGlvbi9kYXRlZm9ybWF0dGVyIzI1MjgyNjE=">https://developer.apple.com/documentation/foundation/dateformatter#2528261<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9xYS9xYTE0ODAvX2luZGV4Lmh0bWw=">https://developer.apple.com/library/archive/qa/qa1480/_index.html<i class="fa fa-external-link-alt"></i></span><br>[^1]:<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2RvY3VtZW50YXRpb24vZm91bmRhdGlvbi9kYXRlZm9ybWF0dGVyIzI1MjgyNjE=">https://developer.apple.com/documentation/foundation/dateformatter#2528261<i class="fa fa-external-link-alt"></i></span><br>[^2]:<span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9xYS9xYTE0ODAvX2luZGV4Lmh0bWw=">https://developer.apple.com/library/archive/qa/qa1480/_index.html<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;details class=&quot;note primary&quot;&gt;&lt;summary&gt;&lt;p&gt;TL;DR&lt;/p&gt;
&lt;/summary&gt;
&lt;p&gt;&lt;strong&gt;As a general rule (and as &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9xYS9xYTE0ODAvX2luZGV4Lmh0bWw=&quot;&gt;documented by Apple&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;), developers should avoid setting a fixed date format, if the date is user-visible. When working with fixed format date, developer should be setting the locale and timezone to avoid any potential issues that might be caused by using client side locale or timezone.&lt;/strong&gt;&lt;/p&gt;

&lt;/details&gt;


&lt;p&gt;Nowadays, it&amp;#39;s quite common for an iOS or Android app to include a webview, and at the company I worked in, we have a similar setup -- the app would hand over to a webview and the user would continue their journey in the web. Recently, an incident related to this particular functionality was reported to us.&lt;/p&gt;
&lt;h2 id=&quot;What-happened&quot;&gt;&lt;a href=&quot;#What-happened&quot; class=&quot;headerlink&quot; title=&quot;What happened&quot;&gt;&lt;/a&gt;What happened&lt;/h2&gt;&lt;p&gt;To explain things better, I&amp;#39;ve created this sequence diagram below that represents a working scenario:&lt;/p&gt;
&lt;pre&gt;
&lt;code class=&quot;mermaid&quot;&gt;
sequenceDiagram
APP-&amp;gt;&amp;gt;webview: set a token as cookie in the webview.
destroy APP
webview-&amp;gt;&amp;gt;APP: cookie is set.
webview-&amp;gt;&amp;gt;Web App: Attempted to redirect to xxxx using the cookie.
Web App-&amp;gt;&amp;gt;Web App: Grab the token from cookie.
Web App-&amp;gt;&amp;gt;Backend: Check if this token is valid.
Backend-&amp;gt;&amp;gt;Web App: This is a valid token, authentication successful.
Web App-&amp;gt;&amp;gt;webview: Go to xxxx.
&lt;/code&gt;
&lt;/pre&gt;</summary>
    
    
    
    
    <category term="Notes" scheme="https://jiangsc.me/tags/Notes/"/>
    
    <category term="iOS" scheme="https://jiangsc.me/tags/iOS/"/>
    
    <category term="Swift" scheme="https://jiangsc.me/tags/Swift/"/>
    
    <category term="Date Formatter" scheme="https://jiangsc.me/tags/Date-Formatter/"/>
    
    <category term="Cookie" scheme="https://jiangsc.me/tags/Cookie/"/>
    
  </entry>
  
  <entry>
    <title>Fixing iOS HTTP Video Playback Issues</title>
    <link href="https://jiangsc.me/2024/07/07/ios-http-streaming-issue/"/>
    <id>https://jiangsc.me/2024/07/07/ios-http-streaming-issue/</id>
    <published>2024-07-07T02:54:09.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<p>Last Thursday afternoon, we received an email from a colleague in our company, she mentioned the video in our app was not playing correctly. And what&#39;s strange about this is, the issue only impacted iOS users and not Android users, this usually indicates the problem is not with our app (or the back-end). The subsequent investigation on this turned out to be very interesting.</p><h2 id="Locating-the-issue"><a href="#Locating-the-issue" class="headerlink" title="Locating the issue"></a>Locating the issue</h2><p>We suspected this was a issue with media codec at first: iOS does not offer the variety of codecs that are supported on Android, therefore, would be much easier to get into an issue like this. However, the person reported this issue also mentioned the video was working fine a few days ago, so it&#39;s highly unlikely this is the source of the issue.</p><p>The next step was to look through the logs. We discovered there were quite a lot of errors thrown on connection reset from our identity gateway. This turned out to be a red herring -- we played the video in Android and the same error appeared.</p><span id="more"></span><h2 id="On-the-right-track"><a href="#On-the-right-track" class="headerlink" title="On the right track"></a>On the right track</h2><p>Desperate for more clues, we turned to one of the more experienced engineers from the other team for help. He asked me to share the headers that&#39;s sent with the video requests. This turned out to be helpful and eventually got us to the root cause.</p><p>Here are some of the request headers sent from the iOS app:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Cookie</span><span class="punctuation">: </span>REDACTED</span><br><span class="line"><span class="attribute">X-Playback-Session-Id</span><span class="punctuation">: </span>REDACTED</span><br><span class="line"><span class="attribute">Range</span><span class="punctuation">: </span>bytes=0-1</span><br><span class="line"><span class="attribute">Accept</span><span class="punctuation">: </span>*/*</span><br><span class="line"><span class="attribute">User-Agent</span><span class="punctuation">: </span>AppleCoreMedia/1.0.0.21F90 (iPhone; U; CPU OS 17_5_1 like Mac OS X; en_us)</span><br><span class="line"><span class="attribute">Accept-Language</span><span class="punctuation">: </span>en-US,en;q=0.9</span><br><span class="line"><span class="attribute">Accept-Encoding</span><span class="punctuation">: </span>identity</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>keep-alive</span><br></pre></td></tr></table></figure><p>And the corresponding response headers:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Accept-Ranges</span><span class="punctuation">: </span>bytes</span><br><span class="line"><span class="attribute">Cache-Control</span><span class="punctuation">: </span>max-age=7200</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>52139111</span><br><span class="line"><span class="attribute">Content-Security-Policy</span><span class="punctuation">: </span>frame-ancestors &#x27;self&#x27;</span><br><span class="line"><span class="attribute">Content-Type</span><span class="punctuation">: </span>video/mp4</span><br><span class="line"><span class="attribute">Last-Modified</span><span class="punctuation">: </span>Thu, 06 Jun 2024 11:06:57 GMT</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span><span class="punctuation">: </span>nosniff</span><br><span class="line"><span class="attribute">X-Frame-Options</span><span class="punctuation">: </span>SAMEORIGIN</span><br><span class="line"><span class="attribute">Keep-Alive</span><span class="punctuation">: </span>timeout=5, max=71</span><br><span class="line"><span class="attribute">Connection</span><span class="punctuation">: </span>Keep-Alive</span><br></pre></td></tr></table></figure><p>Several interesting observations can be made based on the headers:</p><ul><li><mark>Range</mark> header from request headers has a value of <mark>0-1</mark>.</li><li><mark>Content-Length</mark> header from response headers, has a value of <mark>52139111</mark>.</li><li>The response from the server has a status code of <mark>200</mark>.</li></ul><p>The obvious issue here seems to be the Content-Length header is much much larger than what&#39;s in the Range header.</p><p>With this in mind, I started to search for more information on the range header, the first step is to read the docs</p><h2 id="Locating-the-cause"><a href="#Locating-the-cause" class="headerlink" title="Locating the cause"></a>Locating the cause</h2><h3 id="Reading-the-Docs"><a href="#Reading-the-Docs" class="headerlink" title="Reading the Docs"></a>Reading the Docs</h3><p>According to <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL1Jhbmdl">MDN<i class="fa fa-external-link-alt"></i></span>:</p><blockquote><p>The Range HTTP request header indicates the parts of a resource that the server should return.[...]If the server sends back ranges, it uses the 206 Partial Content status code for the response.[...]A server that doesn&#39;t support range requests may ignore the Range header and return the whole resource with a 200 status code. </p></blockquote><p>Just by reading this paragraph, we know the server didn&#39;t support the Range header, therefore, it is returning 200 status code, which is what&#39;s causing the iOS video player to misbehave.</p><h3 id="Complication-and-solution"><a href="#Complication-and-solution" class="headerlink" title="Complication and solution"></a>Complication and solution</h3><p>Normally, at this point, one would be able to change their web server settings and add the support for Range header, and the problem would potentially be solved.</p><p>However, we have a complex infrastructure within the company, and request&#x2F;response will go through several layers of (reverse) proxy before it finially reaches origin&#x2F;client. This means, request&#x2F;response from the server could be different from the origin. So we had to locate where exactly the issue happened in the request chain.</p><p>We first made a request without going through the reverse proxy (on the reverse proxy host itself):</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Sv http://someserveraddress/somefilename.mp4 --header <span class="string">&#x27;Range: bytes=0-1&#x27;</span> --header <span class="string">&#x27;Host: someservername&#x27;</span> -o /dev/null</span><br></pre></td></tr></table></figure><p>And we got this back:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">206</span> Partial Content</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span><span class="punctuation">: </span>nosniff</span><br><span class="line"><span class="attribute">Accept-Ranges</span><span class="punctuation">: </span>bytes</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>2</span><br></pre></td></tr></table></figure><p>Then we made another request, and this time, we go through the proxy by using localhost:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -Sv http://localhost:10090/somefilename.mp4 --header <span class="string">&#x27;Range: bytes=0-1&#x27;</span> --header <span class="string">&#x27;Host: somehostname&#x27;</span> -o /dev/null</span><br></pre></td></tr></table></figure><p>And we got this back (❗❗): </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">HTTP/1.1</span> <span class="number">200</span> OK</span><br><span class="line"><span class="attribute">Server</span><span class="punctuation">: </span>Apache</span><br><span class="line"><span class="attribute">X-Content-Type-Options</span><span class="punctuation">: </span>nosniff</span><br><span class="line"><span class="attribute">Accept-Ranges</span><span class="punctuation">: </span>bytes</span><br><span class="line"><span class="attribute">Content-Length</span><span class="punctuation">: </span>52139111</span><br></pre></td></tr></table></figure><p>Clearly the issue is with the reverse proxy itself. It turned out there was some workaround applied in the origin server and not on the reverse proxy.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;LocationMatch <span class="string">&quot;^/(specific-url)/.*\.mp4$&quot;</span>&gt;</span></span><br><span class="line">    <span class="attribute">FilterChain</span> !</span><br><span class="line"><span class="section">&lt;/LocationMatch&gt;</span></span><br></pre></td></tr></table></figure><p>According to the engineer who helped us with this:</p><blockquote><p>This is necessary because the gzip FilterChain only works with byte ranges when the content-type is handled by one of the providers in the chain.</p></blockquote><p>We apply the exact config to the reverse proxy, and the issue was fixed.</p><h2 id="The-Why"><a href="#The-Why" class="headerlink" title="The Why"></a>The Why</h2><p>The problem was solved, however, I still don&#39;t get why this was the case, why Apple decides to send the range header.</p><p>According to <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL0FwcGxlQXBwbGljYXRpb25zL1JlZmVyZW5jZS9TYWZhcmlXZWJDb250ZW50L0NyZWF0aW5nVmlkZW9mb3JTYWZhcmlvbmlQaG9uZS9DcmVhdGluZ1ZpZGVvZm9yU2FmYXJpb25pUGhvbmUuaHRtbCMvL2FwcGxlX3JlZi9kb2MvdWlkL1RQNDAwMDY1MTQtU1c2">their document<i class="fa fa-external-link-alt"></i></span>:</p><blockquote><p>HTTP servers hosting media files for iOS must support byte-range requests, which iOS uses to perform random access in media playback.</p></blockquote><p>So it looks like the reason for requiring the support of this header is to be able to perform random access in media playback in iOS.</p><p>It also proposed ways to verify the support using Curl (which is similar to what I wrote above):</p><blockquote><p>If you are not sure whether your media server supports byte-range requests, you can open the Terminal application in OS X and use the curl command-line tool to download a short segment from a file on the server:<br><code>curl --range 0-99 http://example.com/test.mov -o /dev/null</code><br>If the tool reports that it downloaded 100 bytes, the media server correctly handled the byte-range request. If it downloads the entire file, you may need to update the media server. </p></blockquote><h2 id="Lessons-learnt"><a href="#Lessons-learnt" class="headerlink" title="Lessons learnt"></a>Lessons learnt</h2><ul><li>Initial assumptions can be misleading. Despite suspecting media codec issues, the problem was actually with HTTP headers and byte-range requests.</li><li>Consult the correct documentation will almost always speed things up. In this case, MDN is really really helpful.</li><li>Different platforms (iOS vs. Android) have unique requirements and behaviors. Understanding these nuances, such as iOS&#39;s requirement for byte-range support, is necessary for smooth operation.</li></ul><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYXBwbGUuY29tL2xpYnJhcnkvYXJjaGl2ZS9kb2N1bWVudGF0aW9uL0FwcGxlQXBwbGljYXRpb25zL1JlZmVyZW5jZS9TYWZhcmlXZWJDb250ZW50L0NyZWF0aW5nVmlkZW9mb3JTYWZhcmlvbmlQaG9uZS9DcmVhdGluZ1ZpZGVvZm9yU2FmYXJpb25pUGhvbmUuaHRtbCMvL2FwcGxlX3JlZi9kb2MvdWlkL1RQNDAwMDY1MTQtU1c2">https://developer.apple.com/library/archive/documentation/AppleApplications/Reference/SafariWebContent/CreatingVideoforSafarioniPhone/CreatingVideoforSafarioniPhone.html#//apple_ref/doc/uid/TP40006514-SW6<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSFRUUC9IZWFkZXJzL1Jhbmdl">https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Last Thursday afternoon, we received an email from a colleague in our company, she mentioned the video in our app was not playing correctly. And what&amp;#39;s strange about this is, the issue only impacted iOS users and not Android users, this usually indicates the problem is not with our app (or the back-end). The subsequent investigation on this turned out to be very interesting.&lt;/p&gt;
&lt;h2 id=&quot;Locating-the-issue&quot;&gt;&lt;a href=&quot;#Locating-the-issue&quot; class=&quot;headerlink&quot; title=&quot;Locating the issue&quot;&gt;&lt;/a&gt;Locating the issue&lt;/h2&gt;&lt;p&gt;We suspected this was a issue with media codec at first: iOS does not offer the variety of codecs that are supported on Android, therefore, would be much easier to get into an issue like this. However, the person reported this issue also mentioned the video was working fine a few days ago, so it&amp;#39;s highly unlikely this is the source of the issue.&lt;/p&gt;
&lt;p&gt;The next step was to look through the logs. We discovered there were quite a lot of errors thrown on connection reset from our identity gateway. This turned out to be a red herring -- we played the video in Android and the same error appeared.&lt;/p&gt;</summary>
    
    
    
    
    <category term="iOS" scheme="https://jiangsc.me/tags/iOS/"/>
    
    <category term="HTTP streaming" scheme="https://jiangsc.me/tags/HTTP-streaming/"/>
    
    <category term="Video playback" scheme="https://jiangsc.me/tags/Video-playback/"/>
    
    <category term="Apache server" scheme="https://jiangsc.me/tags/Apache-server/"/>
    
  </entry>
  
  <entry>
    <title>CommonJS and ECMAScript Modules import in nodejs</title>
    <link href="https://jiangsc.me/2024/06/08/cjs-esm-imports-in-typescript-node/"/>
    <id>https://jiangsc.me/2024/06/08/cjs-esm-imports-in-typescript-node/</id>
    <published>2024-06-08T00:07:30.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<p>In this article, I&#39;m going to write about what I learnt from solving an issue I encountered during a refactoring of existing code.</p><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>In a TypeScript project, we used the following tsconfig file:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;es2023&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node16&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;es2022&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esModuleInterop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node16&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>In our existing code, we have a js&#x2F;ts file that&#39;s only exporting an array of numbers as default export like below:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// numbers.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure><p>In another file, we are utilizing dynamic import feature, to import the module above:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// usage.ts</span></span><br><span class="line"><span class="title function_">imoprt</span>(<span class="string">&#x27;./number.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">imp</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(imp.<span class="property">default</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="The-issue"><a href="#The-issue" class="headerlink" title="The issue"></a>The issue</h2><p>When running the above code using TypeScript, many people (including me) would expect the code above to print <code>[1,2,3,4,5,6]</code>. However, it would actually be printing <code>&#123;default: [1,2,3,4,5,6]&#125;</code>. This has puzzled me so much that I dig into why this is happening.</p><h2 id="What-happened"><a href="#What-happened" class="headerlink" title="What happened"></a>What happened</h2><p>To put in short, TypeScript or my misunderstanding of TypeScript is why this was happening. With this in mind, we can examine what TypeScript emit based on the above tsconfig and code.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//dist/nums.js</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">default</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//dist/usage.js</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="built_in">exports</span>, <span class="string">&quot;__esModule&quot;</span>, &#123; <span class="attr">value</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./nums.js&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">imp</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(imp.<span class="property">default</span>));</span><br></pre></td></tr></table></figure><p>In the code above emitted from TypeScript compiler, we can make several observations:</p><ul><li><code>nums.js</code>, which was written in ECMAScript module syntax, was compiled to CommonJS module.</li><li><code>usage.ts</code>, which utilized dynamic import (a ECMAScript feature) was basically not touched.</li><li><code>usage.js</code> (which uses ECMAScript dynamic import) is importing <code>nums.js</code> (which is CommonJS)</li></ul><p>To me, the last observation was the most suspicious, and that&#39;s where I begin my investigation.</p><h2 id="Investigation"><a href="#Investigation" class="headerlink" title="Investigation"></a>Investigation</h2><h3 id="Why-is-CommonJS-emitted-from-TypeScript-when-the-TypeScript-code-I-wrote-was-clearly-ECMAScript-module"><a href="#Why-is-CommonJS-emitted-from-TypeScript-when-the-TypeScript-code-I-wrote-was-clearly-ECMAScript-module" class="headerlink" title="Why is CommonJS emitted from TypeScript, when the TypeScript code I wrote was clearly ECMAScript module?"></a>Why is CommonJS emitted from TypeScript, when the TypeScript code I wrote was clearly ECMAScript module?</h3><p>This is actually because of the tsconfig file. According to TypeScript <span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL3RzY29uZmlnLyNub2RlMTZub2RlbmV4dA==">documentation<i class="fa fa-external-link-alt"></i></span>:</p><blockquote><p>The emitted JavaScript uses either CommonJS or ES2020 output depending on the file extension and the value of the type setting in the nearest package.json.</p></blockquote><p>This implies, if you want TypeScript to emit ECMAScript modules, you will have to either specify by using file extension or add <code>type: module</code> inside the nearest package.json. In all other cases, it will emit CommonJS by default, so in the example given, since I didn&#39;t had <code>type: module</code> inside a package.json, CommonJS will be emitted. <strong>BUT</strong>, dynamic import is still a ECMAScript feature, this leads to the next question.</p><h3 id="Why-was-the-emitted-JavaScript-code-behaving-like-that"><a href="#Why-was-the-emitted-JavaScript-code-behaving-like-that" class="headerlink" title="Why was the emitted JavaScript code behaving like that?"></a>Why was the emitted JavaScript code behaving like that?</h3><p>This is an interesting question. In short, it is behaving as it&#39;s supposed to and this has to do with how CommonJS namespace works.</p><p>It is explained in detail in this NodeJS <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2FwaS9lc20uaHRtbCNjb21tb25qcy1uYW1lc3BhY2Vz">documentation<i class="fa fa-external-link-alt"></i></span>:</p><blockquote><p>The ECMAScript Module Namespace representation of a CommonJS module is always a namespace with a default export key pointing to the CommonJS module.exports value.</p></blockquote><p>And because dynamic import is a ECMAScript module feature, the end result of the dynamic import will always be a ECMAScript Module Namespace representation, and therefore, it will always wrap whatever you exported in a key called <code>default</code>.</p><h2 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h2><p>Based on the investigation, we obviously need to come up with some solutions, to make the code work as what we want it to be. There are several ways:</p><h3 id="Change-the-extension"><a href="#Change-the-extension" class="headerlink" title="Change the extension"></a>Change the extension</h3><p>We can simply change the extension of <code>nums.js</code> file from <code>.js</code> to <code>.mjs</code>, by doing this, TypeScript will no longer convert things to ES2020 format, and you will no longer have this issue.</p><h3 id="Change-the-dynamic-import-to-require"><a href="#Change-the-dynamic-import-to-require" class="headerlink" title="Change the dynamic import to require"></a>Change the dynamic import to require</h3><p>This is probably less ideal, but it&#39;s also a solution. You can simply avoid using the dynamic import and use CommonJS import.</p><hr><p>Further readings:<br><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL3RzY29uZmlnLyNtb2R1bGU=">https://www.typescriptlang.org/tsconfig/#module<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svbW9kdWxlcy90aGVvcnkuaHRtbCN0aGUtbW9kdWxlLW91dHB1dC1mb3JtYXQ=">https://www.typescriptlang.org/docs/handbook/modules/theory.html#the-module-output-format<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L3dpa2kvRkFR">https://github.com/microsoft/TypeScript/wiki/FAQ<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2RvY3MvbGF0ZXN0LXYxOC54L2FwaS9lc20uaHRtbA==">https://nodejs.org/docs/latest-v18.x/api/esm.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2FwaS9lc20uaHRtbCNjb21tb25qcy1uYW1lc3BhY2Vz">https://nodejs.org/api/esm.html#commonjs-namespaces<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L3dpa2kvRkFRI2NvbW1vbi1idWdzLXRoYXQtYXJlbnQtYnVncw==">https://github.com/microsoft/TypeScript/wiki/FAQ#common-bugs-that-arent-bugs<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;In this article, I&amp;#39;m going to write about what I learnt from solving an issue I encountered during a refactoring of existing code.&lt;/p&gt;
&lt;h2 id=&quot;Background&quot;&gt;&lt;a href=&quot;#Background&quot; class=&quot;headerlink&quot; title=&quot;Background&quot;&gt;&lt;/a&gt;Background&lt;/h2&gt;&lt;p&gt;In a TypeScript project, we used the following tsconfig file:&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;lib&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;quot;es2023&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;module&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;node16&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;target&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;es2022&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;strict&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;allowJs&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;esModuleInterop&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;skipLibCheck&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&amp;quot;moduleResolution&amp;quot;&lt;/span&gt;&lt;span class=&quot;punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;node16&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In our existing code, we have a js&amp;#x2F;ts file that&amp;#39;s only exporting an array of numbers as default export like below:&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// numbers.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;In another file, we are utilizing dynamic import feature, to import the module above:&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// usage.ts&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;imoprt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;./number.js&amp;#x27;&lt;/span&gt;).&lt;span class=&quot;title function_&quot;&gt;then&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;imp&lt;/span&gt; =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(imp.&lt;span class=&quot;property&quot;&gt;default&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Notes" scheme="https://jiangsc.me/tags/Notes/"/>
    
    <category term="JavaScript" scheme="https://jiangsc.me/tags/JavaScript/"/>
    
    <category term="NodeJS" scheme="https://jiangsc.me/tags/NodeJS/"/>
    
    <category term="TypeScript" scheme="https://jiangsc.me/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Lesssons Learnt from Fixing broken Xetex on Arch Linux</title>
    <link href="https://jiangsc.me/2024/05/05/linux-user-notes-3/"/>
    <id>https://jiangsc.me/2024/05/05/linux-user-notes-3/</id>
    <published>2024-05-05T02:20:40.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<p>I build and maintain a bunch of documents in Latex, though I&#39;m not an expert in Latex, I still found it easier to maintain than keeping a Word document around -- whenever I want to modify things, I would open Tex Studio, modify and then rebuild. The generated PDF is symlink to my desktop for easy access when I need to attach it. This works well till last Friday. I modify things, and the generated PDF did not reflect any of the changes I made. What could be the problem?</p><h3 id="Locate-the-problem"><a href="#Locate-the-problem" class="headerlink" title="Locate the problem"></a>Locate the problem</h3><p>Well, it wasn&#39;t really easy to diagnose the issue from the Tex Studio interface -- every time I rebuilt, it looks as if it was generating new docs but it wasn&#39;t actually doing that (cause the speed was simply too fast). So, the solution was to use CLI -- I got the actual command from settings in Tex Studio.</p><p>I first ran: <code>xelatex -synctex=1 -interaction=nonstopmode -output-directory=build &quot;document&quot;.tex</code></p><p>What I got was:</p><blockquote><p>&#x2F;var&#x2F;lib&#x2F;texmf&#x2F;web2c&#x2F;xetex&#x2F;xelatex.fmt made by different executable version, strings are different</p></blockquote><p>Well, to be honest, this error message wasn&#39;t helpful <strong>at all</strong>. It still wasn&#39;t clear what the issue was. But it&#39;s still worth looking it up.</p><span id="more"></span><h3 id="Attempted-Solutions"><a href="#Attempted-Solutions" class="headerlink" title="Attempted Solutions"></a>Attempted Solutions</h3><h4 id="❌-fmtutil"><a href="#❌-fmtutil" class="headerlink" title="❌ fmtutil"></a>❌ fmtutil</h4><p>This was among many of the top links I found by Googling <span class="exturl" data-url="aHR0cHM6Ly9iYnMuYXJjaGxpbnV4Lm9yZy92aWV3dG9waWMucGhwP2lkPTI1NzIxNg==">^1<i class="fa fa-external-link-alt"></i></span>. So it was the first solution I tried -- running</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fmtutil-sys <span class="comment">--all</span></span><br></pre></td></tr></table></figure><p>It didn&#39;t fix the issue, still failing.</p><h4 id="❌-reinstall-packages"><a href="#❌-reinstall-packages" class="headerlink" title="❌ reinstall packages"></a>❌ reinstall packages</h4><p>Normally this would have solved the issue, so I next attempted to reinstall the packages related to Latex. I ran:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">sudo pacman -S texlive-formatsextra texlive-latexextra</span></span><br></pre></td></tr></table></figure><p>Didn&#39;t solve the issue either.</p><h4 id="✅-Read-the-Wiki-carefully"><a href="#✅-Read-the-Wiki-carefully" class="headerlink" title="✅ Read the Wiki carefully"></a>✅ <strong>Read the Wiki carefully</strong></h4><p>Well, this should have been the first thing I tried, but I didn&#39;t. The ArchLinux Wiki <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvVGVYX0xpdmUjQXJjaC1wYWNrYWdlZF9UZVhfTGl2ZQ==">here<i class="fa fa-external-link-alt"></i></span> outlined the packages that&#39;s packaged by Arch and available to use.</p><p>So I installed the xetex package <code>sudo pacman -S texlive-xetex</code>, and then everything got back to normal.</p><h3 id="Lessons-learnt"><a href="#Lessons-learnt" class="headerlink" title="Lessons learnt"></a>Lessons learnt</h3><p>While I still don&#39;t understand what was the exact cause of this issue, it is most likely caused by this <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXgub3JnL25ld3MvdGV4LWxpdmUtcGFja2FnZS1yZW9yZ2FuaXphdGlvbi8=">changes made<i class="fa fa-external-link-alt"></i></span> a year ago. But I don&#39;t really believe that cause I remember using the Tex Studio fine in March. But anyway, here&#39;s what I learnt:</p><ul><li><strong>Read the Wiki</strong>: ArchLinux Wiki is really really useful. Even if you are not an Arch user, chances are, you can get something out of it. So this should be the first place to look at when you are facing issue.</li><li><strong>pacman could locate package</strong>: While it is not useful in this case, it&#39;s good to know pacman can locate the package that a file belongs to. Either of the command would work:</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If you are searching <span class="keyword">for</span> a package that has this file</span></span><br><span class="line">pacman -F soul.sty</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If you are searching <span class="keyword">for</span> the package that owns this file</span></span><br><span class="line">sudo pacman -Qo PATH/TO/FILE</span><br></pre></td></tr></table></figure><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;I build and maintain a bunch of documents in Latex, though I&amp;#39;m not an expert in Latex, I still found it easier to maintain than keeping a Word document around -- whenever I want to modify things, I would open Tex Studio, modify and then rebuild. The generated PDF is symlink to my desktop for easy access when I need to attach it. This works well till last Friday. I modify things, and the generated PDF did not reflect any of the changes I made. What could be the problem?&lt;/p&gt;
&lt;h3 id=&quot;Locate-the-problem&quot;&gt;&lt;a href=&quot;#Locate-the-problem&quot; class=&quot;headerlink&quot; title=&quot;Locate the problem&quot;&gt;&lt;/a&gt;Locate the problem&lt;/h3&gt;&lt;p&gt;Well, it wasn&amp;#39;t really easy to diagnose the issue from the Tex Studio interface -- every time I rebuilt, it looks as if it was generating new docs but it wasn&amp;#39;t actually doing that (cause the speed was simply too fast). So, the solution was to use CLI -- I got the actual command from settings in Tex Studio.&lt;/p&gt;
&lt;p&gt;I first ran: &lt;code&gt;xelatex -synctex=1 -interaction=nonstopmode -output-directory=build &amp;quot;document&amp;quot;.tex&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What I got was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#x2F;var&amp;#x2F;lib&amp;#x2F;texmf&amp;#x2F;web2c&amp;#x2F;xetex&amp;#x2F;xelatex.fmt made by different executable version, strings are different&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, to be honest, this error message wasn&amp;#39;t helpful &lt;strong&gt;at all&lt;/strong&gt;. It still wasn&amp;#39;t clear what the issue was. But it&amp;#39;s still worth looking it up.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Notes" scheme="https://jiangsc.me/tags/Notes/"/>
    
    <category term="Linux" scheme="https://jiangsc.me/tags/Linux/"/>
    
    <category term="Arch Linux" scheme="https://jiangsc.me/tags/Arch-Linux/"/>
    
    <category term="Latex" scheme="https://jiangsc.me/tags/Latex/"/>
    
  </entry>
  
  <entry>
    <title>Solving Repeatative Problem with Vim</title>
    <link href="https://jiangsc.me/2023/12/27/neovim-tricks-3/"/>
    <id>https://jiangsc.me/2023/12/27/neovim-tricks-3/</id>
    <published>2023-12-27T05:31:10.000Z</published>
    <updated>2025-03-13T04:44:41.765Z</updated>
    
    <content type="html"><![CDATA[<div class="note info"><p>This is the third article about NeoVim tips, if you are interested in other part of this, please check <a href="/2022/05/21/neovim-tricks-1/">here</a> and <a href="/2022/10/29/neovim-tricks-2">here</a></p></div><h3 id="Motivation-The-need-for-a-clean-and-organized-environment-file"><a href="#Motivation-The-need-for-a-clean-and-organized-environment-file" class="headerlink" title="Motivation: The need for a clean and organized environment file."></a>Motivation: The need for a clean and organized environment file.</h3><p>Quite often in a project, a developer will have to deal with a lot of environment variables and&#x2F;or environment files. However, they could also be the part that&#39;s least maintained in the entire codebase. As an example, sometimes, a feature flag could be added to the environment file, but when the feature goes live, people would fail to remove them. As time gets by, there will be <strong>A LOT</strong> of this kind of variables in the environment file.</p><p>As it is the end of the year, and I really couldn&#39;t finish much dev work with the amount of time left for the new year, I opt to deal with this issue with the intention to create a clean and organized environment file.</p><h3 id="Overview-What-s-in-an-environment-file"><a href="#Overview-What-s-in-an-environment-file" class="headerlink" title="Overview: What&#39;s in an environment file"></a>Overview: What&#39;s in an environment file</h3><p>Before I get into the problem I&#39;m trying to solve, it is important to understand the problem we are trying to solve. For the project I&#39;m working on, we have two kinds of environment files, one of which is only used locally, the other one is used by the Kubernetes platform and is used at runtime. Here&#39;s an example of what they look like:</p><span id="more"></span><figure class="highlight sh"><figcaption><span>local_env_file.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A_SERVICE               = http://abcdefg.tld</span><br><span class="line">PORT                    = 53100</span><br><span class="line">B_SERVICE               = http://bcdefg.tld</span><br><span class="line">FEATURE_FLAG_AAA        = <span class="literal">true</span></span><br><span class="line">C_SERVICE               = http://cdefg.tld</span><br><span class="line">FEATURE_FLAG_CCC_UNUSED = <span class="literal">true</span></span><br><span class="line">D_SERVICE               = http://defg.tld</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>helm_values.env.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">A_SERVICE</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">http://abcdefg.tld</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PORT</span></span><br><span class="line">  <span class="attr">value:</span> <span class="number">53100</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">B_SERVICE</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">http://bcdefg.tld</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FEATURE_FLAG_AAA</span></span><br><span class="line">  <span class="attr">value:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">C_SERVICE</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">http://cdefg.tld</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FEATURE_FLAG_CCC_UNUSED</span></span><br><span class="line">  <span class="attr">value:</span> <span class="literal">true</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">D_SERVICE</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">http://defg.tld</span></span><br></pre></td></tr></table></figure><p>This is only a short snippet of the file, the whole file would be around 200 lines. Obviously, this kind of long file is not maintainable and it could also become source of unexpected bugs&#x2F;failures if not dealt with carefully. To avoid this kind of issues, I have decided to make things cleaner and more organized, here are the expected end result after I&#39;ve done the clean up:</p><figure class="highlight sh"><figcaption><span>local_env_file_CLEANED.env</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PORT                    = 53100</span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">+                              SERVICES                               +</span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">A_SERVICE               = http://abcdefg.tld</span><br><span class="line">B_SERVICE               = http://bcdefg.tld</span><br><span class="line">C_SERVICE               = http://cdefg.tld</span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">+                            FEATURE_FLAGS                            +</span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">FEATURE_FLAG_AAA        = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight yaml"><figcaption><span>helm_values.env.yaml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">PORT</span></span><br><span class="line">  <span class="attr">value:</span> <span class="number">53100</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">A_SERVICE</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">http://abcdefg.tld</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">B_SERVICE</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">http://bcdefg.tld</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">C_SERVICE</span></span><br><span class="line">  <span class="attr">value:</span> <span class="string">http://cdefg.tld</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">FEATURE_FLAG_AAA</span></span><br><span class="line">  <span class="attr">value:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>You might not agree with the format I did, but it is obviously much more organized than its previous state. And also note the unused feature flags and services are both removed.</p><h3 id="Implementation"><a href="#Implementation" class="headerlink" title="Implementation"></a>Implementation</h3><p>Once I&#39;ve defined the end state, I went and started implementing it. To be honest, it look much difficult than it looked. I will break things by steps, so it&#39;s easier to explain.</p><h4 id="Organizing-services-and-feature-flags"><a href="#Organizing-services-and-feature-flags" class="headerlink" title="Organizing services and feature flags"></a>Organizing services and feature flags</h4><p>This might be the easiest task of all. You would first need to find all the lines that contains FEATURE_FLAGS or SERVICES. Then you would need to copy them all to a <strong>single</strong> register and paste them all out together.</p><p>What I did, for the <code>.env</code> file: clear the <code>b</code> register first with <code>qbq</code>, then do <code>:g/FEATURE_FLAG/:norm &quot;Bdd</code>, then go to the end of the file with <code>G</code> and paste with <code>&quot;Bp</code></p><p>Similarly, for the <code>helm_values</code> file, you can slightly modify the command used above to: <code>:g/FEATURE_FLAG/:norm &quot;B2dd</code>. This is because in the yaml file we have, the name and value are on separate lines.</p><h3 id="Removing-unused-services-and-feature-flags"><a href="#Removing-unused-services-and-feature-flags" class="headerlink" title="Removing unused services and feature flags"></a>Removing unused services and feature flags</h3><p>This is the most tedious part. It would be much ideal if this could be done as part of the regular release or clean up process. However, I still opt to do it with some not-so-intuitive VIM scripting.</p><p>To understand how to solve this, we need to clearly understand an unused variable is a variable that&#39;s not appeared in the code base. To me, this means <strong>you won&#39;t be able to find any usage for the variable by doing a code search</strong>. Based on this criteria, we can come up with some Vim script:</p><ul><li>For a env file:</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g!/^#/<span class="keyword">let</span> <span class="keyword">x</span> = <span class="built_in">system</span>(<span class="string">&#x27;rg -t &quot;js&quot; -t &quot;ts&quot; -l --count-matches &#x27;</span> . <span class="built_in">shellescape</span>(<span class="built_in">expand</span>(<span class="string">&quot;&lt;cword&gt;&quot;</span>)) .. <span class="string">&#x27;|grep &quot;&quot; -c&#x27;</span>)|<span class="keyword">if</span> <span class="keyword">x</span>==<span class="number">0</span> |<span class="keyword">delete</span>|<span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>It looks complex, but it does what it meant to do. Let&#39;s break it down to see what it does step-by-step:</p><ul><li><code>:g</code> this is the typical Vim <code>:global</code> command where it would apply a series of ex commands on lines that matches the following pattern.</li><li><code>!/^#/</code> this is the regex we are looking for. In this case, it means any lines that <strong>do not</strong> start with a <code>#</code> or hash sign.</li><li><code>let x = system(&#39;xxxxx&#39;)</code> this is defining a vim variable called x, and assign the output of the command <code>xxxx</code> to variable x.</li><li><code>rg -t &quot;js&quot; -t &quot;ts&quot; -l --count-matches &#39; . shellescape(expand(&quot;&lt;cword&gt;&quot;)) .. &#39;</code> this is running <code>rg</code> command in a shell, you can actually replace this with <code>grep</code> but I find <code>rg</code> to be much more efficient.<ul><li>For <code>rg</code>, I used the following flags:<ul><li><code>-t</code> argument would tell <code>rg</code> which type of file to look for</li><li><code>-l</code> argument means &#39;Print only the paths with at least one match and suppress match contents&#39;.</li><li><code>--count-matches</code> means suppresses  normal  output and shows the number of individual matches of the given patterns for each file searched.</li></ul></li><li>Notice the <code>.</code> immediately following the single quote, that is used for concatenating commands.</li><li><code>shellescape()</code> function is used for escaping {string} for use as a shell command argument.</li><li><code>expand()</code> function, is used to expand expand wildcards and the following special keywords in {string}. When combined with <cword> <code>expand(&lt;cword&gt;)</code>, it would expand to word under the cursor.</li><li><code>|grep &quot;&quot; -c</code> this <bar> character that follows removes the new line or empty character from the rg output, note this is still part of the shell command sequence.</li><li><code>|if x==0 |delete|endif</code>, this is the final part of the command, it&#39;s straightforward: it&#39;s checking whether <code>x</code> is equal to 0. <code>x</code> is the variable we used to store the count of matches, so if the match is equal to 0, we delete the current line and end the if statement.</li></ul></li></ul><p>I have to admit, this is a relatively counter-intuitive command, but it&#39;s quite convenient to use. Depending on the size of your file and  CPU speed of your computer, your VIM might freeze for a short while, as it is executing some heavy I&#x2F;O command under the hood.</p><ul><li>For a <code>yaml</code> file:</li></ul><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:g/name: \([A-Z].*\)/<span class="keyword">let</span> <span class="keyword">x</span> = <span class="built_in">system</span>(<span class="string">&#x27;rg -t &quot;js&quot; -t &quot;ts&quot; -l --count-matches &#x27;</span> . <span class="built_in">shellescape</span>(<span class="built_in">matchstr</span>(<span class="built_in">getline</span>(<span class="string">&#x27;.&#x27;</span>), <span class="string">&#x27;\&lt;\u.\+\&gt;&#x27;</span>)) .. <span class="string">&#x27;|grep &quot;&quot; -c&#x27;</span>)|<span class="keyword">if</span> <span class="keyword">x</span>==<span class="number">0</span> |<span class="keyword">delete</span> <span class="number">2</span>|<span class="keyword">endif</span></span><br></pre></td></tr></table></figure><p>Again, I will explain this one as well, most of the things are the same.</p><ul><li>For the pattern part, I switched to use <code>name: \([A-Z].*\)</code>, this would match the line that contains <code>name</code> and also capture whatever comes after the <code>name</code> part.</li><li>Inside the <code>shellescape</code> function, I switched to use <code>matchstr()</code> function which returns the matched string. In this case, it matching <code>getline(&#39;.&#39;)</code> against pattern <code>&#39;\&lt;\u.\+\&gt;&#39;</code> which is any upper case character.</li><li>All the other part of the command remain the same, except <code>delete 2</code>, this is because for the yaml file, I would like to delete both the name and value which consists of two lines.</li></ul><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>In this article, I explore the use of shell command in combination with Vim to solve some the repetitive task of finding and deleting unused variables in a file inside a project.</p><hr><p>References:</p><ul><li>man rg(1)</li><li>VIM:<ul><li>:help :g</li><li>:help system()</li><li>:help shellescape()</li><li>:help expand()</li><li>:help matchstr()</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;This is the third article about NeoVim tips, if you are interested in other part of this, please check &lt;a href=&quot;/2022/05/21/neovim-tricks-1/&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;/2022/10/29/neovim-tricks-2&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;

&lt;h3 id=&quot;Motivation-The-need-for-a-clean-and-organized-environment-file&quot;&gt;&lt;a href=&quot;#Motivation-The-need-for-a-clean-and-organized-environment-file&quot; class=&quot;headerlink&quot; title=&quot;Motivation: The need for a clean and organized environment file.&quot;&gt;&lt;/a&gt;Motivation: The need for a clean and organized environment file.&lt;/h3&gt;&lt;p&gt;Quite often in a project, a developer will have to deal with a lot of environment variables and&amp;#x2F;or environment files. However, they could also be the part that&amp;#39;s least maintained in the entire codebase. As an example, sometimes, a feature flag could be added to the environment file, but when the feature goes live, people would fail to remove them. As time gets by, there will be &lt;strong&gt;A LOT&lt;/strong&gt; of this kind of variables in the environment file.&lt;/p&gt;
&lt;p&gt;As it is the end of the year, and I really couldn&amp;#39;t finish much dev work with the amount of time left for the new year, I opt to deal with this issue with the intention to create a clean and organized environment file.&lt;/p&gt;
&lt;h3 id=&quot;Overview-What-s-in-an-environment-file&quot;&gt;&lt;a href=&quot;#Overview-What-s-in-an-environment-file&quot; class=&quot;headerlink&quot; title=&quot;Overview: What&amp;#39;s in an environment file&quot;&gt;&lt;/a&gt;Overview: What&amp;#39;s in an environment file&lt;/h3&gt;&lt;p&gt;Before I get into the problem I&amp;#39;m trying to solve, it is important to understand the problem we are trying to solve. For the project I&amp;#39;m working on, we have two kinds of environment files, one of which is only used locally, the other one is used by the Kubernetes platform and is used at runtime. Here&amp;#39;s an example of what they look like:&lt;/p&gt;</summary>
    
    
    
    
    <category term="Tips" scheme="https://jiangsc.me/tags/Tips/"/>
    
    <category term="Vim" scheme="https://jiangsc.me/tags/Vim/"/>
    
    <category term="NeoVim" scheme="https://jiangsc.me/tags/NeoVim/"/>
    
    <category term="nvim" scheme="https://jiangsc.me/tags/nvim/"/>
    
  </entry>
  
  <entry>
    <title>Advanced Selfhosting with Nebula &amp; Traefik</title>
    <link href="https://jiangsc.me/2023/12/08/self-hosting-nebula-traefik/"/>
    <id>https://jiangsc.me/2023/12/08/self-hosting-nebula-traefik/</id>
    <published>2023-12-08T09:34:49.000Z</published>
    <updated>2025-03-13T04:44:41.765Z</updated>
    
    <content type="html"><![CDATA[<p>This article is a continuation of my previous article on Traefik, which you can find <a href="/2023/07/14/Easy-Self-Hosting-with-Traefik-Proxy">here</a>. Previously, I went through some examples of how I used Traefik so this article would assume you have the basic knowledge of Traefik, if you are not comfortable with it, feel free to go back to my article or read the official documentation <span class="exturl" data-url="aHR0cHM6Ly90cmFlZmlrLmlvL3RyYWVmaWsv">from traefik<i class="fa fa-external-link-alt"></i></span>.</p><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>I&#39;ve been hosting some apps in my local home network using Raspberry Pi for a while now, and I&#39;ve also hosted some apps on Google Cloud.</p><p>Whenever I want to access things on Raspberry Pi while not at home, I would have to use <span class="exturl" data-url="aHR0cHM6Ly9uZWJ1bGEuZGVmaW5lZC5uZXQvZG9jcy8=">Nebula<i class="fa fa-external-link-alt"></i></span> which is a tool for overlay network. I would have to connect to the VPN, and then access the applications.</p><p>This proves to be inconvenient, and not easy to use. One day, I started to play around with the idea of putting things together with Traefik, and it worked so well and drives me to write this article.</p><h2 id="Why-hosting-things-separately"><a href="#Why-hosting-things-separately" class="headerlink" title="Why hosting things separately?"></a>Why hosting things separately?</h2><p>Some may wonder, why I would host things in both Raspberry Pi and GCP. Well, the main reason for this is cost efficiency and data privacy&#x2F;security.</p><p>You can use whatever CPU and storage you want within your local network without incurring monthly costs, and you would have the added benefits of having data on premise.</p><span id="more"></span><h2 id="Nebula-setup"><a href="#Nebula-setup" class="headerlink" title="Nebula setup"></a>Nebula setup</h2><p>As mentioned previously, Nebula is a mesh network tool. Here are some instuctrtion on setting it up.</p><h3 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h3><ul><li>A server with public IP (this is a MUST, doesn&#39;t need a domain), so you can use the free Google Cloud VPS.</li><li>A client that&#39;s connected to internet</li></ul><h3 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h3><ul><li><p>Download and extract the nebula binary</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O - https://github.com/slackhq/nebula/releases/latest/download/nebula-linux-amd64.tar.gz | tar xzvf -</span><br></pre></td></tr></table></figure><p>  This will download the tar.gz file and extract the content to the current working directory.</p></li><li><p>Download and extract the Nebula sample config file</p>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O https://github.com/slackhq/nebula/raw/master/examples/config.yml</span><br></pre></td></tr></table></figure></li><li><p>You will get two binaries and a config file after the commands above:</p>  <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">├── nebula &lt;-- this is needed for both the client and server</span><br><span class="line">├── nebula-cert &lt;-- this is the program used to genreate both root CA and client</span><br><span class="line">├── config.yaml &lt;-- this is a Nebula sample config file</span><br></pre></td></tr></table></figure></li><li><p>Create a Root CA authority using command:</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nebula-cert ca <span class="string">&#x27;Awesome Inc.&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>Create a client using command:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nebula-cert sign -name <span class="string">&#x27;client-name&#x27;</span> \</span><br><span class="line">    -ip <span class="string">&quot;ip address&quot;</span> \</span><br><span class="line">    -<span class="built_in">groups</span> <span class="string">&quot;group-name&quot;</span></span><br></pre></td></tr></table></figure><ul><li>Setup the server (this is the machine with public IP address, it will become so called Light House in Nebula concept)<ul><li>Download or transfer the nebula binary to the server with public IP.</li><li>Copy the config file and rename it to config-lighthouse.yaml</li><li>Follow what&#39;s in the config file and modify the file so that it&#39;s suitable for the lighthouse.</li><li>Create a config folder at <code>/etc/nebula</code>, copy <code>ca.crt</code> to the folder.</li><li>Create a host key and certificate using</li></ul>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nebula-cert sign \</span><br><span class="line">            -name <span class="string">&quot;lighthouse1&quot;</span> \</span><br><span class="line">            -ip <span class="string">&quot;192.168.100.1/24&quot;</span></span><br></pre></td></tr></table></figure><ul><li>The command above will create <code>lighthouse1.crt</code> and <code>lighthouse1.key</code>, copy both of them to <code>/etc/nebula</code>, name them as <code>host.crt</code> and <code>host.key</code></li><li>Start the service using</li></ul>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nebula -conifg /etc/nebula/config.yaml</span><br></pre></td></tr></table></figure></li><li>Setup the client<ul><li>Create a host key and certificate using</li></ul>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./nebula-cert sign \</span><br><span class="line">            -name <span class="string">&quot;device1&quot;</span> \</span><br><span class="line">            -ip <span class="string">&quot;192.168.100.101/24&quot;</span></span><br></pre></td></tr></table></figure><ul><li>The command above will create <code>device1.crt</code> and <code>device1.key</code>,  copy both of them to <code>/etc/nebula</code>, name them as <code>host.crt</code> and <code>host.key</code></li><li>Use the same command used in setup server to connect to the client:</li></ul>  <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nebula -conifg /etc/nebula/config.yaml</span><br></pre></td></tr></table></figure></li><li>Tun setup<br>For both client and server-side, you will need to enable tun.<br>As described by Wikipedia:<blockquote><p>In computer networking, TUN and TAP are kernel virtual network devices. Being network devices supported entirely in software, they differ from ordinary network devices which are backed by physical network adapters.<br>In short, Tun is like a virtual network card for Linux.<br>To enable tun in Nebula, you need to set the <code>tun.disable</code> to <code>false</code> which is the default. You can check the <span class="exturl" data-url="aHR0cHM6Ly9uZWJ1bGEuZGVmaW5lZC5uZXQvZG9jcy9jb25maWcvdHVuLyN0dW5kaXNhYmxlZA==">Nebula documentation<i class="fa fa-external-link-alt"></i></span> for more information on this.</p></blockquote></li></ul><h2 id="Docker-setup"><a href="#Docker-setup" class="headerlink" title="Docker setup"></a>Docker setup</h2><p>The setup on Docker will also be two parts, the client and server.</p><h3 id="Client-I-m-using-Raspberry-Pi-running-ArchLinux"><a href="#Client-I-m-using-Raspberry-Pi-running-ArchLinux" class="headerlink" title="Client (I&#39;m using Raspberry Pi running ArchLinux)"></a>Client (I&#39;m using Raspberry Pi running ArchLinux)</h3><p>Here is a updated Docker Compose file based on the one used in previous article:</p><figure class="highlight yaml"><figcaption><span>Client Traefik Docker Compose file</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">reverse-proxy:</span></span><br><span class="line">    <span class="comment"># The official v2 Traefik docker image</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">traefik:v2.10</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">devices:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/net/tun</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enables the web UI and tells Traefik to listen to docker</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--log.level=DEBUG&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--api.dashboard=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--accesslog&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--entrypoints.web.address=:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--entrypoints.websecure.address=:443&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--entrypoints.websecure.forwardedHeaders.trustedIPs=127.0.0.1/32,10.0.0.0/8,192.168.0.0/16,172.16.0.0/12&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--providers.docker=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--providers.docker.exposedByDefault=false&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--providers.docker.network=traefik-proxy&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik-proxy&quot;</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.enable=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.dashboard.rule=Host(`example.domain.com`)&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.dashboard.tls=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.dashboard.service=api@internal&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.dashboard.middlewares=auth&quot;</span></span><br><span class="line">      <span class="comment"># Check</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.middlewares.auth.basicauth.users=YOUR USERNAME AND PASSWORD&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.port=8080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.ping=true&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># The HTTP port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">      <span class="comment"># The Web UI (enabled by --api.insecure=true)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># So that Traefik can listen to the Docker events</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock:ro</span></span><br><span class="line"><span class="comment">#Docker Networks</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">traefik-proxy:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>The part to note is the following:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cap_add:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line"><span class="attr">devices:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">/dev/net/tun</span></span><br></pre></td></tr></table></figure><ul><li><code>cap_add</code> is used to specify additional container capabilities for Docker container. It is part of <span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuNy9jYXBhYmlsaXRpZXMuNy5odG1s">Linux<i class="fa fa-external-link-alt"></i></span>, here, I specify the <code>CAP_NET_ADMIN</code> capability which is <span class="exturl" data-url="aHR0cHM6Ly9tYW43Lm9yZy9saW51eC9tYW4tcGFnZXMvbWFuNy9jYXBhYmlsaXRpZXMuNy5odG1sIzp+OnRleHQ9bWtub2QoMikuLSxDQVBfTkVUX0FETUlOLC1QZXJmb3JtJTIwdmFyaW91cyUyMG5ldHdvcms=">used to specify rights related to network<i class="fa fa-external-link-alt"></i></span></li><li><code>devices</code> is used to specify the device the Docker container will have access to. Here, we are specifying <code>/dev/net/tun</code>, this is the dev&#x2F;net&#x2F;tun</li></ul><h3 id="Server-GCP-server-that-s-setup-as-Nebula-lighthouse"><a href="#Server-GCP-server-that-s-setup-as-Nebula-lighthouse" class="headerlink" title="Server (GCP server that&#39;s setup as Nebula lighthouse)"></a>Server (GCP server that&#39;s setup as Nebula lighthouse)</h3><p>The Traefik config for the server side will be similar to what the client looks like, we will reuse the Docker file for client with some modification.</p><figure class="highlight yaml"><figcaption><span>Server Traefik Docker Compose file</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">reverse-proxy:</span></span><br><span class="line">    <span class="comment"># The official v2 Traefik docker image</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">traefik:v2.10</span></span><br><span class="line">    <span class="attr">cap_add:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">NET_ADMIN</span></span><br><span class="line">    <span class="attr">devices:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/dev/net/tun</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Enables the web UI and tells Traefik to listen to docker</span></span><br><span class="line">    <span class="attr">command:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--log.level=DEBUG&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--api.dashboard=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--accesslog&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--entrypoints.web.address=:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--entrypoints.websecure.address=:443&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--entrypoints.websecure.forwardedHeaders.trustedIPs=127.0.0.1/32,10.0.0.0/8,192.168.0.0/16,172.16.0.0/12&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--providers.docker=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--providers.docker.exposedByDefault=false&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--providers.docker.network=traefik-proxy&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;--providers.file.directory=./confs.d&quot;</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik-proxy&quot;</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.enable=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.dashboard.rule=Host(`example.domain.com`)&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.dashboard.tls=true&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.dashboard.service=api@internal&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.routers.dashboard.middlewares=auth&quot;</span></span><br><span class="line">      <span class="comment"># Check</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.http.middlewares.auth.basicauth.users=YOUR USERNAME AND PASSWORD&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.port=8080&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;traefik.ping=true&quot;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># The HTTP port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;443:443&quot;</span></span><br><span class="line">      <span class="comment"># The Web UI (enabled by --api.insecure=true)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="comment"># So that Traefik can listen to the Docker events</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run/docker.sock:/var/run/docker.sock:ro</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./confs.d:/confs.d:ro</span></span><br><span class="line"><span class="comment">#Docker Networks</span></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">traefik-proxy:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>I&#39;ve made several modifications.</p><ul><li>Added the <code>--providers.file.directory=./confs.d</code> part to the command, this is so that we can put the configuration related to raspberry pi in a separate file.</li><li>Added one more mountpoint to the Docker container as in <code>./confs.d:/confs.d:ro</code></li></ul><p>Now, we will go through what&#39;s in the <code>confs.d</code> folder. At the moment, there&#39;s only one file in it, I named it <code>reverse-to-pi.toml</code>.</p><figure class="highlight yaml"><figcaption><span>reverse_to_pi_toml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">http</span>]</span><br><span class="line">    [<span class="string">http.routers</span>]</span><br><span class="line">       <span class="comment"># Define a connection between requests and services</span></span><br><span class="line">       [<span class="string">http.routers.to-pi</span>]</span><br><span class="line">        <span class="string">rule</span> <span class="string">=</span> <span class="string">&quot;Host(`somedomain.example.com`)&quot;</span></span><br><span class="line">        <span class="string">tls</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">        <span class="comment"># If the rule matches, applies the middleware</span></span><br><span class="line">        <span class="string">middlewares</span> <span class="string">=</span> [<span class="string">&quot;test-user&quot;</span>]</span><br><span class="line">        <span class="comment"># If the rule matches, forward to the pi service (declared below)</span></span><br><span class="line">        <span class="string">service</span> <span class="string">=</span> <span class="string">&quot;pi&quot;</span></span><br><span class="line"></span><br><span class="line">    [<span class="string">http.middlewares</span>]</span><br><span class="line">      <span class="comment"># Define an authentication mechanism</span></span><br><span class="line">      [<span class="string">http.middlewares.test-user.basicAuth</span>]</span><br><span class="line">        <span class="string">users</span> <span class="string">=</span> [<span class="string">&quot;USERNAME AND PASSWORD HASH&quot;</span>]</span><br><span class="line"></span><br><span class="line">    [<span class="string">http.services</span>]</span><br><span class="line">      <span class="comment"># Define how to reach an existing service on our infrastructure</span></span><br><span class="line">      [<span class="string">http.services.pi.loadBalancer</span>]</span><br><span class="line">           <span class="string">passHostHeader</span> <span class="string">=</span> <span class="literal">true</span></span><br><span class="line">           <span class="string">serversTransport</span> <span class="string">=</span> <span class="string">&quot;transport&quot;</span></span><br><span class="line">      [[<span class="string">http.services.pi.loadBalancer.servers</span>]]</span><br><span class="line">           <span class="string">url</span> <span class="string">=</span> <span class="string">&quot;your_nebula_client_ip&quot;</span></span><br><span class="line">    [<span class="string">http.serversTransports.transport</span>]</span><br><span class="line">      <span class="string">disableHTTP2</span> <span class="string">=</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>The above configuration would essentially treat the Nebula client as a loadbalancer back-end, and the current Traefik instance would essentially act as a reverse proxy to raspberry pi when the specific domain matches. Because the loadbalancer at this level is set to forward host header, the traffic would be forwarded to that instance and that Traefik instance will route the traffic to the container that matches the given domain.</p><h2 id="Bonus-Cloudflare-CDN"><a href="#Bonus-Cloudflare-CDN" class="headerlink" title="Bonus: Cloudflare CDN"></a>Bonus: Cloudflare CDN</h2><h3 id="Cloudflare"><a href="#Cloudflare" class="headerlink" title="Cloudflare"></a>Cloudflare</h3><p>As a bonus, one can also setup the CloudFlare to act as a CDN and DNS server to provide some additional security.<br>Here are some ideas on how to utilize Cloudflare in this case:</p><ul><li>The DNS infrastructure (i.e. domain name) can be managed completely by Terraform, so that you don&#39;t have to manually manage the domains of all self-hosted app.</li><li>Cloudflare can provide SSL certificates, so you don&#39;t need to worry about managing those stuff yourself.</li><li>Cloudflare can provide some basic WAF, so unwanted traffic can be blocked.</li></ul><h2 id="Future-Improvements-GitHub-Actions-Forward-Auth-and-more"><a href="#Future-Improvements-GitHub-Actions-Forward-Auth-and-more" class="headerlink" title="Future Improvements: GitHub Actions, Forward Auth and more?"></a>Future Improvements: GitHub Actions, Forward Auth and more?</h2><p>While this is a complete solution, and something I&#39;ve been running for months without any issue, it has room for improvements.</p><h3 id="GitHub-Actions"><a href="#GitHub-Actions" class="headerlink" title="GitHub Actions"></a>GitHub Actions</h3><p>As an experimenting exercise, GitHub Action could be used to manage the infrastructure -- whenever there&#39;s a new self-hosted app added, the infrastructure would be automatically populated and deployed through Terraform.</p><h3 id="Forward-Auth"><a href="#Forward-Auth" class="headerlink" title="Forward Auth"></a>Forward Auth</h3><p>Currently, the authentication is only HTTP basic auth, which is not secure at all. The idea to improve this would be implementing <span class="exturl" data-url="aHR0cHM6Ly9kb2MudHJhZWZpay5pby90cmFlZmlrL21pZGRsZXdhcmVzL2h0dHAvZm9yd2FyZGF1dGgv">forward auth<i class="fa fa-external-link-alt"></i></span> so the infrastructure is more secure. Some candidates to choose from, include:</p><ul><li><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXV0aGVsaWEuY29tL2ludGVncmF0aW9uL3Byb3hpZXMvdHJhZWZpay8=">Authelia<i class="fa fa-external-link-alt"></i></span>, Apache-2.0, Go, 18.1k stars as of writing</li><li><span class="exturl" data-url="aHR0cHM6Ly9nb2F1dGhlbnRpay5pby9kb2NzL3Byb3ZpZGVycy9wcm94eS9zZXJ2ZXJfdHJhZWZpaw==">Authentik<i class="fa fa-external-link-alt"></i></span>, MIT, Python, 5.3k stars as of writing</li><li><span class="exturl" data-url="aHR0cHM6Ly9kb2MudHJhZWZpay5pby90cmFlZmlrLWh1Yi9hdXRoL2tleWNsb2FrLw==">KeyCloak<i class="fa fa-external-link-alt"></i></span>, Apache-2.0, Java, 18.4k stars as of writing.<br>I&#39;m leaning towards Authelia at the moment, but haven&#39;t got spare time to try it out.</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>By combining the power of Nebula and Traefik, we are essentially opening another possibility of self hosting. Doing it this way would provide several benefits:</p><ul><li><strong>Cost Saving</strong>: The public facing server (or the Nebula lighthouse) can essentially be a free tier instance that does nothing but routing traffic between the two Traefik instance.</li><li><strong>Data Retention</strong>: You don&#39;t need to worry about your data.</li><li><strong>Secure &amp; Fast</strong>: By using Cloudflare, the whole infrastructure has relatively good security as well as speed.</li></ul><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><span class="exturl" data-url="aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9jb21wb3NlLWZpbGUvMDUtc2VydmljZXMvI2NhcF9hZGQ=">https://docs.docker.com/compose/compose-file/05-services/#cap_add<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9kb2MudHJhZWZpay5pby90cmFlZmlrL21pZGRsZXdhcmVzL2h0dHAvZm9yd2FyZGF1dGgv">https://doc.traefik.io/traefik/middlewares/http/forwardauth/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9nb2F1dGhlbnRpay5pby9kb2NzL3Byb3ZpZGVycy9wcm94eS9zZXJ2ZXJfdHJhZWZpaw==">https://goauthentik.io/docs/providers/proxy/server_traefik<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cuYXV0aGVsaWEuY29tL2ludGVncmF0aW9uL3Byb3hpZXMvdHJhZWZpay8=">https://www.authelia.com/integration/proxies/traefik/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVFVOL1RBUA==">https://en.wikipedia.org/wiki/TUN/TAP<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This article is a continuation of my previous article on Traefik, which you can find &lt;a href=&quot;/2023/07/14/Easy-Self-Hosting-with-Traefik-Proxy&quot;&gt;here&lt;/a&gt;. Previously, I went through some examples of how I used Traefik so this article would assume you have the basic knowledge of Traefik, if you are not comfortable with it, feel free to go back to my article or read the official documentation &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90cmFlZmlrLmlvL3RyYWVmaWsv&quot;&gt;from traefik&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h2&gt;&lt;p&gt;I&amp;#39;ve been hosting some apps in my local home network using Raspberry Pi for a while now, and I&amp;#39;ve also hosted some apps on Google Cloud.&lt;/p&gt;
&lt;p&gt;Whenever I want to access things on Raspberry Pi while not at home, I would have to use &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9uZWJ1bGEuZGVmaW5lZC5uZXQvZG9jcy8=&quot;&gt;Nebula&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; which is a tool for overlay network. I would have to connect to the VPN, and then access the applications.&lt;/p&gt;
&lt;p&gt;This proves to be inconvenient, and not easy to use. One day, I started to play around with the idea of putting things together with Traefik, and it worked so well and drives me to write this article.&lt;/p&gt;
&lt;h2 id=&quot;Why-hosting-things-separately&quot;&gt;&lt;a href=&quot;#Why-hosting-things-separately&quot; class=&quot;headerlink&quot; title=&quot;Why hosting things separately?&quot;&gt;&lt;/a&gt;Why hosting things separately?&lt;/h2&gt;&lt;p&gt;Some may wonder, why I would host things in both Raspberry Pi and GCP. Well, the main reason for this is cost efficiency and data privacy&amp;#x2F;security.&lt;/p&gt;
&lt;p&gt;You can use whatever CPU and storage you want within your local network without incurring monthly costs, and you would have the added benefits of having data on premise.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Traefik" scheme="https://jiangsc.me/tags/Traefik/"/>
    
    <category term="Self-hosting" scheme="https://jiangsc.me/tags/Self-hosting/"/>
    
    <category term="Google Cloud Platform" scheme="https://jiangsc.me/tags/Google-Cloud-Platform/"/>
    
    <category term="Nebula" scheme="https://jiangsc.me/tags/Nebula/"/>
    
    <category term="Cloudflare" scheme="https://jiangsc.me/tags/Cloudflare/"/>
    
    <category term="Reverse proxy" scheme="https://jiangsc.me/tags/Reverse-proxy/"/>
    
  </entry>
  
  <entry>
    <title>Automation on MacOS -- Automatically Disconnecting Bluetooth Headset</title>
    <link href="https://jiangsc.me/2023/10/14/macos-automation-bluetooth-disconnect/"/>
    <id>https://jiangsc.me/2023/10/14/macos-automation-bluetooth-disconnect/</id>
    <published>2023-10-14T07:39:50.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Motivation-The-Need-to-Remember-to-Disconnect-Bluetooth"><a href="#Motivation-The-Need-to-Remember-to-Disconnect-Bluetooth" class="headerlink" title="Motivation: The Need to Remember to Disconnect Bluetooth"></a>Motivation: The Need to Remember to Disconnect Bluetooth</h3><p>I usually wear my Bluetooth headset at work, this is necessary because I need to talk to people or attend meetings online. One of the things that annoys me is I have to remember to turn off my headset every time I leave my workplace, otherwise because the Bluetooth is not disconnected automatically when the Mac goes to sleep, I will find a headphone with very low battery the next day. If the Bluetooth is disconnected, the headphone will turn itself off in 5 mins, so it all comes down to remembering to disconnect Bluetooth on the laptop, or to turn off the battery on the headphone. This annoys me so much that I eventually decided to spend time to solve this problem.</p><span id="more"></span><h3 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h3><p>There are several ways to solve this issue, but everything comes down to a shell script, the only difference is how you would trigger the shell script.</p><ol><li>Manually trigger the shell script. This is obviously less than ideal, one would still remember to trigger the script every day from the terminal.</li><li>Manually trigger from the <code>Shortcut</code> app. This improved a bit, but still not ideal cause it is still not automated to full potential.<br>Now both 1 &amp; 2 would require manual intervention, I would like things to be fully automated, and can run even when the laptop is locked, so I come up with the next option:</li><li>Automatically trigger from calendar. This would be the most ideal, cause it is possible to control the time of the trigger, and is fully automated.</li></ol><h3 id="Prerequisite"><a href="#Prerequisite" class="headerlink" title="Prerequisite:"></a>Prerequisite:</h3><ul><li><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RveS9ibHVldXRpbC90cmVlL21haW4=">Blueutil<i class="fa fa-external-link-alt"></i></span></li><li>Automator<br>  (The builtin automation app in MacOS from Apple)</li></ul><h3 id="Attempt-1-Calendar-Automation-Through-Shell-Script"><a href="#Attempt-1-Calendar-Automation-Through-Shell-Script" class="headerlink" title="Attempt 1: Calendar Automation Through Shell Script"></a>Attempt 1: Calendar Automation Through Shell Script</h3><p>My first attempt was a simple POC through shell script through calendar automation. I first created an calendar alarm script within Automator, this depends on the Blueutil mentioned earlier. Here&#39;s the script:</p><figure class="highlight sh"><figcaption><span>Toggling Bluetooth Through CLI</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [[ $(/opt/homebrew/bin/blueutil --is-connected <span class="string">&quot;REPLACE_WITH_BLUETOOTH_MAC_ADDRESS&quot;</span>) == 1 ]]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">/opt/homebrew/bin/blueutil --disconnect <span class="string">&quot;REPLACE_WITH_BLUETOOTH_MAC_ADDRESS&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $? == 0 ]] <span class="keyword">then</span></span><br><span class="line">osascript -e <span class="string">&#x27;display notification &quot;Headphone disconnected&quot; with title &quot;Headphone&quot;&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">/opt/homebrew/bin/blueutil --connect <span class="string">&quot;REPLACE_WITH_BLUETOOTH_MAC_ADDRESS&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ $? == 0 ]] <span class="keyword">then</span></span><br><span class="line">osascript -e <span class="string">&#x27;display notification &quot;Headphone connected&quot; with title &quot;Headphone&quot;&#x27;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>I tested this script in command line several times and made sure I&#39;m happy with it. In the Automator, I created a calendar alarm automation, and chose the run shell script action, and put the command above as the script. Once this is saved, I created a calendar entry in the Calendar app, and chose alert and then select open file. The path to the workflow is <code>~/Library/Workflows/Applications/Calendar</code>.</p><h4 id="Caveats"><a href="#Caveats" class="headerlink" title="Caveats"></a>Caveats</h4><p>While this works quite well, I would sometimes work after the time set in the calendar entry, this means I could be in a call with someone when the script is triggered, and my headphone would be disconnected during a call (which is really embarrassing)</p><h3 id="Final-Solution-Notification-with-Option-to-Continue-or-Cancel"><a href="#Final-Solution-Notification-with-Option-to-Continue-or-Cancel" class="headerlink" title="Final Solution: Notification with Option to Continue or Cancel"></a>Final Solution: Notification with Option to Continue or Cancel</h3><p>After some struggling, I found a solution I&#39;m happy with -- display a dialogue window asking for confirmation before disconnecting Bluetooth.<br>On top of the previous script, I added a new step to my Automator script, which is running an Apple Script, I added:</p><figure class="highlight applescript"><figcaption><span>Toggling Bluetooth Through CLI</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">on</span> <span class="built_in">run</span> &#123;input, parameters&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">display dialog</span> <span class="string">&quot;Disconnecting Bluetooth automatically, click “Cancel” if you would like to cancel. Will auto continue in 15 seconds.&quot;</span> <span class="keyword">with</span> icon caution <span class="keyword">with</span> title <span class="string">&quot;Bluetooth Disconnecting..&quot;</span> buttons &#123;<span class="string">&quot;Cancel&quot;</span>, <span class="string">&quot;Continue&quot;</span>&#125; default button <span class="number">2</span> giving up <span class="keyword">after</span> <span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="literal">result</span> = &#123;button returned:<span class="string">&quot;Cancel&quot;</span>&#125; <span class="keyword">then</span></span><br><span class="line"><span class="keyword">tell</span> <span class="keyword">me</span> <span class="keyword">to</span> quits</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line"><span class="keyword">end</span> <span class="built_in">run</span></span><br></pre></td></tr></table></figure><p>This script is pretty straightforward, it will display a dialogue window, and give two option to choose from with the default behavior being Continue if no option was chosen within 15 seconds. If cancel was chosen, the entire workflow will be cancelled, so Bluetooth will not be disconnected. If continue was chosen, it will continue.</p><h3 id="Future-improvement"><a href="#Future-improvement" class="headerlink" title="Future improvement"></a>Future improvement</h3><p>I can actually potentially combine the AppleScript and the Shell script and just use one step instead of two.</p><h3 id="Lessons-Learnt"><a href="#Lessons-Learnt" class="headerlink" title="Lessons Learnt"></a>Lessons Learnt</h3><p>I&#39;m quite happy with the final solution I came up with. What I learnt is:</p><ul><li>Apple Calendar events would still trigger alerts even when the laptop is locked.</li><li>One can use <code>display dialog</code> in AppleScript to trigger dialog confirmation.</li></ul>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Motivation-The-Need-to-Remember-to-Disconnect-Bluetooth&quot;&gt;&lt;a href=&quot;#Motivation-The-Need-to-Remember-to-Disconnect-Bluetooth&quot; class=&quot;headerlink&quot; title=&quot;Motivation: The Need to Remember to Disconnect Bluetooth&quot;&gt;&lt;/a&gt;Motivation: The Need to Remember to Disconnect Bluetooth&lt;/h3&gt;&lt;p&gt;I usually wear my Bluetooth headset at work, this is necessary because I need to talk to people or attend meetings online. One of the things that annoys me is I have to remember to turn off my headset every time I leave my workplace, otherwise because the Bluetooth is not disconnected automatically when the Mac goes to sleep, I will find a headphone with very low battery the next day. If the Bluetooth is disconnected, the headphone will turn itself off in 5 mins, so it all comes down to remembering to disconnect Bluetooth on the laptop, or to turn off the battery on the headphone. This annoys me so much that I eventually decided to spend time to solve this problem.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Automation" scheme="https://jiangsc.me/tags/Automation/"/>
    
    <category term="OS X" scheme="https://jiangsc.me/tags/OS-X/"/>
    
    <category term="MacOS" scheme="https://jiangsc.me/tags/MacOS/"/>
    
    <category term="Automator" scheme="https://jiangsc.me/tags/Automator/"/>
    
  </entry>
  
  <entry>
    <title>Lessons Learnt on Breaking and Reinstalling Arch Linux on Raspberry Pi</title>
    <link href="https://jiangsc.me/2023/10/08/arch-linux-on-rpi3/"/>
    <id>https://jiangsc.me/2023/10/08/arch-linux-on-rpi3/</id>
    <published>2023-10-08T04:59:16.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<p>I&#39;m a big fan of Arch Linux for its simplicity, and ease to use. However, sometimes it can be the source of headache. This week, I upgraded the Arch Linux on my Raspberry Pi 3 with latest packages with the following command <code>yay -Syu --noconfirm</code> (WARNING: you shouldn&#39;t be doing this). When I finished upgrade, my Raspberry Pi 3 stopped working. And I had to spend quite a lot of time getting things back to normal.</p><h2 id="Initial-Investigation-and-Thoughts"><a href="#Initial-Investigation-and-Thoughts" class="headerlink" title="Initial Investigation and Thoughts"></a>Initial Investigation and Thoughts</h2><p>Since I don&#39;t have any clue on what happened at all. I first tried whether SSH still works... And I got can&#39;t find zsh. That is indeed a bad sign, I can&#39;t do anything 😞. Next thing I did was reboot. And things got even worse -- I can&#39;t even SSH now, refused to connect at port 22 😢.</p><p>At this point, I had no choice but to connect the Pi to an external monitor. It didn&#39;t help. While I could see the bootloader start screen, the kernel seems broken, so machine did not start.</p><span id="more"></span><h2 id="Attempted-Solution-with-Chroot"><a href="#Attempted-Solution-with-Chroot" class="headerlink" title="Attempted Solution with Chroot"></a>Attempted Solution with Chroot</h2><p>Next, my plan is to pull the MicroSD card out and try if I can get chroot to work. I am expecting this to be difficult cause Raspberry Pi is ARM based, and my laptop is not. It turned out to be really difficult because I wasn&#39;t familiar with how chroot and mounting works.</p><p>To chroot into an ARM-based machine (in this case aarch64 architecture), you would normally need an ARM based machine. If you really want to do it from a x86_64 architecture machine, you would have to setup some kind of emulation. In this case, I&#39;m using QEMU, which is a pretty standard tool for emulation on Linux. Here&#39;s the steps I followed:</p><ul><li>Install QEMU related packages:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S qemu-user-static qemu-user-static-binfmt</span><br></pre></td></tr></table></figure><p>These two packages are both necessary. According to <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUUVNVSNEZXRhaWxzX29uX3BhY2thZ2VzX2F2YWlsYWJsZV9pbl9BcmNoX0xpbnV4" title="https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;QEMU#Details_on_packages_available_in_Arch_Linux">ArchLinux Wiki<i class="fa fa-external-link-alt"></i></span>, the first <code>qemu-user-static</code> provides user mode emulation, this would avoid the need to setup a full blown virtual machine to run the binaries. Instead, it would run the binary with static translation.</p><ul><li>You would also need to install some cross-compiling libraries:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S aarch64-linux-gnu-glibc</span><br></pre></td></tr></table></figure><ul><li>Insert your MicroSD card to your machine, mount the <code>/boot</code> partition and the <code>/</code> (root) partition, can be something like below, you would need to run as root:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mount --<span class="built_in">mkdir</span> /dev/sdX2 /mnt/sdcard/</span><br><span class="line">sudo mount --<span class="built_in">mkdir</span> /dev/sdX1 /mnt/sdcard/boot</span><br></pre></td></tr></table></figure><ul><li>Once this is done, you can follow the steps <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUUVNVSNDaHJvb3RpbmdfaW50b19hcm0vYXJtNjRfZW52aXJvbm1lbnRfZnJvbV94ODZfNjQ=" title="https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;title&#x2F;QEMU#Chrooting_into_arm&#x2F;arm64_environment_from_x86_64">here<i class="fa fa-external-link-alt"></i></span>. I went with the <code>arch-chroot</code> route:</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo arch-chroot /mnt/sdcard</span><br></pre></td></tr></table></figure><p>However, I kept getting <code>/lib/ld-linux-aarch64.so.1 does not exist</code>, when I ran the command above. Initially, I was thinking it was my host machine that has the issue, so I copied the file <code>ld-linux-aarch64.so.1</code> from <code>/usr/aarch64-linux-gnu/lib/ld-linux-aarch64.so.1</code>. And it still didn&#39;t work. I had spent almost one hour on this before I realized, the issue lies with my <code>chroot</code> and <strong>not</strong> my host machine. I had to do create a symbolic link from <code>/usr/lib</code> to <code>/lib</code> in the <code>chroot</code> (i.e. the sdcard file system). This time, I got <code>segmentation fault</code> when I did the chroot.</p><p>At this point, I might as well reinstall the whole ArchLinux. But before that I did a backup using the <code>rsync</code>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># backup is important!</span></span><br><span class="line">sudo rsync -av /mnt/sdcard ~/rpi_bak</span><br></pre></td></tr></table></figure><h2 id="Reinstallation-of-ArchLinux-on-Raspberry"><a href="#Reinstallation-of-ArchLinux-on-Raspberry" class="headerlink" title="Reinstallation of ArchLinux on Raspberry"></a>Reinstallation of ArchLinux on Raspberry</h2><p>Reinstalling the ArchLinux on Raspberry Pi 3 actually felt easier than on x86_64 machine(because it is actually <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXhhcm0ub3JnLw==" title="https:&#x2F;&#x2F;archlinuxarm.org&#x2F;">ArchLinux Arm<i class="fa fa-external-link-alt"></i></span> which is a port of ArchLinux for Arm devices). You can follow the guide <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXhhcm0ub3JnL3BsYXRmb3Jtcy9hcm12OC9icm9hZGNvbS9yYXNwYmVycnktcGktMw==" title="https:&#x2F;&#x2F;archlinuxarm.org&#x2F;platforms&#x2F;armv8&#x2F;broadcom&#x2F;raspberry-pi-3">from ArchLinux Arm<i class="fa fa-external-link-alt"></i></span>. I would recommend setting the boot partition to be <strong>more</strong> than 200MB, 400MB would be ideal.</p><p>Once you are done with installation, I would recommend <strong>not</strong> to put your MicroSD card back to your Raspberry yet. Instead, you should chroot into the mounted folder and start installing some packages. If you are following the guide from ArchLinux Arm, you can do:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount boot and root again if you have unmounted</span></span><br><span class="line">sudo mount /dev/sdX2 ./root</span><br><span class="line"><span class="comment"># this ensures the boot drive is properly mounted.</span></span><br><span class="line">sudo mount /dev/sdX1 ./root/boot</span><br><span class="line">sudo arch-chroot ./root</span><br></pre></td></tr></table></figure><p>You are now acting as the root user for the newly initiated ArchLinux installation. You can start by populating the keys:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pacman-key --init</span><br><span class="line">pacman-key --populate archlinuxarm</span><br></pre></td></tr></table></figure><p>Once you are done with that, you would have the chance to install some necessary software, I would recommend at least install <code>sudo</code>, <code>git</code>, <code>wget</code>, <code>zsh</code>. For me, I copied all my files from my previous installation, so:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -av ~/rpi_bak/sdcard/home/alarm/ ~/rpi-staging/root/home/alarm/</span><br></pre></td></tr></table></figure><p>Once this is done, I thought I&#39;m ready to put this MicroSD to my Raspberry Pi and things would get back to normal. However, things still didn&#39;t work as expected: the machine booted, but it had no Ethernet or WiFi access. I also noticed the lights were blinking wrongly. This made me think the whole situation had something to do with kernel. So, I had to plug the MicroSD back to my laptop and switch the kernel and install the <code>linux-rpi</code> <span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXhhcm0ub3JnL3BhY2thZ2VzL2FhcmNoNjQvbGludXgtcnBp" title="https:&#x2F;&#x2F;archlinuxarm.org&#x2F;packages&#x2F;aarch64&#x2F;linux-rpi">package<i class="fa fa-external-link-alt"></i></span>.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S linux-rpi</span><br></pre></td></tr></table></figure><p>This package is RPi Foundation patched Linux kernel and modules which turned out to solve the issue. You would be asked if you want to replace the current kernel and the u-boot. Go ahead and say yes. Now, if you had followed the official guide from ArchLinux Arm, you would get an error, because 200MB on the boot drive is not enough for installing a second kernel package when the current kernel is present (this is the reason I recommend using more than 200MB on boot partition). For me, I had to delete some files from the <code>/boot/dtbs</code> folder (which I don&#39;t recommend doing). This folder is for device tree blobs, so there might be unexpected consequences for deleting random files. </p><p>After rebooting and start using the kernel from RPi Foundation, everything would work as expected. I continued with some housekeeping tasks:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install cron</span></span><br><span class="line">sudo pacman -S cronie &amp;&amp; sudo systemctl <span class="built_in">enable</span> --now cronie</span><br><span class="line"></span><br><span class="line"><span class="comment"># set the hostname</span></span><br><span class="line">hostnamectl hostname raspberrypi</span><br><span class="line"></span><br><span class="line"><span class="comment"># set timezone</span></span><br><span class="line">sudo timedatectl set-timezone Pacific/Auckland</span><br><span class="line"></span><br><span class="line"><span class="comment"># add the default user to sudoer</span></span><br><span class="line">sudo visudo</span><br><span class="line"><span class="comment"># Add the following lines:</span></span><br><span class="line"><span class="comment"># alarm ALL=(ALL:ALL) ALL</span></span><br><span class="line"><span class="comment"># Defaults:alarm !authenticate</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># set locale to utf-8</span></span><br><span class="line">localectl set-locale LANG=en_US.UTF-8</span><br></pre></td></tr></table></figure><p>I also compiled the aur helper from my laptop and transferred it RPi -- it just takes forever to compile things on RPi. For doing this you would need to get the PKGBUILD file for the package you want to build and run: <code>CARCH=aarch64 makepkg -Cf</code></p><h3 id="Lessons-Learnt"><a href="#Lessons-Learnt" class="headerlink" title="Lessons Learnt"></a>Lessons Learnt</h3><p>Honestly, I would rather not go through this process again. I did learnt a lot though:</p><ul><li>Don&#39;t ever run things with <code>--no-confirm</code>, it is so dangerous, especially on a rolling release distro like Arch</li><li>I was surprised I can run chroot on the aarch64 with x86_64 machine, this turned out to be the magic of <code>qemu-user-static</code> and <code>qemu-user-static-binfmt</code>. The binfmt is particularly interesting, Wikipedia would provide <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmluZm10X21pc2M=" title="https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Binfmt_misc">better explanation<i class="fa fa-external-link-alt"></i></span> than I do. Basically, Linux knows to use aarch64 related emulation when you are inside the chroot -- there&#39;s a mapping from the binary format to the interpreter at runtime. For example, I had this <code>/usr/lib/binfmt.d/qemu-aarch64-static.conf</code> file which contains<br><code>:qemu-aarch64:M::\x7fELF\x02\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\xb7\x00:\xff\xff\xff\xff\xff\xff\xff\x00\xff\xff\xff\xff\xff\xff\xff\xff\xfe\xff\xff\xff:/usr/bin/qemu-aarch64-static:FP</code><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3FlbXUvcWVtdS9ibG9iL2YzMTE2MGM3ZDFiODljZmI0ZGQ0MDAxYTIzNTc1YjQyMTQxY2IwZWMvcWVtdS1kb2MudGV4aSNMMjU5MA==" title="https:&#x2F;&#x2F;github.com&#x2F;qemu&#x2F;qemu&#x2F;blob&#x2F;f31160c7d1b89cfb4dd4001a23575b42141cb0ec&#x2F;qemu-doc.texi#L2590">This would allow QEMU execute programs for other processor architectures as if they were native binaries.<i class="fa fa-external-link-alt"></i></span></li><li>Setting up a system through chroot is much easier than doing things over SSH, this is especially true if you are dealing with Raspberry Pi or something that&#39;s not powerful enough.</li></ul><hr><h4 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h4><p><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUUVNVSNEZXRhaWxzX29uX3BhY2thZ2VzX2F2YWlsYWJsZV9pbl9BcmNoX0xpbnV4">https://wiki.archlinux.org/title/QEMU#Details_on_packages_available_in_Arch_Linux<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUUVNVSNDaHJvb3RpbmdfaW50b19hcm0vYXJtNjRfZW52aXJvbm1lbnRfZnJvbV94ODZfNjQ=">https://wiki.archlinux.org/title/QEMU#Chrooting_into_arm/arm64_environment_from_x86_64<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9hcmNobGludXhhcm0ub3JnL3BsYXRmb3Jtcy9hcm12OC9icm9hZGNvbS9yYXNwYmVycnktcGktMw==">https://archlinuxarm.org/platforms/armv8/broadcom/raspberry-pi-3<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmluZm10X21pc2M=">https://en.wikipedia.org/wiki/Binfmt_misc<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3FlbXUvcWVtdS9ibG9iL2YzMTE2MGM3ZDFiODljZmI0ZGQ0MDAxYTIzNTc1YjQyMTQxY2IwZWMvcWVtdS1kb2MudGV4aSNMMjU5MA==">https://github.com/qemu/qemu/blob/f31160c7d1b89cfb4dd4001a23575b42141cb0ec/qemu-doc.texi#L2590<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I&amp;#39;m a big fan of Arch Linux for its simplicity, and ease to use. However, sometimes it can be the source of headache. This week, I upgraded the Arch Linux on my Raspberry Pi 3 with latest packages with the following command &lt;code&gt;yay -Syu --noconfirm&lt;/code&gt; (WARNING: you shouldn&amp;#39;t be doing this). When I finished upgrade, my Raspberry Pi 3 stopped working. And I had to spend quite a lot of time getting things back to normal.&lt;/p&gt;
&lt;h2 id=&quot;Initial-Investigation-and-Thoughts&quot;&gt;&lt;a href=&quot;#Initial-Investigation-and-Thoughts&quot; class=&quot;headerlink&quot; title=&quot;Initial Investigation and Thoughts&quot;&gt;&lt;/a&gt;Initial Investigation and Thoughts&lt;/h2&gt;&lt;p&gt;Since I don&amp;#39;t have any clue on what happened at all. I first tried whether SSH still works... And I got can&amp;#39;t find zsh. That is indeed a bad sign, I can&amp;#39;t do anything 😞. Next thing I did was reboot. And things got even worse -- I can&amp;#39;t even SSH now, refused to connect at port 22 😢.&lt;/p&gt;
&lt;p&gt;At this point, I had no choice but to connect the Pi to an external monitor. It didn&amp;#39;t help. While I could see the bootloader start screen, the kernel seems broken, so machine did not start.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://jiangsc.me/tags/Linux/"/>
    
    <category term="QEMU" scheme="https://jiangsc.me/tags/QEMU/"/>
    
    <category term="Arch Linux" scheme="https://jiangsc.me/tags/Arch-Linux/"/>
    
    <category term="Raspberry Pi" scheme="https://jiangsc.me/tags/Raspberry-Pi/"/>
    
    <category term="Raspberry Pi 3" scheme="https://jiangsc.me/tags/Raspberry-Pi-3/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript, TypeScript, Module Resolution and Module Alias</title>
    <link href="https://jiangsc.me/2023/07/29/js-ts-module-resolution-and-alias/"/>
    <id>https://jiangsc.me/2023/07/29/js-ts-module-resolution-and-alias/</id>
    <published>2023-07-29T06:43:44.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I&#39;ve encountered an interesting issue with a project using TypeScript. In this article, I will describe the problem, the investigation I did and how I locate the root cause, and suggest some solutions.</p><h3 id="What-happened"><a href="#What-happened" class="headerlink" title="What happened"></a>What happened</h3><p>We have a project that&#39;s a &quot;pure&quot; TypeScript project -- the codebase contains no JavaScript file, except for some configuration. As part of the build process, TypeScript is transpiled into JavaScript with <code>tsc</code>. Within the container, the project call node and runs the transpiled index.js, something like <code>node dist/src/index.js</code>.</p><p>When a PR was merged and deployed into one of the test environments, the container would not start and went into a crash loop state. This obviously is not a good sign. The initial step was checking the logs emitted from within the container. This revealed the cause of the crash was an imported module (imported with non-relative path) can not be found in one of the JavaScript file.</p><span id="more"></span><h3 id="Investigation-Reproduce"><a href="#Investigation-Reproduce" class="headerlink" title="Investigation &amp; Reproduce"></a>Investigation &amp; Reproduce</h3><p>The obvious first step for investigation, was to run the project with branch that caused the issue. Not surprisingly, the project ran just fine when running locally, and it even passed all tests. This, to me indicated the local setup did not match what&#39;s in the container.</p><p>Next, I checked the Dockerfile for the project and there was indeed some discrepancy between how the project runs in container vs how it runs using NPM. Locally, the project runs with <code>ts-node</code> which did not contain the transpile process. The container, was running using the transpiled JavaScript.</p><p>So now, when I ran the <code>tsc</code> locally and then ran the transpiled index.js file that&#39;s generated, I was able to reproduce the issue locally. I can see the module in question was imported using non-relative import.</p><p>Once I was able to reproduce the issue, I had several questions in mind that need to be answered:</p><ol><li>Why was there a module not found error when it was running fine locally (both tests, and actual server runs fine)?</li><li>Why wasn&#39;t TypeScript compiler reporting the error in Visual Studio Code?</li><li>How can this sort of issue be prevented?</li></ol><h3 id="Root-cause"><a href="#Root-cause" class="headerlink" title="Root cause"></a>Root cause</h3><div class="note warning"><p>I&#39;m not a fan of TypeScript, and the following analysis contains my personal opinions.</p></div><p>My conclusion was the answer to all of questions boils down to how this project was setup, more specifically how it uses TypeScript and the tsconfig file.</p><p>Modern day JavaScript has the concept of modules. A module can be imported in two ways, relative and non-relative. A relative imports, involves finding the path using relative path, that is, when you see something like <code>import helper from &#39;../../helper&#39;</code> is a relative import. Whereas, <code>import helper from &#39;tests/helpers&#39;</code> is an example of non-relative import. At runtime (or compile time for TypeScript), modules import one another using module loader <span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svbW9kdWxlcy5odG1s">^1<i class="fa fa-external-link-alt"></i></span>. The process of how modules decide where to find the module to import from is called module resolution.</p><p>In most circumstances, you would prefer relative imports, which works fine if you don&#39;t have deeply nested folder structures. Non-relative imports are mostly for importing modules from third party NPM packages. However, once the projects gets larger, you would see non-relative imports even for modules that are not from third party which makes importing easier to understand and follow.</p><p>TypeScript <span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svbW9kdWxlLXJlc29sdXRpb24uaHRtbCNob3ctdHlwZXNjcmlwdC1yZXNvbHZlcy1tb2R1bGVz">mimics NodeJS module resolution algorithm<i class="fa fa-external-link-alt"></i></span>. It also employs some flags to <strong>INFORM</strong> the compiler of what&#39;s expected to happen to module resolution at runtime. This is because, a project may have a different structure at runtime vs at build time. As an example, most front-end projects will be bundled to multiple JavaScript files, this is not representative of the project structure before it&#39;s built. One important thing to note here is that TypeScript compiler itself <strong>WILL NOT</strong> do any transformation on its own.</p><p>In <code>tsconfig</code>, <code>baseUrl</code> and <code>path</code> configuration are examples of the aforementioned flags.</p><ul><li><code>baseUrl</code>: Setting baseUrl informs the compiler where to find modules. All module imports with non-relative names are assumed to be relative to the baseUrl. <span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svbW9kdWxlLXJlc29sdXRpb24uaHRtbCNiYXNlLXVybA==">^2<i class="fa fa-external-link-alt"></i></span></li><li><code>path</code>:  this is a mapping between file and module, and should be used when modules sits outside of the baseUrl. <span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svbW9kdWxlLXJlc29sdXRpb24uaHRtbCNwYXRoLW1hcHBpbmc=">^3<i class="fa fa-external-link-alt"></i></span></li></ul><p>The <code>tsconfig</code> file for this project in question contains the following line <code>baseUrl: ./src</code>. This has several implications:</p><ul><li>When writing code, someone could import other modules within src folder using non-relative names, this would <strong>NOT</strong> cause any issue.</li><li>At build time, TypeScript would emit JavaScript file with non-relative imports.</li><li>At runtime, depending on how the project is setup, there could be different consequences:<ul><li>If the final runtime code was bundled together using a bundler, chances are the project would run fine.</li><li>If the final runtime code was not bundled together, and nothing was done at project level to support the non-relative import, the project would fail at runtime, and emit a <code>module not found</code> error.</li></ul></li></ul><p>For the project I mentioned, <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2lsZWFybmlvL21vZHVsZS1hbGlhcw==">a NPM package called module-alias<i class="fa fa-external-link-alt"></i></span> was used. However, not all aliases are registered properly. This was what led to the <code>module not found</code> error at runtime.</p><h3 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h3><p>I think the key is to have consistency between the project setup and TypeScript configuration (tsconfig), that is, if the project is not using a bundler, the baseUrl should be used together with paths mapping. And anytime a new non-relative import is added in code, one should also check whether the alias has been setup correctly. </p><p>There are many ways to setup alias for non-relative path import:</p><ul><li>Using the <code>module-alias</code> NPM package. Note that this package is not a development dependency, you will have to include it in your actual dependency.</li><li>Using the <span class="exturl" data-url="aHR0cHM6Ly9ub2RlanMub3JnL2RvY3MvbGF0ZXN0LXYxOC54L2FwaS9wYWNrYWdlcy5odG1sI3N1YnBhdGgtaW1wb3J0cw==">subpath imports method<i class="fa fa-external-link-alt"></i></span> provided by NodeJS (this is only applicable in NodeJS project) which setup alias in package.json</li></ul><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svbW9kdWxlcy5odG1s">https://www.typescriptlang.org/docs/handbook/modules.html<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93d3cudHlwZXNjcmlwdGxhbmcub3JnL2RvY3MvaGFuZGJvb2svbW9kdWxlLXJlc29sdXRpb24uaHRtbA==">https://www.typescriptlang.org/docs/handbook/module-resolution.html<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I&amp;#39;ve encountered an interesting issue with a project using TypeScript. In this article, I will describe the problem, the investigation I did and how I locate the root cause, and suggest some solutions.&lt;/p&gt;
&lt;h3 id=&quot;What-happened&quot;&gt;&lt;a href=&quot;#What-happened&quot; class=&quot;headerlink&quot; title=&quot;What happened&quot;&gt;&lt;/a&gt;What happened&lt;/h3&gt;&lt;p&gt;We have a project that&amp;#39;s a &amp;quot;pure&amp;quot; TypeScript project -- the codebase contains no JavaScript file, except for some configuration. As part of the build process, TypeScript is transpiled into JavaScript with &lt;code&gt;tsc&lt;/code&gt;. Within the container, the project call node and runs the transpiled index.js, something like &lt;code&gt;node dist/src/index.js&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When a PR was merged and deployed into one of the test environments, the container would not start and went into a crash loop state. This obviously is not a good sign. The initial step was checking the logs emitted from within the container. This revealed the cause of the crash was an imported module (imported with non-relative path) can not be found in one of the JavaScript file.&lt;/p&gt;</summary>
    
    
    
    
    <category term="JavaScript" scheme="https://jiangsc.me/tags/JavaScript/"/>
    
    <category term="TypeScript" scheme="https://jiangsc.me/tags/TypeScript/"/>
    
    <category term="Module" scheme="https://jiangsc.me/tags/Module/"/>
    
  </entry>
  
  <entry>
    <title>Easy Self Hosting with Traefik proxy</title>
    <link href="https://jiangsc.me/2023/07/14/Easy-Self-Hosting-with-Traefik-Proxy/"/>
    <id>https://jiangsc.me/2023/07/14/Easy-Self-Hosting-with-Traefik-Proxy/</id>
    <published>2023-07-14T01:10:56.000Z</published>
    <updated>2025-03-13T04:44:41.763Z</updated>
    
    <content type="html"><![CDATA[<p>I&#39;ve been running Traefik to self-host some of the applications I like for a few month now, I&#39;m really happy with its performance as well as convenience and therefore would like to share my setup and experience in this article. I will give a brief introduction of what Traefik is for, how I used it, and general suggestions on using Traefik.</p><h3 id="What-is-Traefik"><a href="#What-is-Traefik" class="headerlink" title="What is Traefik?"></a>What is Traefik?</h3><p>By definition, Traefik is a reverse proxy and load balancer <span class="exturl" data-url="aHR0cHM6Ly90cmFlZmlrLmlvL3RyYWVmaWsv">^1<i class="fa fa-external-link-alt"></i></span>. It is a member of the CNCF (Cloud Native Computing Foundation) foundation, the community version of this application is written in Go, open-sourced under MIT license, and hosted on GitHub. <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RyYWVmaWsvdHJhZWZpaw==">^2<i class="fa fa-external-link-alt"></i></span></p><span id="more"></span><h3 id="My-experience-with-Traefik"><a href="#My-experience-with-Traefik" class="headerlink" title="My experience with Traefik"></a>My experience with Traefik</h3><h4 id="Why-I-chose-Traefik"><a href="#Why-I-chose-Traefik" class="headerlink" title="Why I chose Traefik"></a>Why I chose Traefik</h4><p>In the past, I&#39;ve been a avid user of NGINX and Apache, if I were to create a web server for some purpose, I would choose to use NGINX or Apache. One has to agree they are the de facto standard for web server and&#x2F;or reverse proxy. However, what I don&#39;t like about them is their configuration. It is just simply difficult to comprehend and get used to.</p><p>Nowadays, I usually choose to use run applications within a Docker container. While I was setting up one of the applications, they mentioned Docker and how to setup Traefik with Docker. Upon reading through the documentation of Traefik, I made the decision to switch to use Traefik. Mainly because how easy it is to setup if you are using Docker&#x2F;Docker Compose or Kubernetes.</p><h4 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h4><div class="note info"><ul><li>A machine where you are going to run your containers on. (VPS, or Raspberry Pi, etc.)</li><li>An application or two that you want to run in container.</li><li>Docker already installed</li><li>(Optional) Domain name</li></ul></div><p>You would (of course) need to have a VPS up and running and a domain name if you want to make those applications public accessible. For the VPS part, I am using the free-tier instance from GCP.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkY29tbXVuaXR5L0Nsb3VkLUZyZWUtVGllci1Db21wYXJpc29uIzMtZ29vZ2xlLWNsb3Vk">^3<i class="fa fa-external-link-alt"></i></span> I opted to use the 10 GB &quot;balanced&quot; storage instead of the standard storage to get faster speed, which costs 1 USD per month. The performance is good enough for my current workload, I might double the size of the SSD at some point in the future.</p><h4 id="Setup-Traefik"><a href="#Setup-Traefik" class="headerlink" title="Setup Traefik"></a>Setup Traefik</h4><p>The setup of Traefik is intuitive, but not friction-free. Here&#39;s the Docker-compose file I used:</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  reverse-proxy:</span><br><span class="line">    <span class="comment"># The official v2 Traefik docker image</span></span><br><span class="line">    image: traefik:v2.<span class="number">9</span></span><br><span class="line">    <span class="comment"># Enables the web UI and tells Traefik to listen to docker</span></span><br><span class="line">    command:</span><br><span class="line">      - <span class="string">&quot;--log.level=DEBUG&quot;</span></span><br><span class="line">      - <span class="string">&quot;--api.dashboard=true&quot;</span></span><br><span class="line">      - <span class="string">&quot;--accesslog&quot;</span></span><br><span class="line">      - <span class="string">&quot;--entrypoints.web.address=:80&quot;</span></span><br><span class="line">      - <span class="string">&quot;--entrypoints.websecure.address=:443&quot;</span></span><br><span class="line">      - <span class="string">&quot;--entrypoints.websecure.forwardedHeaders.trustedIPs=127.0.0.1/32,10.0.0.0/8,192.168.0.0/16,172.16.0.0/12&quot;</span></span><br><span class="line">      - <span class="string">&quot;--providers.docker=true&quot;</span></span><br><span class="line">      - <span class="string">&quot;--providers.docker.exposedByDefault=false&quot;</span></span><br><span class="line">      - <span class="string">&quot;--providers.docker.network=traefik-proxy&quot;</span></span><br><span class="line">    networks:</span><br><span class="line">      - <span class="string">&quot;traefik-proxy&quot;</span></span><br><span class="line">    labels:</span><br><span class="line">      - <span class="string">&quot;traefik.enable=true&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.routers.dashboard.rule=Host(`example.domain.com`)&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.routers.dashboard.tls=true&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.routers.dashboard.service=api@internal&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.routers.dashboard.middlewares=auth&quot;</span></span><br><span class="line">      <span class="comment"># Check</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.middlewares.auth.basicauth.users=YOUR USERNAME AND PASSWORD&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.port=8080&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.ping=true&quot;</span></span><br><span class="line">    ports:</span><br><span class="line">      <span class="comment"># The HTTP port</span></span><br><span class="line">      - <span class="string">&quot;80:80&quot;</span></span><br><span class="line">      - <span class="string">&quot;443:443&quot;</span></span><br><span class="line">      <span class="comment"># The Web UI (enabled by --api.insecure=true)</span></span><br><span class="line">      - <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">    volumes:</span><br><span class="line">      <span class="comment"># So that Traefik can listen to the Docker events</span></span><br><span class="line">      - /var/<span class="keyword">run</span><span class="language-bash">/docker.sock:/var/run/docker.sock</span></span><br><span class="line"><span class="comment">#Docker Networks</span></span><br><span class="line">networks:</span><br><span class="line">  traefik-proxy:</span><br><span class="line">    external: true</span><br></pre></td></tr></table></figure><p>I won&#39;t go into everything in this file. Once you do the <code>docker-compose up</code> with this file, you will have a running Docker container with Traefik proxy running in it. This configuration also expose the dashboard web UI by default at <code>example.domain.com</code> domain. You will want to setup the basicauth for the dashboard to protect information, this is done as <code>traefik.http.middlewares.auth.basicauth.users=YOUR USERNAME AND PASSWORD</code>, the password needs to be hashed, more information can be found at <span class="exturl" data-url="aHR0cHM6Ly9kb2MudHJhZWZpay5pby90cmFlZmlrL21pZGRsZXdhcmVzL2h0dHAvYmFzaWNhdXRoLw==">Traefik documentation on this topic<i class="fa fa-external-link-alt"></i></span>.</p><p>As you can guess, Traefik setup the proxy and its relevant configuration through labels on a docker container. Some might find this not clean, I&#39;m okay with it. There are other ways to do the configuration as documented in Traefik documentation.</p><h4 id="Setup-an-application"><a href="#Setup-an-application" class="headerlink" title="Setup an application"></a>Setup an application</h4><p>As an example, I will setup CyberChef to run as a docker container, and behind the Traefik proxy. If you are not familiar with <span class="exturl" data-url="aHR0cHM6Ly9nY2hxLmdpdGh1Yi5pby9DeWJlckNoZWYv">CyberChef<i class="fa fa-external-link-alt"></i></span>, I highly recommend give it a go. It describes itself as:</p><blockquote class="pullquote"><p>A simple, intuitive web app for analysing and decoding data without having to deal with complex tools or programming languages. CyberChef encourages both technical and non-technical people to explore data formats, encryption and compression.</p></blockquote><p>Technically speaking, most of the things it does can be done in command line, I would say it is still nice to have a Web UI. I probably use less than 5% of its feature, mostly using it to format JSON, and occasionally decode BASE64 or other stuff.</p><p>As with most self-host applications, it is open source. The code is written in JavaScript, and open sourced under Apache 2.0 license.<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2djaHEvQ3liZXJDaGVm">^4<i class="fa fa-external-link-alt"></i></span></p><p>If you were to put to it into a container, you should consider using <span class="exturl" data-url="aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS9yL21wZXBwaW5nL2N5YmVyY2hlZg==">this docker image<i class="fa fa-external-link-alt"></i></span>. Below is an example of a docker-compose file where you put the CyberChef behind the traefik proxy:</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">version: <span class="string">&#x27;3&#x27;</span></span><br><span class="line">services:</span><br><span class="line">  cyberchef:</span><br><span class="line">    image: mpepping/cyberchef</span><br><span class="line">    <span class="keyword">expose</span>:</span><br><span class="line">      - <span class="number">8000</span></span><br><span class="line">    networks:</span><br><span class="line">      - <span class="string">&quot;traefik-proxy&quot;</span></span><br><span class="line">    labels:</span><br><span class="line">      - <span class="string">&quot;traefik.enable=true&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.docker.network=traefik-proxy&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.routers.cyberchef.rule=Host(`cyberchef.example-domain.com`)&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.routers.cyberchef.tls=true&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.routers.cyberchef.entrypoints=web,websecure&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.services.cyberchef.loadbalancer.healthcheck.path=/&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.services.cyberchef.loadbalancer.healthcheck.interval=15m&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.services.cyberchef.loadbalancer.healthcheck.timeout=3s&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.services.cyberchef.loadbalancer.healthcheck.scheme=http&quot;</span></span><br><span class="line">      - <span class="string">&quot;traefik.http.services.cyberchef.loadbalancer.server.port=8000&quot;</span></span><br><span class="line">networks:</span><br><span class="line">  traefik-proxy:</span><br><span class="line">    external: true</span><br></pre></td></tr></table></figure><p>As with the previous setup, this file also contains the usual stuff, where the <code>traefik.http.routers</code> part specifies the domain name, as well as some TLS stuff, the <code>entrypoints</code> part contains both web and websecure, which means this application can be accessed from both http and https. The labels that contains <code>loadbalancer</code> will provide a simple health check mechanism for traefik to check the health of the container, the <code>server.port</code> indicates where the Traefik go to for this downstream application.</p><p>Now, if you run <code>docker-compose up --force-recreate --build -d &amp;&amp; docker image prune -f &amp;&amp; docker compose logs -f</code>, you will be greeted with CyberChef if you go to the domain you setup.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>If you do not have any prior experience with NGINX or Apache, I tend to think this will be much easier to setup than NGINX or Apache. You can organize different applications you would like to self host by folders and put the respective docker-compose file under that folder. I would highly recommend checking <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JhcHRpc3RlQmRuL2RvY2tlci1zZWxmaG9zdGVkLWFwcHM=">this repository<i class="fa fa-external-link-alt"></i></span> for some inspiration</p><hr><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><span class="exturl" data-url="aHR0cHM6Ly90cmFlZmlrLmlvL3RyYWVmaWsv">https://traefik.io/traefik/<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3RyYWVmaWsvdHJhZWZpaw==">https://github.com/traefik/traefik<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2Nsb3VkY29tbXVuaXR5L0Nsb3VkLUZyZWUtVGllci1Db21wYXJpc29uIzMtZ29vZ2xlLWNsb3Vk">https://github.com/cloudcommunity/Cloud-Free-Tier-Comparison#3-google-cloud<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2djaHEvQ3liZXJDaGVm">https://github.com/gchq/CyberChef<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL0JhcHRpc3RlQmRuL2RvY2tlci1zZWxmaG9zdGVkLWFwcHM=">https://github.com/BaptisteBdn/docker-selfhosted-apps<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I&amp;#39;ve been running Traefik to self-host some of the applications I like for a few month now, I&amp;#39;m really happy with its performance as well as convenience and therefore would like to share my setup and experience in this article. I will give a brief introduction of what Traefik is for, how I used it, and general suggestions on using Traefik.&lt;/p&gt;
&lt;h3 id=&quot;What-is-Traefik&quot;&gt;&lt;a href=&quot;#What-is-Traefik&quot; class=&quot;headerlink&quot; title=&quot;What is Traefik?&quot;&gt;&lt;/a&gt;What is Traefik?&lt;/h3&gt;&lt;p&gt;By definition, Traefik is a reverse proxy and load balancer &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90cmFlZmlrLmlvL3RyYWVmaWsv&quot;&gt;^1&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;. It is a member of the CNCF (Cloud Native Computing Foundation) foundation, the community version of this application is written in Go, open-sourced under MIT license, and hosted on GitHub. &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL3RyYWVmaWsvdHJhZWZpaw==&quot;&gt;^2&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="Traefik" scheme="https://jiangsc.me/tags/Traefik/"/>
    
    <category term="Self-hosting" scheme="https://jiangsc.me/tags/Self-hosting/"/>
    
    <category term="Cloud Native" scheme="https://jiangsc.me/tags/Cloud-Native/"/>
    
    <category term="Reverse Proxy" scheme="https://jiangsc.me/tags/Reverse-Proxy/"/>
    
    <category term="Google Cloud Platform" scheme="https://jiangsc.me/tags/Google-Cloud-Platform/"/>
    
  </entry>
  
  <entry>
    <title>Self-signed certificate, issues and solutions</title>
    <link href="https://jiangsc.me/2023/06/24/self-signed-cert-issues-and-solutions/"/>
    <id>https://jiangsc.me/2023/06/24/self-signed-cert-issues-and-solutions/</id>
    <published>2023-06-24T06:11:32.000Z</published>
    <updated>2025-03-13T04:44:41.765Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I&#39;ve encounter several situations where I have to deal with self-signed certificate. As this is such a common issue, I&#39;ve decided to write this article to document my learnings and for my own reference in the future.</p><p>This article will start by explaining what is a SSL certificate, and what is a self-signed certificate. From there, I will detail the problems I encountered recently on self-signed certificate, and how I solved them.</p><span id="more"></span><h3 id="What-is-a-SSL-certificate"><a href="#What-is-a-SSL-certificate" class="headerlink" title="What is a (SSL) certificate?"></a>What is a (SSL) certificate?</h3><p>A certificate, is something you used to prove you identity. For example, in most countries around the world, you would usually have something to identify who you are and prove you are who you claimed to be, this could be something like a driver license, and are usually issued by the government.</p><p>In the context of internet security, you&#39;ve got SSL certificate. This is something the browser would use to authenticate the identity of a website. An SSL certificate is most likely issued and signed by a trusted CA or certificate authority.</p><h3 id="What-is-a-self-signed-certificate"><a href="#What-is-a-self-signed-certificate" class="headerlink" title="What is a self-signed certificate?"></a>What is a self-signed certificate?</h3><p>To put it in short, a self-signed certificate is something that&#39;s issued and signed by the same party. In other words, this is like you have issued yourself a driver license, to identify and prove you are you. I&#39;m pretty sure you would have a hard time convincing people to accept that as a proof of your identity.</p><h3 id="Benefits-and-risks-associated-with-self-signed-certificate"><a href="#Benefits-and-risks-associated-with-self-signed-certificate" class="headerlink" title="Benefits and risks associated with self-signed certificate"></a>Benefits and risks associated with self-signed certificate</h3><p>It is quite obvious that to most people, self-signed certificate would pose a big risk. Because SSL certificate are usually used for HTTPS communication,  if a self-signed certificate is obtained from an untrusted source and installed on your computer, the malicious party can pretend to be a any website, and will be able to decrypt the HTTPS traffic from your computer. This is called Man-in-the-middle attack.</p><p>However, with increasingly strict requirement on HTTPS in most browsers, it is necessary to trust a self-signed certificate. Here are some common scenarios.</p><ul><li>In a large enterprise, the intranet traffic is usually not exposed to the public. In this situation, a self-signed certificate is appropriate because it would allow the traffic to be encrypted properly.</li><li>In a home or SOHO network environment, you may want to use a self-signed certificate on your router, this will stop your browser from complaining about HTTP traffic.</li><li>In a development environment, you may also want to use a self-signed certificate. This is so that you can utilize the Man-in-the-middle method and sniff some of the HTTPS traffic, making things easier to debug. (This is especially useful when you are doing mobile application development)</li></ul><h3 id="Issues-and-solutions"><a href="#Issues-and-solutions" class="headerlink" title="Issues and solutions"></a>Issues and solutions</h3><p>I would like to go over the issues I have encountered recently on self-signed certificates. In most situations, to solve the problem, you can either <strong>bypass</strong> or <strong>trust</strong>. <strong>Bypass</strong> means blindly trust all self-signed certificate and don&#39;t warn me again. <strong>Trust</strong> means trusting <strong>only</strong> the certificate in question, which means if you ever have another self-signed certificate, you would have to <strong>trust</strong> it again. Unless you have a very good reason, <strong>do not</strong> use the bypass solution.</p><h5 id="Using-self-signed-certificate-in-JavaScript-NodeJS"><a href="#Using-self-signed-certificate-in-JavaScript-NodeJS" class="headerlink" title="Using self-signed certificate in JavaScript&#x2F;NodeJS"></a>Using self-signed certificate in JavaScript&#x2F;NodeJS</h5><p>If you are a NodeJS developer, you would most likely to have encounter error message like <code>Self-signed certificate in certificate chain</code>. This error is actually from NodeJS https client, if you are using a third party library (like Apollo server client), you will have to dig and find how to pass custom http client to that library.</p><div class="tabs" id="solutions_node"><ul class="nav-tabs"><li class="tab active"><a href="#solutions_node-1">Solution 1: Bypass</a></li><li class="tab"><a href="#solutions_node-2">Solution 2: Trust</a></li></ul><div class="tab-content"><div class="tab-pane active" id="solutions_node-1"><p>There are several ways to bypass this warning.</p><ul><li>At global level: using environment variable, <code>export NODE_TLS_REJECT_UNAUTHORIZED=0</code></li><li>At HTTPS client level:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">https.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">host</span>: <span class="string">&#x27;192.168.1.1&#x27;</span>,</span><br><span class="line">      <span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">      <span class="attr">rejectUnauthorized</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">requestCert</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">agent</span>: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="solutions_node-2"><figure class="highlight javascript"><figcaption><span>Trust certificate in NodeJS</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> https = <span class="built_in">require</span>(<span class="string">&#x27;https&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read the self-signed certificate file</span></span><br><span class="line"><span class="keyword">const</span> caCert = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;path/to/self-signed-certificate.pem&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the agent with the self-signed certificate</span></span><br><span class="line"><span class="keyword">const</span> agent = <span class="keyword">new</span> https.<span class="title class_">Agent</span>(&#123;</span><br><span class="line">  <span class="attr">ca</span>: caCert</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make the HTTP request using the agent</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  <span class="attr">hostname</span>: <span class="string">&#x27;yourserver.com&#x27;</span>,</span><br><span class="line">  <span class="attr">port</span>: <span class="number">443</span>,</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="attr">agent</span>: agent</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = https.<span class="title function_">request</span>(options, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Response handling logic</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">req.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">req.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure></div></div></div><h5 id="Using-self-signed-certificate-in-Python"><a href="#Using-self-signed-certificate-in-Python" class="headerlink" title="Using self-signed certificate in Python"></a>Using self-signed certificate in Python</h5><div class="tabs" id="solutions_python"><ul class="nav-tabs"><li class="tab active"><a href="#solutions_python-1">Solution 1: Bypass</a></li><li class="tab"><a href="#solutions_python-2">Solution 2: Trust</a></li></ul><div class="tab-content"><div class="tab-pane active" id="solutions_python-1"><p>To bypass at a client level, add verify&#x3D;False.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data = &#123;<span class="string">&#x27;foo&#x27;</span>:<span class="string">&#x27;bar&#x27;</span>&#125;</span><br><span class="line">url = <span class="string">&#x27;https://foo.com/bar&#x27;</span></span><br><span class="line">r = requests.post(url, data=data, verify=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure></div><div class="tab-pane" id="solutions_python-2"><p>To trust the certificate, you will need to put the certificate on that machine and either use the environment variable or pass the certificate in the path</p><figure class="highlight python"><figcaption><span>Trust certificate in Python</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> certifi</span><br><span class="line"></span><br><span class="line"><span class="comment"># Specify the URL of the server you want to connect to</span></span><br><span class="line">url = <span class="string">&#x27;https://yourserver.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Path to your self-signed certificate file (PEM format)</span></span><br><span class="line">cert_file = <span class="string">&#x27;path/to/self-signed-certificate.pem&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Send an HTTP GET request</span></span><br><span class="line">response = requests.get(url, cert=(cert_file, cert_file), verify=certifi.where())</span><br><span class="line"></span><br><span class="line"><span class="comment"># Process the response</span></span><br><span class="line"><span class="built_in">print</span>(response.text)</span><br></pre></td></tr></table></figure><p>Or <code>export REQUESTS_CA_BUNDLE = /path/to/your/certificate.pem</code></p></div></div></div><h5 id="Using-self-signed-certificate-with-Docker-Colima"><a href="#Using-self-signed-certificate-with-Docker-Colima" class="headerlink" title="Using self-signed certificate with Docker&#x2F;Colima"></a>Using self-signed certificate with Docker&#x2F;Colima</h5><p>This is something I encountered recently, our internal Docker registry uses self-signed certificate, this turned out to be quite a challenge. I had to find ways to add the certificate Colima host machine for this to work correctly.<br>Here&#39;s the command I ran:<br><code>colima ssh -- sudo sh -c &quot;openssl s_client -showcerts -connect our-internal-url:443 &lt;/dev/null 2&gt;/dev/null|openssl x509 -outform PEM &gt; /usr/local/share/ca-certificates/internal.crt &amp;&amp; update-ca-certificates &amp;&amp; cat /var/run/docker.pid | xargs kill&quot;</code><br>This will download the certificate and install in the certificate storage in the colima VM in one go.</p><h4 id="References"><a href="#References" class="headerlink" title="References"></a>References</h4><p><span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vamtyZW1zZXIvYTgxNDMzODQwNDliMTcxZDRlNjRjNWFlYjZkYTQ3OTM=">https://gist.github.com/jkremser/a8143384049b171d4e64c5aeb6da4793<i class="fa fa-external-link-alt"></i></span></p><ul><li>Some of the code in this article was generated using ChatGPT.</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I&amp;#39;ve encounter several situations where I have to deal with self-signed certificate. As this is such a common issue, I&amp;#39;ve decided to write this article to document my learnings and for my own reference in the future.&lt;/p&gt;
&lt;p&gt;This article will start by explaining what is a SSL certificate, and what is a self-signed certificate. From there, I will detail the problems I encountered recently on self-signed certificate, and how I solved them.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://jiangsc.me/tags/Linux/"/>
    
    <category term="MacOS" scheme="https://jiangsc.me/tags/MacOS/"/>
    
    <category term="Docker" scheme="https://jiangsc.me/tags/Docker/"/>
    
    <category term="Python" scheme="https://jiangsc.me/tags/Python/"/>
    
    <category term="Node.JS" scheme="https://jiangsc.me/tags/Node-JS/"/>
    
    <category term="Colima" scheme="https://jiangsc.me/tags/Colima/"/>
    
    <category term="Self-signed Certificate" scheme="https://jiangsc.me/tags/Self-signed-Certificate/"/>
    
    <category term="TLS" scheme="https://jiangsc.me/tags/TLS/"/>
    
  </entry>
  
  <entry>
    <title>Fixing issues on Thinkpad Neo 14 running Linux</title>
    <link href="https://jiangsc.me/2023/06/03/thinkpad-neo-14-issue-fix/"/>
    <id>https://jiangsc.me/2023/06/03/thinkpad-neo-14-issue-fix/</id>
    <published>2023-06-03T01:17:20.000Z</published>
    <updated>2025-03-13T04:44:41.765Z</updated>
    
    <content type="html"><![CDATA[<p>This article is a continuation for my <a href="/2023/05/07/Tips-for-Setting-Up-Linux-on-AMD-based-Thinkpad/" title="Tips for Setting Up Linux on AMD based Thinkpad">previous article</a> on setting up Linux on this specific laptop, which I&#39;ve been using daily for a little over a month. My distro is Arch Linux, so this article mainly focuses on Arch Linux-related information as well as solutions.</p><p>The major problems that bother me are listed below, and fortunately, I&#39;ve found solutions to all of them, which is also why I&#39;m writing this article to share my solutions.</p><ul><li>Internal microphone not working out of the box</li><li>Wake from sleep takes more than 10 seconds</li><li>External monitor cause system lag</li><li>CPU frequency not optimized to use the highest possible boost frequency (4.8 GHZ)</li></ul><span id="more"></span><h3 id="Issue-1-Internal-microphone-array-not-working-out-of-the-box"><a href="#Issue-1-Internal-microphone-array-not-working-out-of-the-box" class="headerlink" title="Issue 1: Internal microphone array not working out of the box"></a>Issue 1: Internal microphone array not working out of the box</h3><div class="note info"><p>2023-07-04 update: the patch I submitted to Linux Kernel has been merged, so the laptop Thinkpad Neo14 is in the quirks list for the microphone 🎉. This means, if you are on the LTS kernel version of 6.1, or a kernel version later than 6.3, you should be able to see the microphone &#39;working&#39; (you will still need to fix the pulse audio part detailed below).</p></div><p><del>This was the issue that bothered me most, I just needed it to work correctly as this is my daily driver laptop and it&#39;s important to have the microphone work correctly.</del></p><ul><li><strong>Root cause:</strong> I had to search all over the internet to find a proper solution for this. And what helped me in the end was <span class="exturl" data-url="aHR0cHM6Ly9iYnMuYXJjaGxpbnV4Lm9yZy92aWV3dG9waWMucGhwP3BpZD0yMDU4MDg3I3AyMDU4MDg3">this Arch Linux forum post<i class="fa fa-external-link-alt"></i></span>. Based on the discussion there, the root cause seems to be my specific laptop model is not in the quirk list, and lots of people there was having this same issue. The suggested solution in that forum post is to modify the source code directly.</li></ul><h4 id="Solution-Modify-the-source-code-and-recompile-the-kernel"><a href="#Solution-Modify-the-source-code-and-recompile-the-kernel" class="headerlink" title="Solution: Modify the source code and recompile the kernel"></a><del>Solution: Modify the source code and recompile the kernel</del></h4><p><del>I assume this is a big ask for most Linux user, but I will still go through what I did. I had submitted the patch to Linux kernel by the time this article is published, so hopefully when someone find this article from major search engines, this is no longer an issue.</del><br><del>Here is what I did:</del></p><ul><li><del>Clone the Linux repo from GitHub: <code>git clone https://github.com/torvalds/linux.git --depth 1</code> (the reason I added depth 1 is to save some time when cloning, I don&#39;t really need to have all the Linux history locally, and having <code>--depth 1</code> will only give the most recent commit log)</del></li><li><del>Change the file <code>sound/soc/amd/yc/acp6x-mach.c</code>, adding the line detailed in the patch below to anywhere in the <code>yc_acp_quirk_table</code></del></li></ul><div class="note info"><p>The following patch was exactly what I had submitted to Linux kernel, I leave it here for reference only:</p></div><figure class="highlight patch"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/sound/soc/amd/yc/acp6x-mach.c b/sound/soc/amd/yc/acp6x-mach.c</span></span><br><span class="line"><span class="comment">index 4406a5def..246299a17 100644</span></span><br><span class="line"><span class="comment">--- a/sound/soc/amd/yc/acp6x-mach.c</span></span><br><span class="line"><span class="comment">+++ b/sound/soc/amd/yc/acp6x-mach.c</span></span><br><span class="line"><span class="meta">@@ -171,6 +171,13 @@</span> static const struct dmi_system_id yc_acp_quirk_table[] = &#123;</span><br><span class="line"> DMI_MATCH(DMI_PRODUCT_NAME, &quot;21CL&quot;),</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"><span class="addition">+&#123;</span></span><br><span class="line"><span class="addition">+.driver_data = &amp;acp6x_card,</span></span><br><span class="line"><span class="addition">+.matches = &#123;</span></span><br><span class="line"><span class="addition">+DMI_MATCH(DMI_BOARD_VENDOR, &quot;LENOVO&quot;),</span></span><br><span class="line"><span class="addition">+DMI_MATCH(DMI_PRODUCT_NAME, &quot;21EF&quot;),</span></span><br><span class="line"><span class="addition">+&#125;</span></span><br><span class="line"><span class="addition">+&#125;,</span></span><br><span class="line"> &#123;</span><br><span class="line"> .driver_data = &amp;acp6x_card,</span><br><span class="line"> .matches = &#123;</span><br></pre></td></tr></table></figure><ul><li><del>Follow the <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvS2VybmVsL0FyY2hfYnVpbGRfc3lzdGVt">Linux Kernel building guide for Arch Linux using Arch Build System<i class="fa fa-external-link-alt"></i></span> to recompile the kernel, just remember to apply the patch using the method detailed in the guide <strong>BEFORE</strong> you started compiling.</del></li><li>Once you have installed and boot into the newly compiled kernel, you will notice your Pulse Audio profile will only have <code>Play Hi-Fi Audio</code> left.</li><li>If you are using Pulse Audio only, you will need to edit <code>/etc/pulse/default.pa</code> and add <code>load-module module-udev-detect use_ucm=0</code></li><li>If you are using Pipewire, you will need to edit <code>sudo vim /usr/share/wireplumber/main.lua.d/50-alsa-config.lua</code>, in this file, find and replace the following line (it should be true by default):</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- Use UCM instead of profile when available. Can be</span></span><br><span class="line"><span class="comment">-- disabled to skip trying to use the UCM profile.</span></span><br><span class="line">[<span class="string">&quot;api.alsa.use-ucm&quot;</span>] = <span class="literal">false</span>,</span><br></pre></td></tr></table></figure><p>You will need to reboot again to make sure these files take effects.</p><p>Like I said in the beginning, fixing this is not trivial, but hopefully, my patch to the kernel will already fix this issue by the time someone finds and reads this article.</p><h3 id="Issue-2-Wake-from-sleep-takes-more-than-10-seconds"><a href="#Issue-2-Wake-from-sleep-takes-more-than-10-seconds" class="headerlink" title="Issue 2: Wake from sleep takes more than 10 seconds"></a>Issue 2: Wake from sleep takes more than 10 seconds</h3><p>This was also one of the bigger issues for me. On my previous Intel laptop, the wake from sleep&#x2F;suspend would take less than 5 seconds. On this machine, it would take more than 15 seconds, sometimes 20 seconds. This is getting really annoying especially because I put the laptop into sleep quite often.</p><ul><li><strong>Root cause:</strong> I&#39;m not really sure if this is the actual cause, but this issue has something to do with a bug (?) in the kernel (?). I found the following line in the <code>dmesg</code> when I was looking into this issue:<br><code>DEBUG:2023-05-20T12:36:26,105472+12:00 nvme 0000:02:00.0: AMD-Vi: Event logged [IO_PAGE_FAULT domain=0x000d address=0x7152c000 flags=0x0000]</code>, so my assumption is that something is wrong with this AMD-Vi thingy.</li></ul><h4 id="Solution-Change-Kernel-Parameter"><a href="#Solution-Change-Kernel-Parameter" class="headerlink" title="Solution: Change Kernel Parameter"></a>Solution: Change Kernel Parameter</h4><p>I don&#39;t know if this would be the correct fix, but it did solve the issue. I solved the issue by changing kernel boot parameter.</p><div class="note success"><p>I added <code>iommu=pt</code> to the kernel parameter. The situation was greatly improved after reboot, the wake up time decreased to around 3 seconds.</p></div><h3 id="Issue-3-External-monitor-cause-system-lag"><a href="#Issue-3-External-monitor-cause-system-lag" class="headerlink" title="Issue 3: External monitor cause system lag"></a>Issue 3: External monitor cause system lag</h3><p>This is likely because of my misconfigured Xorg and not likely happen to other people, but the issue I experienced was that the internal monitor will lag a lot when an external monitor is connected.</p><h4 id="Solution-Modify-Xorg-configuration-file"><a href="#Solution-Modify-Xorg-configuration-file" class="headerlink" title="Solution: Modify Xorg configuration file"></a>Solution: Modify Xorg configuration file</h4><p>I modified the <code>/etc/X11/xorg.conf</code> file, here&#39;s the configuration after modification:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Section &quot;Device&quot;</span><br><span class="line">        ### Available Driver options are:-</span><br><span class="line">        ### Values: &lt;i&gt;: integer, &lt;f&gt;: float, &lt;bool&gt;: &quot;True&quot;/&quot;False&quot;,</span><br><span class="line">        ### &lt;string&gt;: &quot;String&quot;, &lt;freq&gt;: &quot;&lt;f&gt; Hz/kHz/MHz&quot;,</span><br><span class="line">        ### &lt;percent&gt;: &quot;&lt;f&gt;%&quot;</span><br><span class="line">        ### [arg]: arg optional</span><br><span class="line">        Option     &quot;DRI&quot;                &quot;3&quot;</span><br><span class="line">        #Option     &quot;ShadowPrimary&quot;      # [&lt;bool&gt;]</span><br><span class="line">        Option     &quot;TearFree&quot;           &quot;true&quot;</span><br><span class="line">        #Option     &quot;TearFree&quot;           # [&lt;bool&gt;]</span><br><span class="line">        #Option     &quot;DeleteUnusedDP12Displays&quot; # [&lt;bool&gt;]</span><br><span class="line">        #Option     &quot;VariableRefresh&quot;    # [&lt;bool&gt;]</span><br><span class="line">        #Option     &quot;AsyncFlipSecondaries&quot; # [&lt;bool&gt;]</span><br><span class="line">Identifier  &quot;Card1&quot;</span><br><span class="line">Driver      &quot;amdgpu&quot;</span><br><span class="line">BusID       &quot;PCI:51:0:1&quot;</span><br><span class="line">EndSection</span><br></pre></td></tr></table></figure><div class="note success"><p>I changed <code>DRI</code> to 3, and set <code>TearFree</code> option to true. Once reboot, I found the issue&#39;s been resolved.</p></div><h3 id="Issue-4-CPU-frequency-hardware-limit-is-not-using-the-highest-possible-frequency-4-8-GHZ"><a href="#Issue-4-CPU-frequency-hardware-limit-is-not-using-the-highest-possible-frequency-4-8-GHZ" class="headerlink" title="Issue 4: CPU frequency hardware limit is not using the highest possible frequency (4.8 GHZ)"></a>Issue 4: CPU frequency hardware limit is not using the highest possible frequency (4.8 GHZ)</h3><p>This one is probably not that important, with the current frequency at 3.2 GHZ without boosting, I was able to compile the Linux kernel in 33 minutes. Given the performance of this CPU, unleashing the frequency to 4.8 GHZ will probably also be helpful.</p><h4 id="Solution-Change-kernel-parameter"><a href="#Solution-Change-kernel-parameter" class="headerlink" title="Solution: Change kernel parameter"></a>Solution: Change kernel parameter</h4><p>I changed kernel parameter again for this one.</p><div class="note success"><p>I added an additional kernel parameter of <code>amd_pstate=active</code>.</p></div><p>On kernel 6.3+, this will set the CPU to use <code>amd_pstate_epp</code>, on earlier versions, this will make the system use <code>amd_pstate</code> as scaling driver. Note that scaling driver is different from CPU governor. If you want to use <code>amd_pstate</code> on 6.3 and above, you need to set <code>amd_pstate=passive</code> instead of active<br>You can verify you are indeed using the driver by running <code>sudo cpupower --cpu all frequency-info --human</code>, you will be able to see the driver as <code>driver: amd_pstate_epp</code></p><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><p><span class="exturl" data-url="aHR0cHM6Ly9iYnMuYXJjaGxpbnV4Lm9yZy92aWV3dG9waWMucGhwP3BpZD0yMDU4MDg3">https://bbs.archlinux.org/viewtopic.php?pid=2058087<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvS2VybmVsL0FyY2hfYnVpbGRfc3lzdGVt">https://wiki.archlinux.org/title/Kernel/Arch_build_system<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvUGF0Y2hpbmdfcGFja2FnZXMjQXBwbHlpbmdfcGF0Y2hlcw==">https://wiki.archlinux.org/title/Patching_packages#Applying_patches<i class="fa fa-external-link-alt"></i></span><br><span class="exturl" data-url="aHR0cHM6Ly9vbGQucmVkZGl0LmNvbS9yL2FyY2hsaW51eC9jb21tZW50cy8xMzgxZzJnL2FtZF9wc3RhdGVfZXBwX3NjYWxpbmdfZHJpdmVyX2F2YWlsYWJsZV93aXRoLw==">https://old.reddit.com/r/archlinux/comments/1381g2g/amd_pstate_epp_scaling_driver_available_with/<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;This article is a continuation for my &lt;a href=&quot;/2023/05/07/Tips-for-Setting-Up-Linux-on-AMD-based-Thinkpad/&quot; title=&quot;Tips for Setting Up Linux on AMD based Thinkpad&quot;&gt;previous article&lt;/a&gt; on setting up Linux on this specific laptop, which I&amp;#39;ve been using daily for a little over a month. My distro is Arch Linux, so this article mainly focuses on Arch Linux-related information as well as solutions.&lt;/p&gt;
&lt;p&gt;The major problems that bother me are listed below, and fortunately, I&amp;#39;ve found solutions to all of them, which is also why I&amp;#39;m writing this article to share my solutions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Internal microphone not working out of the box&lt;/li&gt;
&lt;li&gt;Wake from sleep takes more than 10 seconds&lt;/li&gt;
&lt;li&gt;External monitor cause system lag&lt;/li&gt;
&lt;li&gt;CPU frequency not optimized to use the highest possible boost frequency (4.8 GHZ)&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://jiangsc.me/tags/Linux/"/>
    
    <category term="ArchLinux" scheme="https://jiangsc.me/tags/ArchLinux/"/>
    
    <category term="AMD" scheme="https://jiangsc.me/tags/AMD/"/>
    
    <category term="Thinkpad" scheme="https://jiangsc.me/tags/Thinkpad/"/>
    
    <category term="Neo 14" scheme="https://jiangsc.me/tags/Neo-14/"/>
    
  </entry>
  
  <entry>
    <title>Tips for Setting Up Linux on AMD based Thinkpad</title>
    <link href="https://jiangsc.me/2023/05/07/Tips-for-Setting-Up-Linux-on-AMD-based-Thinkpad/"/>
    <id>https://jiangsc.me/2023/05/07/Tips-for-Setting-Up-Linux-on-AMD-based-Thinkpad/</id>
    <published>2023-05-07T10:01:51.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I bought a new laptop, it is a <span class="exturl" data-url="aHR0cHM6Ly93d3cubm90ZWJvb2tjaGVjay5uZXQvVGhpbmtQYWQtTmVvLTE0LUxlbm92by1sYXVuY2hlcy1uZXctQ2hpbmEtZXhjbHVzaXZlLTE0LWluY2gtVGhpbmtQYWQuNjE2Njc5LjAuaHRtbA==">Lenovo Thinkpad Neo14<i class="fa fa-external-link-alt"></i></span>. This is an exclusive model for the Chinese market. I was quite happy with the build quality and the look of it, only thing I dislike is it came pre-installed with Windows 11 which bundled many different kind of useless software.</p><p>To me, on the second day of getting the laptop, I start installing Linux on it. More specifically, I installed Arch Linux.</p><span id="more"></span><h3 id="Prior-Experience-with-Arch-Linux"><a href="#Prior-Experience-with-Arch-Linux" class="headerlink" title="Prior Experience with Arch Linux"></a>Prior Experience with Arch Linux</h3><p>I had been a long time Linux user, my earlier days of Linux starts with Ubuntu.I started dual-boot Linux and Windows when I got a laptop for my University.<br>Depending on who you ask, people might tell you Manjaro is not actually Arch. I don&#39;t have any strong opinion on this, but over the years, I did learn quite a lot of stuff through using Manjaro, this eventually lead me to migrate to pure Arch when I got the chance to upgrade my laptop SSD from the one that&#39;s pre-installed to a NVME SSD.</p><p>I have been using Arch since September 2022, I&#39;ve been quite happy with everything. So for this new laptop, I&#39;ve decided to continue using Linux. This article will be mainly about the issues I faced during my migration to the new laptop, and how I resolve those issues.</p><p>My hope is that this article would serve as a future reference should I need to this kind of migration again. And it would help some other people who face similar issues and find their way here.</p><h3 id="Resolving-Migration-Issues"><a href="#Resolving-Migration-Issues" class="headerlink" title="Resolving Migration Issues"></a>Resolving Migration Issues</h3><p>My approach was a bit different when it comes to &#39;migration&#39; -- I directly took the SSD from my old Intel laptop and install it on the new one.</p><h4 id="Issue-1-Can-not-boot"><a href="#Issue-1-Can-not-boot" class="headerlink" title="Issue #1: Can not boot"></a>Issue #1: Can not boot</h4><p>No one would expect Linux to be a plug-and-play OS, me neither, so I wasn&#39;t too surprised when my new laptop didn&#39;t boot correctly. The next thing I did was to get a thumb drive with Arch Linux ISO and boot into it.</p><p><strong>Solution</strong>:</p><ul><li>Boot into Arch Linux install ISO.</li><li>Connect to internet<ul><li>iwctl station wlan0 get-networks</li><li>iwctl station wlan0 connect <WI-FI name></li></ul></li><li>Mount the drive for the actual partition and chroot to the actual installed OS with the following:<ul><li><code>mount /dev/nvme0n1p1 /mnt</code></li><li><code>mount /dev/nvme0n1p2 /mnt/boot</code> (because I had a separate boot drive)</li></ul></li><li>Uninstall Intel microcode, install AMD microcode</li><li>Rebuild the kernel<ul><li><code>sudo mkinitcpio -k /boot/vmlinuz-linux -c /etc/mkinitcpio.conf -g /boot/initramfs-linux.img -S autodetect</code></li></ul></li></ul><p>(At this point, I thought I would have a working OS. Sadly enough, when I reboot, I still wasn&#39;t able to get to the login manager screen. I was suspecting it is an issue with the graphic drive, so I had to reboot into the install ISO and set the run level, I realized later, I didn&#39;t have to do this)</p><ul><li>Set the run level to use console (or command line interface, no graphical interface) -- <code>systemctl set-default multi-user.target</code> (Alternatively, you can potentially try to use Ctrl-Alt-F2 to drop into console mode when the machine failed to boot to login manager)</li></ul><h4 id="Issue-2-Booted-with-no-graphical-interface"><a href="#Issue-2-Booted-with-no-graphical-interface" class="headerlink" title="Issue #2: Booted with no graphical interface"></a>Issue #2: Booted with no graphical interface</h4><p>The next mission was to fix the graphic driver, so it can boot to the graphical interface.<br><strong>Solution</strong>:</p><ul><li>pacman -Sy xf86-video-amdgpu xf86-video-ati (these two packages are necessary, they are the drivers for the amd integrated graphics card)</li><li>pacman -Rns xf86-video-nouveau (Uninstall the Intel driver)</li><li>sudo Xorg -configure (this is to generate the new Xorg config file. This is necessary because my previous laptop was using Intel integrated graphics, and this new one is using AMD)</li></ul><h4 id="Issue-3-Miscellaneous-fix"><a href="#Issue-3-Miscellaneous-fix" class="headerlink" title="Issue #3: Miscellaneous fix"></a>Issue #3: Miscellaneous fix</h4><p>The aforementioned issues are the biggest ones, once I got the laptop setup, almost everything are usable, I don&#39;t even need to do any more setup. There are several caveats though. Here&#39;s a shortlist of those miscellaneous issues.</p><ul><li><p><strong>Fix Polybar and Sxhkd for screen brightness</strong><br>The changing of screen brightness (aka backlight) from the polybar did not work out of the box. This is sort of expected, cause the previous configuration was based on an Intel graphics card.</p><h4 id="Fixing-Polybar"><a href="#Fixing-Polybar" class="headerlink" title="Fixing Polybar:"></a>Fixing Polybar:</h4><p>  My previous polybar configuration was using the xbacklight module, to get the brightness work on my AMD laptop, I had to switch to use brightness module.<br>  Here&#39;s my config for that part</p>  <figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[module/brightness]</span></span><br><span class="line"><span class="attr">type</span> = internal/backlight</span><br><span class="line"><span class="attr">card</span> = amdgpu_bl0</span><br><span class="line"><span class="attr">use-actual-brightness</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">format</span> = &lt;label&gt;</span><br><span class="line"><span class="attr">label</span> = %&#123;F<span class="comment">#BB5F80&#125;   %&#123;F-&#125;  %percentage% %</span></span><br><span class="line"></span><br><span class="line"><span class="attr">bar-width</span> = <span class="number">10</span></span><br><span class="line"><span class="attr">bar-indicator</span> = |</span><br><span class="line">bar-indicator-foreground = <span class="comment">#fff</span></span><br><span class="line"><span class="attr">bar-indicator-font</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">bar-fill</span> = ─</span><br><span class="line"><span class="attr">bar-fill-font</span> = <span class="number">2</span></span><br><span class="line">bar-fill-foreground = <span class="comment">#9f78e1</span></span><br><span class="line"><span class="attr">bar-empty</span> = ─</span><br><span class="line"><span class="attr">bar-empty-font</span> = <span class="number">2</span></span><br><span class="line"><span class="attr">bar-empty-foreground</span> = <span class="variable">$&#123;colors.foreground-alt&#125;</span></span><br></pre></td></tr></table></figure><h4 id="Fixing-Sxhkd"><a href="#Fixing-Sxhkd" class="headerlink" title="Fixing Sxhkd:"></a>Fixing Sxhkd:</h4><p>  In Sxhkd config, I previously had a shortcut to use xbacklight to increase or decrease the screen brightness, this did not work with Linux, I switched to use a different software called brightnessctl, everything work as expected.</p><p>  Here&#39;s updated configuration for the brightness shortcut</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XF86MonBrightnessUp</span><br><span class="line">   brightnessctl set 10%+</span><br><span class="line"></span><br><span class="line">XF86MonBrightnessDown</span><br><span class="line">   brightnessctl set 10%-</span><br></pre></td></tr></table></figure></li><li><p>Vulkan and OpenCL fix<br>Vulkan and OpenCL are quite useful in that they provide hardware acceleration to certain software, to me, I use Darktable quite often, so I setup OpenCL acceleration by running the following:<br><code>yay opencl-amd</code> or <code>yay rocm-opencl-runtime</code>. Seems like the later one is more recent and supports the latest GPU, however, in my case, installing the first one also works.<br>You can verify your OpenCL installation by running <code>clinfo</code><br>For Vulkan support, install the vulkan-radeon package from aur like below:<br><code>yay vulkan-radeon</code></p></li></ul><h3 id="References"><a href="#References" class="headerlink" title="References"></a>References</h3><ul><li>Arch Linux Wiki on chroot: <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvY2hyb290">https://wiki.archlinux.org/title/chroot<i class="fa fa-external-link-alt"></i></span></li><li>Arch Linux Wiki on GPGPU: <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvR1BHUFU=">https://wiki.archlinux.org/title/GPGPU<i class="fa fa-external-link-alt"></i></span></li><li>Arch Linux Wiki on backlight: <span class="exturl" data-url="aHR0cHM6Ly93aWtpLmFyY2hsaW51eC5vcmcvdGl0bGUvYmFja2xpZ2h0">https://wiki.archlinux.org/title/backlight<i class="fa fa-external-link-alt"></i></span></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Recently, I bought a new laptop, it is a &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly93d3cubm90ZWJvb2tjaGVjay5uZXQvVGhpbmtQYWQtTmVvLTE0LUxlbm92by1sYXVuY2hlcy1uZXctQ2hpbmEtZXhjbHVzaXZlLTE0LWluY2gtVGhpbmtQYWQuNjE2Njc5LjAuaHRtbA==&quot;&gt;Lenovo Thinkpad Neo14&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;. This is an exclusive model for the Chinese market. I was quite happy with the build quality and the look of it, only thing I dislike is it came pre-installed with Windows 11 which bundled many different kind of useless software.&lt;/p&gt;
&lt;p&gt;To me, on the second day of getting the laptop, I start installing Linux on it. More specifically, I installed Arch Linux.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://jiangsc.me/tags/Linux/"/>
    
    <category term="Tips" scheme="https://jiangsc.me/tags/Tips/"/>
    
    <category term="ArchLinux" scheme="https://jiangsc.me/tags/ArchLinux/"/>
    
    <category term="AMD" scheme="https://jiangsc.me/tags/AMD/"/>
    
    <category term="Thinkpad" scheme="https://jiangsc.me/tags/Thinkpad/"/>
    
    <category term="Neo 14" scheme="https://jiangsc.me/tags/Neo-14/"/>
    
  </entry>
  
  <entry>
    <title>Lessons learnt from Node.js production incidents</title>
    <link href="https://jiangsc.me/2023/03/11/2023-03-11-technical-postmortem/"/>
    <id>https://jiangsc.me/2023/03/11/2023-03-11-technical-postmortem/</id>
    <published>2023-03-11T03:44:09.000Z</published>
    <updated>2025-03-13T04:44:41.761Z</updated>
    
    <content type="html"><![CDATA[<p>As software developers, we all strive to write bug-free and reliable code. However, sometimes unexpected issues arise, and we need to react quickly to mitigate their impact. In this article, we will discuss several real-world incidents that occurred in a production environment. We will examine the root cause of the incident and discuss the lessons learned from this experience.</p><h2 id="Prior-events"><a href="#Prior-events" class="headerlink" title="Prior events"></a>Prior events</h2><p>On March 2nd, release, migration to the latest container platform, accompanied with a huge release for the squad I&#39;m in.<br>On March 9th, the first release after the platform migration was deployed to production.</p><span id="more"></span><h2 id="Production-incidents"><a href="#Production-incidents" class="headerlink" title="Production incidents"></a>Production incidents</h2><h3 id="Container-restart-caused-by-memory-leak"><a href="#Container-restart-caused-by-memory-leak" class="headerlink" title="Container restart caused by memory leak"></a>Container restart caused by memory leak</h3><p>On March 7th, I was notified by a tech lead from a different squad about a memory leaks in our containers running in production. The said memory leak had forced the production containers to be restarted for 2 times since the deployment, this is obviously not a good sign, so I put away all of my work and start the investigation on this issue immediately.</p><h4 id="Investigation-on-what-has-changed"><a href="#Investigation-on-what-has-changed" class="headerlink" title="Investigation on what has changed"></a>Investigation on what has changed</h4><p>Since March 7th was only the 3rd working day after the release on March 2nd, I started by investigating the code changes that had been merged. I spent roughly 15 minutes on this investigation, and there was nothing obvious to me that can cause this leak from the code perspective.</p><p>Another question that immediately comes to my mind was that, if that was indeed a code issue, it should have been caught by testers. So looking into the code might not be useful after all.</p><p>My next step was to look into the logs. What I can see from the logs is that there was lots of 403 errors related to a 3rd party SDK. This SDK keeps trying to connect to an external address, even if it has received a 403 error, it had generated <em>a lot</em> of errors in our logs.</p><p>This made me suspect the actual cause of the issue lays at the network layer. So, I contacted the network team to look into this issue.</p><p>Eventually, we were able to locate one of the URLs was blocked at the Squid proxy level, and after adding it to the white list eventually resolved the problem.</p><h4 id="Root-Cause-Analysis"><a href="#Root-Cause-Analysis" class="headerlink" title="Root Cause Analysis"></a>Root Cause Analysis</h4><p>The root cause of the memory leak was because of the continuous networking call that is failing. Because this network calls are not properly garbage collected, the memory will grow exponentially, which will eventually result in a OOMKILL (out of memory kill) from OpenShift 4.</p><h4 id="Mitigations"><a href="#Mitigations" class="headerlink" title="Mitigations"></a>Mitigations</h4><ul><li>Short term: allow outbound traffic to 3rd party site.</li><li>Long term: Check and see why the network call is causing the memory leak. Even in the case of a network failure, the memory leak should not have happened in well written code.</li></ul><h4 id="Lessons-learnt"><a href="#Lessons-learnt" class="headerlink" title="Lessons learnt"></a>Lessons learnt</h4><ul><li>Platform migration need to be treated with care. In any case, the minimal monitoring needs to be done in lower environment after the migration has been done.</li><li>Think in advance, what network layer issue could be caused by the migration, such as ports, firewalls, and proxies.</li></ul><h3 id="Container-back-off-in-production-environment-after-deployment"><a href="#Container-back-off-in-production-environment-after-deployment" class="headerlink" title="Container back-off in production environment after deployment"></a>Container back-off in production environment after deployment</h3><p>This one was a really unexpected one. The deployment of the weekly release started at 1 pm on March 9th. Shortly after the release, the DevOPs notified us that they had noticed our containers were restarting every few minutes. Because we had no immediate solution, we had to back-off the weekly release.</p><h4 id="Investigation"><a href="#Investigation" class="headerlink" title="Investigation"></a>Investigation</h4><p>Due to the importance of items in this weekly release, we had to begin the investigation immediately. I led the investigation and start with almost the same thing as before: checking the list of changes, and then checking the logs.</p><p>One of the most suspicious items on the list is Node 18 upgrade. To further prove this, I had to look into the logs. In the log, I can see that an error was thrown and the container crashed. The error was related to an error from down stream.</p><p>Looking at the logs from previous days, I found those error had existed for quite some time, and in fact, the error has been there since the release on March 2nd. At this point, I am confident that the issue was related to Node 18 upgrade.</p><h4 id="Root-Cause-Analysis-1"><a href="#Root-Cause-Analysis-1" class="headerlink" title="Root Cause Analysis"></a>Root Cause Analysis</h4><ul><li>The Node 18 upgrade is obviously a direct cause of the crash. Starting in Node 15, one of the behaviors has changed, more specifically, an unhandled promise will crash the application. This behavior was different in previous version of Node (e.g. Node 12). In previous versions, unhandled promise rejection will not crash the app, but will show a deprecated warning.</li><li>However there are more to it. Multiple questions also need to be answered:<ul><li>What was wrong with the request send to down stream service?</li><li>Why was the error response returned from the downstream service not handled correctly -- why is the unhandled promise rejection thrown rather than a grace failure?</li><li>Why wasn&#39;t this caught in the unit test?</li></ul></li><li>Beside coding, I also have my doubts on testing as well as release management:<ul><li>How was the testing done on the Node 18 migration, why wasn&#39;t this issue found during manual testing?</li><li>What was the risk with upgrade to the Node 18, was it made clear and known to the product owner and team?</li><li>What was the rationale to bundle the Node 18 migration together with something that&#39;s of high importance and urgency to the business?</li></ul></li></ul><h4 id="Mitigations-1"><a href="#Mitigations-1" class="headerlink" title="Mitigations"></a>Mitigations</h4><ul><li>Short term:<ul><li>On the night of this incident, we developed a proper workaround to the issue. I called it a work around, because the downstream error is still not mitigated, we are still seeing the error, but we add a flag to Node engine so it would treat the unhandled promise rejection same as before using the flag <code>--unhandled-rejections=warn</code>, this mitigation was deployed the next day.</li><li>At the same time, developers of downstream services notified us of an issue with the way we are calling the downstream service, which resulted in the error response. Because this issue had high customer impacts, we had to do another deployment to production on the same day.</li></ul></li><li>Long term:<ul><li>Thoroughly investigate the way we used promises in the codebase and made sure we&#39;ve had correctly mitigated all place that have this issue before we remove the flag.</li><li>Investigate and find ways to cover this specific scenario (unhandled promise rejection) through unit tests.</li><li>Investigate what can be improved in the process to avoid such things from happening.</li></ul></li></ul><h4 id="Lessons-Learnt"><a href="#Lessons-Learnt" class="headerlink" title="Lessons Learnt"></a>Lessons Learnt</h4><ul><li>The main issue with the code turned out to be a misunderstanding of how promise works: in JavaScript, the promise code start execution as soon as it is created. <code>Promise.all</code> is merely a mechanism to wait for the process to finish execution. This misunderstanding caused the erroneous code which led to the unhandled promise rejection and the eventual crash.</li><li>It was also discovered that the wrong request to the downstream service had existed since at least the previous October, and the issue was amplified after the new journey went live on March 2nd. This was due to a miscommunication at the time.</li><li>Testing: Testers need to cover some negative scenarios when doing regression. The direct cause of the issue would have been caught if some negative scenarios are covered as part of the regression testing.</li><li>Product Ownership: Product owner should evaluate the risks associated with release items together with coding and testing team. Both teams should give independent evaluation of the risk associated with the items. Product owners should make the decision based on the importance and risks associated with each release item. Items with high business value thus high importance should not be bundled with items with high risks.</li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>These incidents highlighted the importance of understanding how promises work in JavaScript, comprehensive testing, effective communication and collaboration between teams, and risk evaluation in the release process. The team was able to identify the root cause of the issue, develop short-term and long-term mitigations, and learn valuable lessons for future development and testing processes.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;As software developers, we all strive to write bug-free and reliable code. However, sometimes unexpected issues arise, and we need to react quickly to mitigate their impact. In this article, we will discuss several real-world incidents that occurred in a production environment. We will examine the root cause of the incident and discuss the lessons learned from this experience.&lt;/p&gt;
&lt;h2 id=&quot;Prior-events&quot;&gt;&lt;a href=&quot;#Prior-events&quot; class=&quot;headerlink&quot; title=&quot;Prior events&quot;&gt;&lt;/a&gt;Prior events&lt;/h2&gt;&lt;p&gt;On March 2nd, release, migration to the latest container platform, accompanied with a huge release for the squad I&amp;#39;m in.&lt;br&gt;On March 9th, the first release after the platform migration was deployed to production.&lt;/p&gt;</summary>
    
    
    
    
    <category term="postmortem" scheme="https://jiangsc.me/tags/postmortem/"/>
    
    <category term="production incident" scheme="https://jiangsc.me/tags/production-incident/"/>
    
    <category term="Node.js" scheme="https://jiangsc.me/tags/Node-js/"/>
    
    <category term="JavaScript" scheme="https://jiangsc.me/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Quality of life CLI tips for Android Mobile App Development - 1</title>
    <link href="https://jiangsc.me/2023/02/11/mobile-dev-cli-tips-1/"/>
    <id>https://jiangsc.me/2023/02/11/mobile-dev-cli-tips-1/</id>
    <published>2023-02-11T05:29:19.000Z</published>
    <updated>2025-03-13T04:44:41.764Z</updated>
    
    <content type="html"><![CDATA[<p>I&#39;m not a mobile app developer, but for my day-to-day job, I&#39;m responsible for creating APIs that&#39;s consumed by mobile client. This means I often have both iOS and Android simulator running at the same time.</p><p>Normally, you would have to open both XCode and Android Studio respectively as that is how things are supposed to work: start each IDE, build the app in the IDE, and then run the app in the simulator through the IDE.</p><p>I don&#39;t like to do things this way, it is inefficient and will (most likely) consume lots of resources. Therefore, I developed my own scripts to do things efficiently in the command line. In this article, I will share some of the scripts I use when working with Android code, I believe these scripts are huge quality of life improvement for developers like me who need to run mobile apps in a simulator as part of their day-to-day job, but not necessarily modify or commit to the mobile code. Some of the things discussed in this article have already been mentioned briefly <a href="/2022/10/05/android-emulator-carrier-simulation/">last year</a>.</p><span id="more"></span><h3 id="Testing-deep-links-in-Android-Emulator"><a href="#Testing-deep-links-in-Android-Emulator" class="headerlink" title="Testing deep links in Android Emulator"></a>Testing deep links in Android Emulator</h3><p>If you are not familiar with deep links, check out <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vdHJhaW5pbmcvYXBwLWxpbmtzL2RlZXAtbGlua2luZw==">article about deep link on android<i class="fa fa-external-link-alt"></i></span>.</p><p>I will cover several methods I have found to test deep links.</p><div class="tabs" id=""><ul class="nav-tabs"><li class="tab active"><a href="#-1">Method 1: Sending SMS through the telnet with link</a></li><li class="tab"><a href="#-2">Method 2: Directly test the deep link through ADB and intent</a></li></ul><div class="tab-content"><div class="tab-pane active" id="-1"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">sendDeepLink</span></span>() &#123;</span><br><span class="line">    <span class="comment"># Define your deep link here the first param passed to this function will</span></span><br><span class="line">    <span class="comment"># be the actual deep link</span></span><br><span class="line">    URL=<span class="string">&quot;http://YOUR_DEEP_LINK_DOMAIN/&quot;</span><span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">    nc localhost 5554 &lt;&lt; <span class="string">_EOF &gt; /dev/null 2&gt;&amp;1</span></span><br><span class="line"><span class="string">auth $(cat  $HOME/.emulator_console_auth_token)</span></span><br><span class="line"><span class="string">sms send SENDER_NAME $URL</span></span><br><span class="line"><span class="string">_EOF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">URL=<span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line">sendDeepLink <span class="string">&quot;<span class="variable">$URL</span>&quot;</span></span><br></pre></td></tr></table></figure><p>The script above utilize <span class="exturl" data-url="aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVGVsbmV0">telnet<i class="fa fa-external-link-alt"></i></span>, it is a somewhat ancient protocol that&#39;s still implemented in Android Emulators. You can potentially use telnet for many different things. For our purpose, I&#39;m just showing how to send SMS through telnet.</p><p>Starting from the line that begins with nc, here I&#39;m using nc to connect to Android telnet port, which is localhost:5554. I&#39;m also utilizing Heredoc, I&#39;m passing the emulator_console_auth_token as the first thing and authenticate the telnet connection: <code>auth $(cat  $HOME/.emulator_console_auth_token)</code>. If we don&#39;t do this, we will have to copy &amp; paste whatever is in the auth_token file manually.</p><p>Once authenticated to telnet, we will start sending the fake SMS, because this line <code>sms send SENDER_NAME $URL</code> is still part of the Heredoc, so it is ran through the telnet connection. This is instructing the telnet terminal to send the <code>$URL</code> to the emulator as <code>SENDER_NAME</code>. And we close the Heredoc using <code>_EOF</code> which is what we used to open the Heredoc.</p><p>If you would like to know more about telnet, you can checkout the Android docs on <span class="exturl" data-url="aHR0cHM6Ly9kZXZlbG9wZXIuYW5kcm9pZC5jb20vc3R1ZGlvL3J1bi9lbXVsYXRvci1jb25zb2xlI3F1ZXJ5Y29udHJvbA==">telnet console commands<i class="fa fa-external-link-alt"></i></span></p></div><div class="tab-pane" id="-2"><p><code>adb shell am start -W -a android.intent.action.VIEW -d &quot;your deep link url&quot;</code></p><p>This is probably way more easier than the telnet method. However, I don&#39;t have full Understanding of how this works (and I haven&#39;t tested), so I&#39;m not going to try and explain it.</p></div></div></div><p>I found Telnet and ADB are really good tools to help Android development. Hope you find the tips above helpful.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;I&amp;#39;m not a mobile app developer, but for my day-to-day job, I&amp;#39;m responsible for creating APIs that&amp;#39;s consumed by mobile client. This means I often have both iOS and Android simulator running at the same time.&lt;/p&gt;
&lt;p&gt;Normally, you would have to open both XCode and Android Studio respectively as that is how things are supposed to work: start each IDE, build the app in the IDE, and then run the app in the simulator through the IDE.&lt;/p&gt;
&lt;p&gt;I don&amp;#39;t like to do things this way, it is inefficient and will (most likely) consume lots of resources. Therefore, I developed my own scripts to do things efficiently in the command line. In this article, I will share some of the scripts I use when working with Android code, I believe these scripts are huge quality of life improvement for developers like me who need to run mobile apps in a simulator as part of their day-to-day job, but not necessarily modify or commit to the mobile code. Some of the things discussed in this article have already been mentioned briefly &lt;a href=&quot;/2022/10/05/android-emulator-carrier-simulation/&quot;&gt;last year&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Android" scheme="https://jiangsc.me/tags/Android/"/>
    
    <category term="tips" scheme="https://jiangsc.me/tags/tips/"/>
    
    <category term="Command line" scheme="https://jiangsc.me/tags/Command-line/"/>
    
    <category term="Moible App Development" scheme="https://jiangsc.me/tags/Moible-App-Development/"/>
    
  </entry>
  
  <entry>
    <title>CLI tips: create PR for Azure DevOps from CLI</title>
    <link href="https://jiangsc.me/2023/02/08/Cli-tips-create-azure-devops-pr/"/>
    <id>https://jiangsc.me/2023/02/08/Cli-tips-create-azure-devops-pr/</id>
    <published>2023-02-08T08:04:27.000Z</published>
    <updated>2025-03-13T04:44:41.763Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Motivation-Slow-and-confusing-web-interface"><a href="#Motivation-Slow-and-confusing-web-interface" class="headerlink" title="Motivation: Slow and confusing web interface"></a>Motivation: Slow and confusing web interface</h3><p>Azure DevOps, probably one of the worst tools you can get for a your software team, I hated it with passion. The reason that company chooses it over any other software is probably because they can get a decent enough discount when bundled with the M$&#39;s shitty Outlook, Teams, and office suite.<br>If I could, I would give Azure DevOps&#39;s web interface and overall experience a 0 out of 10: it is slow, difficult to navigate, and way behind what you would get from GitHub or GitLab.<br>Enough for the ranting, in short, I hate Azure DevOps&#39; web interface, therefore, I prefer to use the CLI to interact with it.</p><span id="more"></span><h3 id="Azure-CLI-Generic-at-a-cost"><a href="#Azure-CLI-Generic-at-a-cost" class="headerlink" title="Azure CLI: Generic at a cost"></a>Azure CLI: Generic at a cost</h3><p>Azure DevOps, however bad it is, still provides a command line interface to interact with its API.</p><p>As an example, if you want to create a PR through azure DevOps, you can run:<br><code>az pr create -s &#39;source branch&#39; -t &#39;target branch&#39; --title &#39;title&#39; --workItem &#39;ID&#39; --description &quot;description&quot;</code></p><p>I understand that this CLI is intended to be a general audience, so it is meant to be generic, but my issues with this command are:</p><ol><li>It is just too difficult to remember all the options without looking at the docs.</li><li>Have to type the target, source branch and&#x2F;or work item manually.</li></ol><p>What I want to achieve:</p><ol><li>Interactivity: can choose if open in browser and&#x2F;or draft mode or not</li><li>Simple and intuitive: lists all the available branches, and allow selecting one as target and&#x2F;or source.</li><li>Work item linking and transition: Automatically transition the linked work item so it transition from <code>Todo</code> to <code>In progress</code></li></ol><h3 id="Road-to-the-ideal-script"><a href="#Road-to-the-ideal-script" class="headerlink" title="Road to the ideal script"></a>Road to the ideal script</h3><p>To achieve the Interactivity I wanted, I had opted to use a tool called <code>fzf</code> which is a fuzzy finder.</p><p>The script below is what I ended up with. It is quite bloated, but does what I look for.</p><p>Note before using this script, you need to have:</p><ol><li>FZF installed.</li><li>Azure CLI authenticated from your command line, meaning you can already create pr in the &quot;dumb&quot; way I mentioned above.</li></ol><figure class="highlight bash"><figcaption><span>azure-devops-script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">LINE=<span class="string">&quot;<span class="subst">$(printf %<span class="string">&quot;<span class="subst">$(tput cols)</span>&quot;</span>s | tr <span class="string">&quot; &quot;</span> <span class="string">&quot;-&quot;</span>)</span>&quot;</span> <span class="comment"># https://stackoverflow.com/a/42763333/9470346</span></span><br><span class="line">WORKITEMARG=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">createPR</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> -e <span class="string">&quot;Fetching all git origins...&quot;</span></span><br><span class="line">  git fetch --all --prune</span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -rp <span class="string">&quot;</span></span><br><span class="line"><span class="string">Choose source branch (Y/N): &quot;</span> chooseSource</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;LINE&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$chooseSource</span>&quot;</span> == <span class="string">&quot;Y&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    sourceBranch=$(git for-each-ref --<span class="built_in">sort</span>=-committerdate \</span><br><span class="line">      --format=<span class="string">&#x27;%(refname:short) (%(committerdate:relative))&#x27;</span> refs/heads \ |</span><br><span class="line">      fzf --prompt <span class="string">&quot;Choose a source branch: &quot;</span> --reverse --nth=1 --preview <span class="string">&#x27;git log --oneline --color &#123;1&#125;...&#123;1&#125;~5&#x27;</span>\ |</span><br><span class="line">      awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;Using current branch as source branch&quot;</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">&quot;Pushing first...&quot;</span></span><br><span class="line">    sourceBranch=$(git branch --show-current)</span><br><span class="line">    git push origin <span class="string">&quot;<span class="variable">$sourceBranch</span>&quot;</span> --no-verify</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Source Branch:&quot;</span><span class="string">&quot;<span class="variable">$sourceBranch</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;LINE&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  targetBranch=$(git for-each-ref --<span class="built_in">sort</span>=-committerdate \</span><br><span class="line">    --format=<span class="string">&#x27;%(refname:short) (%(committerdate:relative))&#x27;</span> refs/heads \ |</span><br><span class="line">    fzf --prompt <span class="string">&quot;Choose a target branch: &quot;</span> --reverse --nth=1 --preview <span class="string">&#x27;git log --oneline --color &#123;1&#125;...&#123;1&#125;~5&#x27;</span>\ |</span><br><span class="line">    awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Target Branch:&quot;</span><span class="string">&quot;<span class="variable">$targetBranch</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;LINE&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -rp <span class="string">&quot;</span></span><br><span class="line"><span class="string">Add workitem (Y/N): &quot;</span> workItemReq</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;PR title: &quot;</span><span class="string">&quot;<span class="variable">$workItemReq</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;LINE&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$workItemReq</span>&quot;</span> == <span class="string">&quot;Y&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$workItemReq</span>&quot;</span> == <span class="string">&quot;y&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    workItem=$(az boards query --<span class="built_in">id</span> <span class="variable">$BOARD_ID</span> --output jsonc|jq -r <span class="string">&#x27;.[]|(.id|tostring) + &quot; &quot; + (.fields[&quot;System.Title&quot;])&#x27;</span>|fzf --prompt <span class="string">&quot;Choose a workItem&quot;</span>|awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> [[ -n <span class="variable">$workItem</span> ]]; <span class="keyword">then</span></span><br><span class="line">      <span class="comment">## transition selected workitem to in progress</span></span><br><span class="line">      az boards work-item update --<span class="built_in">id</span> <span class="variable">$workItem</span> --state <span class="string">&quot;In Progress&quot;</span></span><br><span class="line">      WORKITEMARG=<span class="string">&quot;--work-items <span class="variable">$workItem</span>&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -rp <span class="string">&quot;</span></span><br><span class="line"><span class="string">Title for your PR: &quot;</span> title</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;PR title: &quot;</span><span class="string">&quot;<span class="variable">$title</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;LINE&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -rp <span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Description for your PR: &quot;</span> description</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;PR description: &quot;</span><span class="string">&quot;<span class="variable">$description</span>&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;LINE&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">if</span> [[  <span class="string">&quot;<span class="variable">$description</span>&quot;</span> ]] ; <span class="keyword">then</span></span><br><span class="line">    DESCRIPTION=<span class="string">&quot;-d <span class="variable">$description</span>&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -rp <span class="string">&quot;</span></span><br><span class="line"><span class="string">Open in browser (Y/N, N): &quot;</span> openBrowser</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$openBrowser</span>&quot;</span> == <span class="string">&quot;Y&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$openBrowser</span>&quot;</span> == <span class="string">&quot;y&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    OPEN_BROWSER_ARG=<span class="string">&quot;--open&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">read</span> -rp <span class="string">&quot;</span></span><br><span class="line"><span class="string">Is Draft? (Y/N, N): &quot;</span> isDraft</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$isDraft</span>&quot;</span> == <span class="string">&quot;Y&quot;</span> ] || [ <span class="string">&quot;<span class="variable">$isDraft</span>&quot;</span> == <span class="string">&quot;y&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    IS_DRAFT_ARG=<span class="string">&quot;--draft&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">  az repos <span class="built_in">pr</span> create -t <span class="string">&quot;<span class="variable">$targetBranch</span>&quot;</span> -s <span class="string">&quot;<span class="variable">$sourceBranch</span>&quot;</span> <span class="variable">$WORKITEMARG</span> <span class="variable">$DESCRIPTION</span> <span class="variable">$IS_DRAFT_ARG</span> --title <span class="string">&quot;<span class="variable">$title</span>&quot;</span> <span class="variable">$OPEN_BROWSER_ARG</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createPR</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Motivation-Slow-and-confusing-web-interface&quot;&gt;&lt;a href=&quot;#Motivation-Slow-and-confusing-web-interface&quot; class=&quot;headerlink&quot; title=&quot;Motivation: Slow and confusing web interface&quot;&gt;&lt;/a&gt;Motivation: Slow and confusing web interface&lt;/h3&gt;&lt;p&gt;Azure DevOps, probably one of the worst tools you can get for a your software team, I hated it with passion. The reason that company chooses it over any other software is probably because they can get a decent enough discount when bundled with the M$&amp;#39;s shitty Outlook, Teams, and office suite.&lt;br&gt;If I could, I would give Azure DevOps&amp;#39;s web interface and overall experience a 0 out of 10: it is slow, difficult to navigate, and way behind what you would get from GitHub or GitLab.&lt;br&gt;Enough for the ranting, in short, I hate Azure DevOps&amp;#39; web interface, therefore, I prefer to use the CLI to interact with it.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="https://jiangsc.me/tags/Linux/"/>
    
    <category term="Azure" scheme="https://jiangsc.me/tags/Azure/"/>
    
    <category term="CLI" scheme="https://jiangsc.me/tags/CLI/"/>
    
    <category term="Tips" scheme="https://jiangsc.me/tags/Tips/"/>
    
  </entry>
  
</feed>
